{"version":3,"file":"enhanced-error-recovery-SHA-Fz5J.js","sources":["../../../.svelte-kit/adapter-node/chunks/enhanced-error-recovery.js"],"sourcesContent":["import { c as classifyError, d as determineRecoveryStrategy, e as executeRecoveryStrategy } from \"./error-recovery.js\";\nclass ErrorPatternAnalyzer {\n  patterns = /* @__PURE__ */ new Map();\n  errorHistory = [];\n  maxHistorySize = 1e4;\n  // Keep last 10k errors for analysis\n  /**\n   * Add error to history and analyze for patterns\n   */\n  addError(error, context) {\n    this.errorHistory.unshift(error);\n    if (this.errorHistory.length > this.maxHistorySize) {\n      this.errorHistory = this.errorHistory.slice(0, this.maxHistorySize);\n    }\n    setTimeout(() => this.analyzePatterns(), 100);\n  }\n  /**\n   * Analyze error history to identify patterns\n   */\n  analyzePatterns() {\n    const now = Date.now();\n    const timeWindows = [\n      { name: \"5min\", duration: 5 * 60 * 1e3 },\n      { name: \"30min\", duration: 30 * 60 * 1e3 },\n      { name: \"2hour\", duration: 2 * 60 * 60 * 1e3 },\n      { name: \"24hour\", duration: 24 * 60 * 60 * 1e3 }\n    ];\n    for (const window of timeWindows) {\n      const recentErrors = this.errorHistory.filter(\n        (error) => now - error.timestamp.getTime() < window.duration\n      );\n      this.identifyFrequencyPatterns(recentErrors, window);\n      this.identifyAccountPatterns(recentErrors, window);\n      this.identifySequentialPatterns(recentErrors, window);\n    }\n  }\n  /**\n   * Identify high-frequency error patterns\n   */\n  identifyFrequencyPatterns(errors, window) {\n    const errorTypeCount = {};\n    errors.forEach((error) => {\n      errorTypeCount[error.type] = (errorTypeCount[error.type] || 0) + 1;\n    });\n    Object.entries(errorTypeCount).forEach(([errorType, count]) => {\n      if (count >= 5) {\n        const patternId = `freq_${errorType}_${window.name}`;\n        const confidence = Math.min(count / 20, 1);\n        this.patterns.set(patternId, {\n          patternId,\n          errorTypes: [errorType],\n          frequency: count,\n          timeWindow: window.duration,\n          confidence,\n          predictedImpact: this.calculateImpact(errorType, count),\n          mitigationStrategy: this.suggestMitigation(errorType, count)\n        });\n      }\n    });\n  }\n  /**\n   * Identify account-specific error patterns\n   */\n  identifyAccountPatterns(errors, window) {\n    const accountErrors = {};\n    errors.forEach((error) => {\n      if (error.accountId) {\n        if (!accountErrors[error.accountId]) {\n          accountErrors[error.accountId] = [];\n        }\n        accountErrors[error.accountId].push(error);\n      }\n    });\n    Object.entries(accountErrors).forEach(([accountId, accountErrorList]) => {\n      if (accountErrorList.length >= 3) {\n        const patternId = `account_${accountId}_${window.name}`;\n        const errorTypes = [...new Set(accountErrorList.map((e) => e.type))];\n        this.patterns.set(patternId, {\n          patternId,\n          errorTypes,\n          frequency: accountErrorList.length,\n          timeWindow: window.duration,\n          accountIds: [accountId],\n          confidence: Math.min(accountErrorList.length / 10, 0.9),\n          predictedImpact: \"HIGH\",\n          mitigationStrategy: \"PROACTIVE\"\n        });\n      }\n    });\n  }\n  /**\n   * Identify sequential error patterns\n   */\n  identifySequentialPatterns(errors, window) {\n    const sequences = [];\n    for (let i = 0; i < errors.length - 2; i++) {\n      const sequence = [errors[i].type, errors[i + 1].type, errors[i + 2].type];\n      const existing = sequences.find(\n        (s) => s.types.length === 3 && s.types.every((type, index) => type === sequence[index])\n      );\n      if (existing) {\n        existing.count++;\n      } else {\n        sequences.push({ types: sequence, count: 1 });\n      }\n    }\n    sequences.forEach((seq) => {\n      if (seq.count >= 2) {\n        const patternId = `seq_${seq.types.join(\"_\")}_${window.name}`;\n        this.patterns.set(patternId, {\n          patternId,\n          errorTypes: seq.types,\n          frequency: seq.count,\n          timeWindow: window.duration,\n          confidence: Math.min(seq.count / 5, 0.8),\n          predictedImpact: \"MEDIUM\",\n          mitigationStrategy: \"PREVENTIVE\"\n        });\n      }\n    });\n  }\n  /**\n   * Calculate predicted impact of error pattern\n   */\n  calculateImpact(errorType, frequency) {\n    if (errorType === \"QUOTA_EXCEEDED\" || frequency > 15) return \"CRITICAL\";\n    if (errorType === \"AUTHENTICATION_ERROR\" || frequency > 10) return \"HIGH\";\n    if (frequency > 5) return \"MEDIUM\";\n    return \"LOW\";\n  }\n  /**\n   * Suggest mitigation strategy based on error pattern\n   */\n  suggestMitigation(errorType, frequency) {\n    if (errorType === \"RATE_LIMIT\") return \"PREVENTIVE\";\n    if (frequency > 10) return \"PROACTIVE\";\n    return \"REACTIVE\";\n  }\n  /**\n   * Get all identified patterns\n   */\n  getPatterns() {\n    return Array.from(this.patterns.values());\n  }\n  /**\n   * Check if current context matches any known patterns\n   */\n  matchesPattern(context) {\n    const matchedPatterns = [];\n    let totalRisk = 0;\n    this.patterns.forEach((pattern) => {\n      let matches = false;\n      if (pattern.accountIds?.includes(context.accountId || \"\")) {\n        matches = true;\n      }\n      if (context.lastError && pattern.errorTypes.includes(context.lastError.type)) {\n        matches = true;\n      }\n      if (matches) {\n        matchedPatterns.push(pattern);\n        totalRisk += pattern.confidence;\n      }\n    });\n    return {\n      matched: matchedPatterns.length > 0,\n      patterns: matchedPatterns,\n      riskLevel: Math.min(totalRisk, 1)\n    };\n  }\n}\nclass AccountHealthMonitor {\n  healthCache = /* @__PURE__ */ new Map();\n  cacheExpiration = 30 * 60 * 1e3;\n  // 30 minutes\n  /**\n   * Analyze account health based on error history\n   */\n  async analyzeAccountHealth(accountId, errorHistory) {\n    const cached = this.healthCache.get(accountId);\n    if (cached && Date.now() - cached.lastAnalyzed.getTime() < this.cacheExpiration) {\n      return cached;\n    }\n    const now = /* @__PURE__ */ new Date();\n    const last24h = errorHistory.filter(\n      (e) => e.accountId === accountId && now.getTime() - e.timestamp.getTime() < 24 * 60 * 60 * 1e3\n    );\n    const consecutiveFailures = this.calculateConsecutiveFailures(accountId, errorHistory);\n    const errorRate = this.calculateErrorRate(last24h);\n    const lastSuccessfulSession = await this.getLastSuccessfulSession(accountId);\n    const suspiciousActivity = this.detectSuspiciousActivity(last24h);\n    const rateLimitHistory = this.getRateLimitHistory(last24h);\n    let healthScore = 100;\n    healthScore -= consecutiveFailures * 5;\n    healthScore -= errorRate * 10;\n    healthScore -= suspiciousActivity ? 20 : 0;\n    healthScore -= rateLimitHistory.length * 2;\n    if (lastSuccessfulSession) {\n      const daysSinceSuccess = (now.getTime() - lastSuccessfulSession.getTime()) / (24 * 60 * 60 * 1e3);\n      healthScore -= daysSinceSuccess * 1;\n    }\n    healthScore = Math.max(0, Math.min(100, healthScore));\n    const nextErrorProbability = this.predictNextErrorProbability(\n      consecutiveFailures,\n      errorRate,\n      healthScore\n    );\n    const health = {\n      accountId,\n      healthScore,\n      riskFactors: {\n        consecutiveFailures,\n        errorRate,\n        lastSuccessfulSession,\n        suspiciousActivity,\n        rateLimitHistory\n      },\n      predictions: {\n        nextErrorProbability,\n        recommendedAction: this.getRecommendedAction(healthScore, nextErrorProbability),\n        confidenceLevel: this.calculateConfidenceLevel(errorHistory.length)\n      },\n      lastAnalyzed: now\n    };\n    this.healthCache.set(accountId, health);\n    return health;\n  }\n  calculateConsecutiveFailures(accountId, errors) {\n    const accountErrors = errors.filter((e) => e.accountId === accountId);\n    let consecutive = 0;\n    for (const error of accountErrors) {\n      if (error.severity === \"HIGH\" || error.severity === \"CRITICAL\") {\n        consecutive++;\n      } else {\n        break;\n      }\n    }\n    return consecutive;\n  }\n  calculateErrorRate(errors) {\n    if (errors.length === 0) return 0;\n    const timespan = 24;\n    return errors.length / timespan;\n  }\n  async getLastSuccessfulSession(accountId) {\n    return void 0;\n  }\n  detectSuspiciousActivity(errors) {\n    const authErrors = errors.filter((e) => e.type === \"AUTHENTICATION_ERROR\");\n    const rateLimitErrors = errors.filter((e) => e.type === \"RATE_LIMIT\");\n    return authErrors.length > 3 || rateLimitErrors.length > 10;\n  }\n  getRateLimitHistory(errors) {\n    return errors.filter((e) => e.type === \"RATE_LIMIT\").map((e) => e.timestamp.getTime());\n  }\n  predictNextErrorProbability(consecutiveFailures, errorRate, healthScore) {\n    let probability = 0;\n    probability += Math.min(consecutiveFailures * 0.1, 0.5);\n    probability += Math.min(errorRate * 0.05, 0.3);\n    probability += Math.min((100 - healthScore) * 2e-3, 0.2);\n    return Math.min(probability, 0.95);\n  }\n  getRecommendedAction(healthScore, errorProbability) {\n    if (healthScore < 20 || errorProbability > 0.8) return \"QUARANTINE\";\n    if (healthScore < 40 || errorProbability > 0.6) return \"INVESTIGATE\";\n    if (healthScore < 70 || errorProbability > 0.4) return \"PAUSE\";\n    return \"CONTINUE\";\n  }\n  calculateConfidenceLevel(sampleSize) {\n    return Math.min(sampleSize / 100, 0.95);\n  }\n  /**\n   * Get health status for multiple accounts\n   */\n  async getBulkAccountHealth(accountIds) {\n    const results = [];\n    for (const accountId of accountIds) {\n      const health = await this.analyzeAccountHealth(accountId, []);\n      results.push(health);\n    }\n    return results;\n  }\n}\nclass SessionRiskAssessment {\n  /**\n   * Assess risk level for a scraping session before starting\n   */\n  async assessSessionRisk(sessionConfig, healthMonitor) {\n    const accountHealths = await healthMonitor.getBulkAccountHealth(sessionConfig.accountIds);\n    const healthScores = accountHealths.map((h) => h.healthScore);\n    const avgHealthScore = healthScores.reduce((a, b) => a + b, 0) / healthScores.length;\n    const historicalErrorRate = await this.getHistoricalErrorRate(sessionConfig.sessionType);\n    const timeOfDay = this.getTimeOfDayCategory();\n    const concurrentSessions = await this.getConcurrentSessionCount();\n    const systemLoad = await this.getSystemLoad();\n    const factors = {\n      accountHealthScores: healthScores,\n      historicalErrorRate,\n      timeOfDay,\n      concurrentSessions,\n      systemLoad\n    };\n    const riskLevel = this.calculateRiskLevel(factors, avgHealthScore);\n    const recommendations = this.generateRecommendations(factors, accountHealths);\n    return {\n      sessionId: crypto.randomUUID(),\n      riskLevel,\n      factors,\n      recommendations,\n      shouldProceed: riskLevel !== \"EXTREME\"\n    };\n  }\n  async getHistoricalErrorRate(sessionType) {\n    return 0.1;\n  }\n  getTimeOfDayCategory() {\n    const hour = (/* @__PURE__ */ new Date()).getHours();\n    if (hour >= 9 && hour <= 17) return \"PEAK\";\n    if (hour >= 6 && hour <= 22) return \"NORMAL\";\n    return \"OFF_PEAK\";\n  }\n  async getConcurrentSessionCount() {\n    return 2;\n  }\n  async getSystemLoad() {\n    return 0.6;\n  }\n  calculateRiskLevel(factors, avgHealthScore) {\n    let risk = 0;\n    risk += (100 - avgHealthScore) * 0.01;\n    risk += factors.historicalErrorRate * 2;\n    if (factors.timeOfDay === \"PEAK\") risk += 0.2;\n    if (factors.timeOfDay === \"OFF_PEAK\") risk -= 0.1;\n    if (factors.concurrentSessions > 5) risk += 0.3;\n    if (factors.concurrentSessions > 10) risk += 0.5;\n    risk += factors.systemLoad * 0.4;\n    if (risk > 1.5) return \"EXTREME\";\n    if (risk > 1) return \"HIGH\";\n    if (risk > 0.5) return \"MEDIUM\";\n    return \"LOW\";\n  }\n  generateRecommendations(factors, accountHealths) {\n    const recommendations = [];\n    const unhealthyAccounts = accountHealths.filter((h) => h.healthScore < 50);\n    if (unhealthyAccounts.length > 0) {\n      recommendations.push(`Consider excluding ${unhealthyAccounts.length} unhealthy accounts`);\n    }\n    if (factors.timeOfDay === \"PEAK\") {\n      recommendations.push(\"Consider running during off-peak hours for better performance\");\n    }\n    if (factors.systemLoad > 0.8) {\n      recommendations.push(\"System load high - consider reducing concurrent sessions\");\n    }\n    if (factors.concurrentSessions > 8) {\n      recommendations.push(\"High concurrent session count may increase error rates\");\n    }\n    return recommendations;\n  }\n}\nclass EnhancedErrorRecoveryManager {\n  patternAnalyzer;\n  healthMonitor;\n  riskAssessment;\n  constructor() {\n    this.patternAnalyzer = new ErrorPatternAnalyzer();\n    this.healthMonitor = new AccountHealthMonitor();\n    this.riskAssessment = new SessionRiskAssessment();\n  }\n  /**\n   * Enhanced error handling with ML-powered pattern recognition\n   */\n  async handleError(error, context, sessionManager) {\n    const scrapingError = classifyError(error, context);\n    this.patternAnalyzer.addError(scrapingError, context);\n    const patternMatch = this.patternAnalyzer.matchesPattern(context);\n    let recovery = determineRecoveryStrategy(scrapingError, context);\n    if (patternMatch.matched && patternMatch.riskLevel > 0.7) {\n      recovery = this.enhanceRecoveryWithPatterns(recovery, patternMatch.patterns);\n    }\n    let healthUpdate;\n    if (context.accountId) {\n      healthUpdate = await this.healthMonitor.analyzeAccountHealth(\n        context.accountId,\n        [scrapingError]\n      );\n      if (healthUpdate.predictions.recommendedAction === \"QUARANTINE\") {\n        recovery = {\n          strategy: \"SKIP\",\n          reason: \"Account quarantined due to poor health score\"\n        };\n      }\n    }\n    const recoveryResult = await executeRecoveryStrategy(recovery, context, sessionManager);\n    return {\n      success: recoveryResult.success,\n      scrapingError,\n      recovery,\n      patterns: patternMatch.patterns,\n      healthUpdate\n    };\n  }\n  /**\n   * Enhance recovery strategy based on identified patterns\n   */\n  enhanceRecoveryWithPatterns(baseRecovery, patterns) {\n    const preventivePatterns = patterns.filter((p) => p.mitigationStrategy === \"PREVENTIVE\");\n    const proactivePatterns = patterns.filter((p) => p.mitigationStrategy === \"PROACTIVE\");\n    if (preventivePatterns.length > 0) {\n      if (baseRecovery.delay) {\n        baseRecovery.delay *= 2;\n      }\n      baseRecovery.reason += \" (enhanced for pattern prevention)\";\n    }\n    if (proactivePatterns.length > 0 && baseRecovery.strategy === \"BACKOFF\") {\n      return {\n        strategy: \"PAUSE_SESSION\",\n        delay: 3e5,\n        // 5 minutes\n        reason: \"Proactive session pause due to identified error patterns\"\n      };\n    }\n    return baseRecovery;\n  }\n  /**\n   * Pre-session risk assessment\n   */\n  async assessPreSessionRisk(sessionConfig) {\n    return await this.riskAssessment.assessSessionRisk(sessionConfig, this.healthMonitor);\n  }\n  /**\n   * Get system analytics\n   */\n  getSystemAnalytics() {\n    const patterns = this.patternAnalyzer.getPatterns();\n    const criticalPatterns = patterns.filter((p) => p.predictedImpact === \"CRITICAL\");\n    let systemHealth = \"EXCELLENT\";\n    if (criticalPatterns.length > 0) systemHealth = \"POOR\";\n    else if (patterns.length > 10) systemHealth = \"FAIR\";\n    else if (patterns.length > 5) systemHealth = \"GOOD\";\n    return {\n      patterns,\n      patternCount: patterns.length,\n      riskAccounts: 0,\n      // Would calculate from health monitor\n      systemHealth\n    };\n  }\n  /**\n   * Enhanced withErrorHandling wrapper\n   */\n  async withEnhancedErrorHandling(operation, context, sessionManager) {\n    try {\n      const result = await operation();\n      return { success: true, data: result };\n    } catch (error) {\n      const enhanced = await this.handleError(error, context, sessionManager);\n      return {\n        success: false,\n        error: enhanced.scrapingError,\n        recovery: enhanced.recovery,\n        patterns: enhanced.patterns,\n        healthUpdate: enhanced.healthUpdate\n      };\n    }\n  }\n}\nconst enhancedErrorRecovery = new EnhancedErrorRecoveryManager();\nfunction validateEnhancedErrorRecoverySystem() {\n  const capabilities = [\n    \"ML-powered error pattern recognition\",\n    \"Account health monitoring with predictive analytics\",\n    \"Pre-session risk assessment\",\n    \"Proactive error prevention\",\n    \"Enhanced recovery strategies based on patterns\",\n    \"Real-time health score calculation\",\n    \"Suspicious activity detection\",\n    \"System load and concurrent session optimization\"\n  ];\n  const mlFeatures = [\n    \"Pattern frequency analysis across multiple time windows\",\n    \"Account-specific error pattern identification\",\n    \"Sequential error pattern recognition\",\n    \"Predictive error probability calculation\",\n    \"Confidence scoring for predictions\",\n    \"Risk level assessment with multiple factors\",\n    \"Automated recommendation generation\"\n  ];\n  return {\n    valid: true,\n    message: \"Enhanced Error Recovery System with ML capabilities fully operational\",\n    capabilities,\n    mlFeatures\n  };\n}\nexport {\n  enhancedErrorRecovery as e,\n  validateEnhancedErrorRecoverySystem as v\n};\n"],"names":[],"mappings":"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"}