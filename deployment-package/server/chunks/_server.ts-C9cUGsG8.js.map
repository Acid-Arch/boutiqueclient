{"version":3,"file":"_server.ts-C9cUGsG8.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/scraping/start/_server.ts.js"],"sourcesContent":["import { error, json } from \"@sveltejs/kit\";\nimport { query } from \"../../../../../chunks/db-loader.js\";\nconst POST = async ({ request, locals }) => {\n  try {\n    console.log(\"üîÑ Starting scraping session API request...\");\n    const requestData = await request.json();\n    console.log(\"üìã Request data received:\", JSON.stringify(requestData, null, 2));\n    if (!requestData.accountIds || !Array.isArray(requestData.accountIds) || requestData.accountIds.length === 0) {\n      throw error(400, \"Account IDs are required\");\n    }\n    for (const accountId of requestData.accountIds) {\n      if (!Number.isInteger(accountId) || accountId <= 0) {\n        throw error(400, `Invalid account ID: ${accountId}`);\n      }\n    }\n    console.log(\"‚úÖ Account IDs validated\");\n    console.log(\"üîç Validating accounts exist...\");\n    const existingAccounts = await validateAccounts(requestData.accountIds);\n    console.log(\"üìä Found accounts:\", existingAccounts);\n    if (existingAccounts.length !== requestData.accountIds.length) {\n      const missingIds = requestData.accountIds.filter((id) => !existingAccounts.some((acc) => acc.id === id));\n      throw error(400, `Accounts not found: ${missingIds.join(\", \")}`);\n    }\n    console.log(\"üèóÔ∏è Creating scraping session...\");\n    const sessionId = await createScrapingSession(requestData, existingAccounts);\n    console.log(\"‚úÖ Session created successfully:\", sessionId);\n    return json({\n      success: true,\n      sessionId,\n      message: \"Scraping session created successfully\",\n      accountCount: requestData.accountIds.length,\n      sessionType: requestData.sessionType || \"ACCOUNT_METRICS\"\n    });\n  } catch (err) {\n    console.error(\"Start scraping error:\", err);\n    if (err && typeof err === \"object\" && \"status\" in err) {\n      throw err;\n    }\n    return json(\n      { error: \"Failed to start scraping session\" },\n      { status: 500 }\n    );\n  }\n};\nasync function validateAccounts(accountIds) {\n  try {\n    const placeholders = accountIds.map((_, index) => `$${index + 1}`).join(\", \");\n    const validateQuery = `\n\t\t\tSELECT id, instagram_username as username, status\n\t\t\tFROM ig_accounts\n\t\t\tWHERE id IN (${placeholders})\n\t\t`;\n    const result = await query(validateQuery, accountIds);\n    return result?.rows || [];\n  } catch (error2) {\n    console.error(\"Error validating accounts:\", error2);\n    throw new Error(\"Failed to validate accounts\");\n  }\n}\nasync function createScrapingSession(requestData, accounts) {\n  try {\n    console.log(\"üîß Creating scraping session function called\");\n    const sessionId = crypto.randomUUID();\n    console.log(\"üÜî Generated session ID:\", sessionId);\n    const now = /* @__PURE__ */ new Date();\n    const sessionType = requestData.sessionType || \"ACCOUNT_METRICS\";\n    const totalAccounts = accounts.length;\n    console.log(\"üìä Session preparation - Type:\", sessionType, \"Total accounts:\", totalAccounts);\n    const baseUnitsPerAccount = 10;\n    const mediaUnits = requestData.config?.includeRecentMedia ? 5 : 0;\n    const followerUnits = requestData.config?.includeFollowers ? 20 : 0;\n    const estimatedUnitsPerAccount = baseUnitsPerAccount + mediaUnits + followerUnits;\n    const totalEstimatedUnits = estimatedUnitsPerAccount * totalAccounts;\n    const estimatedCost = totalEstimatedUnits * 1e-3;\n    const sessionQuery = `\n\t\t\tINSERT INTO scraping_sessions (\n\t\t\t\tid,\n\t\t\t\tsession_type,\n\t\t\t\tstatus,\n\t\t\t\taccount_ids,\n\t\t\t\tscraping_config,\n\t\t\t\ttotal_accounts,\n\t\t\t\tcompleted_accounts,\n\t\t\t\tfailed_accounts,\n\t\t\t\tskipped_accounts,\n\t\t\t\tprogress,\n\t\t\t\testimated_completion,\n\t\t\t\ttotal_request_units,\n\t\t\t\testimated_cost,\n\t\t\t\terror_count,\n\t\t\t\ttriggered_by,\n\t\t\t\ttrigger_source\n\t\t\t) VALUES (\n\t\t\t\t$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16\n\t\t\t)\n\t\t`;\n    const estimatedDuration = totalAccounts * 1e4;\n    const estimatedCompletion = new Date(now.getTime() + estimatedDuration);\n    const accountIds = JSON.stringify(requestData.accountIds);\n    const scrapingConfig = JSON.stringify(requestData.config || {});\n    console.log(\"üîÑ Prepared JSON data - AccountIds:\", accountIds, \"Config:\", scrapingConfig);\n    const sessionParams = [\n      sessionId,\n      // $1: id\n      sessionType,\n      // $2: session_type \n      \"PENDING\",\n      // $3: status\n      accountIds,\n      // $4: account_ids (jsonb)\n      scrapingConfig,\n      // $5: scraping_config (jsonb)\n      totalAccounts,\n      // $6: total_accounts\n      0,\n      // $7: completed_accounts\n      0,\n      // $8: failed_accounts\n      0,\n      // $9: skipped_accounts\n      0,\n      // $10: progress\n      estimatedCompletion,\n      // $11: estimated_completion\n      0,\n      // $12: total_request_units\n      estimatedCost,\n      // $13: estimated_cost\n      0,\n      // $14: error_count\n      \"system\",\n      // $15: triggered_by\n      \"API\"\n      // $16: trigger_source\n    ];\n    console.log(\"üíæ About to execute query with params:\", sessionParams);\n    console.log(\"üìù Query:\", sessionQuery);\n    await query(sessionQuery, sessionParams);\n    console.log(\"‚úÖ Session inserted successfully\");\n    await logSessionEvent(sessionId, \"INFO\", `Scraping session created for ${totalAccounts} accounts`, {\n      accountIds: requestData.accountIds,\n      sessionType,\n      estimatedCost,\n      config: requestData.config\n    });\n    return sessionId;\n  } catch (error2) {\n    console.error(\"Error creating scraping session:\", error2);\n    throw new Error(\"Failed to create scraping session\");\n  }\n}\nasync function logSessionEvent(sessionId, level, message, details = {}) {\n  try {\n    const logQuery = `\n\t\t\tINSERT INTO scraping_logs (\n\t\t\t\tid, session_id, level, message, source, details\n\t\t\t) VALUES (\n\t\t\t\tgen_random_uuid(), $1, $2, $3, $4, $5\n\t\t\t)\n\t\t`;\n    await query(logQuery, [\n      sessionId,\n      // $1: session_id\n      level,\n      // $2: level \n      message,\n      // $3: message\n      \"SESSION_MANAGER\",\n      // $4: source (valid ScrapingSource enum value)\n      JSON.stringify(details)\n      // $5: details (jsonb)\n    ]);\n  } catch (error2) {\n    console.error(\"Error logging session event:\", error2);\n  }\n}\nexport {\n  POST\n};\n"],"names":[],"mappings":"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"}