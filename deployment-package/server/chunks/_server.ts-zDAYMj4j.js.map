{"version":3,"file":"_server.ts-zDAYMj4j.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/scraping/analytics/costs/_server.ts.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { prisma } from \"../../../../../../chunks/database-fallback.js\";\nclass CostAnalyticsManager {\n  prisma;\n  // Using any type for fallback database compatibility\n  constructor() {\n    this.prisma = prisma;\n  }\n  /**\n   * Get comprehensive cost analytics for the specified timeframe\n   */\n  async getCostAnalytics(filter) {\n    try {\n      const timeframeDays = this.getTimeframeDays(filter.timeframe);\n      const startDate = /* @__PURE__ */ new Date();\n      startDate.setDate(startDate.getDate() - timeframeDays);\n      const sessions = await this.getSessions(startDate);\n      const analytics = await this.calculateAnalytics(sessions);\n      const recentSessions = await this.getRecentSessionCosts(10);\n      return {\n        analytics,\n        recentSessions\n      };\n    } catch (error) {\n      console.error(\"Failed to get cost analytics:\", error);\n      throw error;\n    }\n  }\n  /**\n   * Get sessions within the specified date range\n   */\n  async getSessions(startDate) {\n    try {\n      if (!this.prisma.scrapingSession) {\n        console.warn(\"ScrapingSession table not available, returning empty data\");\n        return [];\n      }\n      const sessions = await this.prisma.scrapingSession.findMany({\n        where: {\n          createdAt: {\n            gte: startDate\n          }\n        },\n        select: {\n          id: true,\n          sessionType: true,\n          status: true,\n          totalAccounts: true,\n          progress: true,\n          estimatedCost: true,\n          totalRequestUnits: true,\n          startedAt: true,\n          completedAt: true,\n          createdAt: true,\n          targetUsernames: true\n        },\n        orderBy: {\n          createdAt: \"desc\"\n        }\n      });\n      return sessions;\n    } catch (error) {\n      console.error(\"Failed to fetch sessions:\", error);\n      return [];\n    }\n  }\n  /**\n   * Calculate comprehensive analytics from session data\n   */\n  async calculateAnalytics(sessions) {\n    const now = /* @__PURE__ */ new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const thisWeekStart = new Date(today);\n    thisWeekStart.setDate(today.getDate() - today.getDay());\n    const thisMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n    const totalCosts = this.calculateTotalCosts(sessions, today, thisWeekStart, thisMonthStart);\n    const dailyCosts = this.calculateDailyCosts(sessions, 30);\n    const costBreakdown = this.calculateCostBreakdown(sessions);\n    const budgetAnalysis = this.calculateBudgetAnalysis(totalCosts);\n    const costEfficiency = this.calculateCostEfficiency(sessions);\n    const predictions = this.calculatePredictions(dailyCosts);\n    return {\n      totalCosts,\n      dailyCosts,\n      costBreakdown,\n      budgetAnalysis,\n      costEfficiency,\n      predictions\n    };\n  }\n  /**\n   * Calculate total costs for different time periods\n   */\n  calculateTotalCosts(sessions, today, thisWeekStart, thisMonthStart) {\n    let todayCost = 0;\n    let thisWeekCost = 0;\n    let thisMonthCost = 0;\n    let allTimeCost = 0;\n    sessions.forEach((session) => {\n      const cost = this.calculateSessionCost(session);\n      const sessionDate = new Date(session.createdAt);\n      allTimeCost += cost;\n      if (sessionDate >= thisMonthStart) {\n        thisMonthCost += cost;\n      }\n      if (sessionDate >= thisWeekStart) {\n        thisWeekCost += cost;\n      }\n      if (sessionDate >= today) {\n        todayCost += cost;\n      }\n    });\n    return {\n      today: todayCost,\n      thisWeek: thisWeekCost,\n      thisMonth: thisMonthCost,\n      allTime: allTimeCost\n    };\n  }\n  /**\n   * Calculate daily cost trends\n   */\n  calculateDailyCosts(sessions, days) {\n    const dailyMap = /* @__PURE__ */ new Map();\n    const now = /* @__PURE__ */ new Date();\n    for (let i = 0; i < days; i++) {\n      const date = new Date(now);\n      date.setDate(now.getDate() - (days - 1 - i));\n      const dateStr = date.toISOString().split(\"T\")[0];\n      dailyMap.set(dateStr, { cost: 0, sessions: 0, accounts: 0 });\n    }\n    sessions.forEach((session) => {\n      const sessionDate = new Date(session.createdAt);\n      const dateStr = sessionDate.toISOString().split(\"T\")[0];\n      if (dailyMap.has(dateStr)) {\n        const existing = dailyMap.get(dateStr);\n        existing.cost += this.calculateSessionCost(session);\n        existing.sessions += 1;\n        existing.accounts += session.totalAccounts || 0;\n      }\n    });\n    return Array.from(dailyMap.entries()).map(([date, data]) => ({\n      date,\n      cost: Math.round(data.cost * 100) / 100,\n      sessions: data.sessions,\n      accounts: data.accounts\n    }));\n  }\n  /**\n   * Calculate cost breakdown by session type\n   */\n  calculateCostBreakdown(sessions) {\n    const breakdownMap = /* @__PURE__ */ new Map();\n    let totalCost = 0;\n    sessions.forEach((session) => {\n      const cost = this.calculateSessionCost(session);\n      const type = this.getSessionTypeCategory(session.sessionType || \"ACCOUNT_METRICS\");\n      breakdownMap.set(type, (breakdownMap.get(type) || 0) + cost);\n      totalCost += cost;\n    });\n    return Array.from(breakdownMap.entries()).map(([category, cost]) => ({\n      category,\n      cost: Math.round(cost * 100) / 100,\n      percentage: Math.round(cost / totalCost * 100)\n    })).sort((a, b) => b.cost - a.cost);\n  }\n  /**\n   * Calculate budget analysis\n   */\n  calculateBudgetAnalysis(totalCosts) {\n    const budgetLimits = {\n      dailyBudget: 10,\n      weeklyBudget: 50,\n      monthlyBudget: 200\n    };\n    return {\n      ...budgetLimits,\n      dailyUsed: totalCosts.today,\n      weeklyUsed: totalCosts.thisWeek,\n      monthlyUsed: totalCosts.thisMonth,\n      dailyRemaining: Math.max(0, budgetLimits.dailyBudget - totalCosts.today),\n      weeklyRemaining: Math.max(0, budgetLimits.weeklyBudget - totalCosts.thisWeek),\n      monthlyRemaining: Math.max(0, budgetLimits.monthlyBudget - totalCosts.thisMonth)\n    };\n  }\n  /**\n   * Calculate cost efficiency metrics\n   */\n  calculateCostEfficiency(sessions) {\n    const completedSessions = sessions.filter((s) => s.status === \"COMPLETED\" || s.progress === 100);\n    if (completedSessions.length === 0) {\n      return {\n        avgCostPerAccount: 2e-3,\n        // Default fallback\n        avgCostPerSession: 0,\n        costTrend: \"stable\",\n        efficiencyScore: 85\n      };\n    }\n    let totalCost = 0;\n    let totalAccounts = 0;\n    let totalSessions = completedSessions.length;\n    completedSessions.forEach((session) => {\n      totalCost += this.calculateSessionCost(session);\n      totalAccounts += session.totalAccounts || 0;\n    });\n    const avgCostPerAccount = totalAccounts > 0 ? totalCost / totalAccounts : 2e-3;\n    const avgCostPerSession = totalSessions > 0 ? totalCost / totalSessions : 0;\n    const costTrend = this.calculateCostTrend(completedSessions);\n    const targetCostPerAccount = 2e-3;\n    const efficiencyScore = Math.min(100, Math.max(0, Math.round(targetCostPerAccount / Math.max(avgCostPerAccount, 1e-3) * 85)));\n    return {\n      avgCostPerAccount: Math.round(avgCostPerAccount * 1e4) / 1e4,\n      avgCostPerSession: Math.round(avgCostPerSession * 100) / 100,\n      costTrend,\n      efficiencyScore\n    };\n  }\n  /**\n   * Calculate cost predictions\n   */\n  calculatePredictions(dailyCosts) {\n    if (dailyCosts.length < 7) {\n      return {\n        predictedDailyCost: 0,\n        predictedWeeklyCost: 0,\n        predictedMonthlyCost: 0,\n        confidence: 0\n      };\n    }\n    const recentDays = dailyCosts.slice(-7);\n    const avgDailyCost = recentDays.reduce((sum, day) => sum + day.cost, 0) / recentDays.length;\n    const trendMultiplier = this.calculateTrendMultiplier(recentDays);\n    const predictedDailyCost = avgDailyCost * trendMultiplier;\n    const predictedWeeklyCost = predictedDailyCost * 7;\n    const predictedMonthlyCost = predictedDailyCost * 30;\n    const confidence = this.calculatePredictionConfidence(recentDays);\n    return {\n      predictedDailyCost: Math.round(predictedDailyCost * 100) / 100,\n      predictedWeeklyCost: Math.round(predictedWeeklyCost * 100) / 100,\n      predictedMonthlyCost: Math.round(predictedMonthlyCost * 100) / 100,\n      confidence: Math.round(confidence)\n    };\n  }\n  /**\n   * Get recent session cost data\n   */\n  async getRecentSessionCosts(limit) {\n    try {\n      if (!this.prisma.scrapingSession) {\n        console.warn(\"ScrapingSession table not available, returning empty data\");\n        return [];\n      }\n      const sessions = await this.prisma.scrapingSession.findMany({\n        where: {\n          status: \"COMPLETED\"\n        },\n        select: {\n          id: true,\n          sessionType: true,\n          totalAccounts: true,\n          totalRequestUnits: true,\n          estimatedCost: true,\n          startedAt: true,\n          completedAt: true,\n          createdAt: true\n        },\n        orderBy: {\n          completedAt: \"desc\"\n        },\n        take: limit\n      });\n      return sessions.map((session) => {\n        const duration = session.completedAt && session.startedAt ? Math.floor((new Date(session.completedAt).getTime() - new Date(session.startedAt).getTime()) / 1e3) : 0;\n        const totalCost = this.calculateSessionCost(session);\n        const costPerAccount = (session.totalAccounts ?? 0) > 0 ? totalCost / (session.totalAccounts ?? 1) : 0;\n        const efficiency = this.calculateSessionEfficiency(session);\n        return {\n          sessionId: session.id,\n          sessionType: session.sessionType || \"ACCOUNT_METRICS\",\n          totalCost: Math.round(totalCost * 100) / 100,\n          costPerAccount: Math.round(costPerAccount * 1e4) / 1e4,\n          accountsProcessed: session.totalAccounts || 0,\n          duration,\n          requestUnits: session.totalRequestUnits || 0,\n          efficiency: Math.round(efficiency),\n          date: session.createdAt.toISOString()\n        };\n      });\n    } catch (error) {\n      console.error(\"Failed to get recent session costs:\", error);\n      return [];\n    }\n  }\n  /**\n   * Helper methods\n   */\n  getTimeframeDays(timeframe) {\n    switch (timeframe) {\n      case \"7d\":\n        return 7;\n      case \"30d\":\n        return 30;\n      case \"90d\":\n        return 90;\n      case \"1y\":\n        return 365;\n      default:\n        return 30;\n    }\n  }\n  calculateSessionCost(session) {\n    if (session.estimatedCost && session.estimatedCost > 0) {\n      return session.estimatedCost;\n    }\n    const requestUnits = session.totalRequestUnits || 0;\n    const costPerUnit = 2e-3 / 500;\n    return requestUnits * costPerUnit;\n  }\n  getSessionTypeCategory(sessionType) {\n    switch (sessionType) {\n      case \"ACCOUNT_METRICS\":\n        return \"Account Metrics\";\n      case \"DETAILED_ANALYSIS\":\n        return \"Detailed Analysis\";\n      case \"FOLLOWERS_ANALYSIS\":\n        return \"Follower Analysis\";\n      case \"MEDIA_ANALYSIS\":\n        return \"Media Analysis\";\n      case \"STORIES_ANALYSIS\":\n        return \"Stories Analysis\";\n      default:\n        return \"Other\";\n    }\n  }\n  calculateCostTrend(sessions) {\n    if (sessions.length < 6) return \"stable\";\n    const sortedSessions = sessions.sort(\n      (a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n    );\n    const recentSessions = sortedSessions.slice(-3);\n    const olderSessions = sortedSessions.slice(-6, -3);\n    const recentAvgCost = recentSessions.reduce((sum, s) => sum + this.calculateSessionCost(s), 0) / recentSessions.length;\n    const olderAvgCost = olderSessions.reduce((sum, s) => sum + this.calculateSessionCost(s), 0) / olderSessions.length;\n    const difference = (recentAvgCost - olderAvgCost) / olderAvgCost;\n    if (difference > 0.1) return \"increasing\";\n    if (difference < -0.1) return \"decreasing\";\n    return \"stable\";\n  }\n  calculateTrendMultiplier(dailyCosts) {\n    if (dailyCosts.length < 3) return 1;\n    const x = dailyCosts.map((_, i) => i);\n    const y = dailyCosts.map((d) => d.cost);\n    const n = x.length;\n    const sumX = x.reduce((a, b) => a + b, 0);\n    const sumY = y.reduce((a, b) => a + b, 0);\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\n    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    return Math.max(0.5, Math.min(2, 1 + slope * 0.1));\n  }\n  calculatePredictionConfidence(dailyCosts) {\n    if (dailyCosts.length < 3) return 50;\n    const costs = dailyCosts.map((d) => d.cost);\n    const mean = costs.reduce((a, b) => a + b, 0) / costs.length;\n    const variance = costs.reduce((sum, cost) => sum + Math.pow(cost - mean, 2), 0) / costs.length;\n    const stdDev = Math.sqrt(variance);\n    const coeffOfVariation = mean > 0 ? stdDev / mean : 1;\n    return Math.max(60, Math.min(95, 95 - coeffOfVariation * 100));\n  }\n  calculateSessionEfficiency(session) {\n    const cost = this.calculateSessionCost(session);\n    const accounts = session.totalAccounts || 1;\n    const costPerAccount = cost / accounts;\n    const targetCostPerAccount = 2e-3;\n    const efficiency = targetCostPerAccount / Math.max(costPerAccount, 1e-3) * 100;\n    const completionBonus = session.progress === 100 ? 10 : 0;\n    return Math.min(100, Math.max(0, efficiency + completionBonus));\n  }\n  /**\n   * Real-time cost update for WebSocket integration\n   */\n  async updateRealTimeCost(sessionId, currentCost, requestUnits) {\n    try {\n      if (!this.prisma.scrapingSession) {\n        console.warn(\"ScrapingSession table not available, skipping cost update\");\n        return;\n      }\n      await this.prisma.scrapingSession.update({\n        where: { id: sessionId },\n        data: {\n          estimatedCost: currentCost,\n          totalRequestUnits: requestUnits\n        }\n      });\n    } catch (error) {\n      console.error(\"Failed to update real-time cost:\", error);\n    }\n  }\n  /**\n   * Get cost optimization recommendations\n   */\n  async getCostOptimizationRecommendations() {\n    const recommendations = [];\n    try {\n      const recentSessions = await this.getRecentSessionCosts(20);\n      const avgCostPerAccount = recentSessions.reduce((sum, s) => sum + s.costPerAccount, 0) / recentSessions.length;\n      if (avgCostPerAccount > 25e-4) {\n        recommendations.push(\"💡 Consider reducing the scope of data collection to lower cost per account\");\n      }\n      if (recentSessions.some((s) => s.efficiency < 70)) {\n        recommendations.push(\"⚡ Some sessions have low efficiency - review error rates and retry mechanisms\");\n      }\n      const mockSessionData = recentSessions.map((session) => ({\n        id: session.sessionId,\n        sessionType: session.sessionType,\n        totalAccounts: session.accountsProcessed,\n        estimatedCost: session.totalCost,\n        totalRequestUnits: session.requestUnits,\n        createdAt: new Date(session.date)\n      }));\n      const dailyCosts = this.calculateDailyCosts(mockSessionData, 7);\n      const avgDailyCost = dailyCosts.reduce((sum, d) => sum + d.cost, 0) / dailyCosts.length;\n      if (avgDailyCost > 8) {\n        recommendations.push(\"📊 Daily costs are approaching budget limits - consider schedule optimization\");\n      }\n      if (recommendations.length === 0) {\n        recommendations.push(\"✅ Cost efficiency is optimal - great job maintaining budget control!\");\n      }\n    } catch (error) {\n      console.error(\"Failed to generate cost recommendations:\", error);\n      recommendations.push(\"❌ Unable to generate recommendations - check system health\");\n    }\n    return recommendations;\n  }\n}\nconst costAnalyticsManager = new CostAnalyticsManager();\nconst GET = async ({ url, fetch }) => {\n  try {\n    const timeframe = url.searchParams.get(\"timeframe\") || \"30d\";\n    const validTimeframes = [\"7d\", \"30d\", \"90d\", \"1y\"];\n    if (!validTimeframes.includes(timeframe)) {\n      return json(\n        {\n          error: \"Invalid timeframe\",\n          message: \"Timeframe must be one of: 7d, 30d, 90d, 1y\"\n        },\n        { status: 400 }\n      );\n    }\n    const analyticsData = await costAnalyticsManager.getCostAnalytics({ timeframe });\n    const recommendations = await costAnalyticsManager.getCostOptimizationRecommendations();\n    return json({\n      success: true,\n      timeframe,\n      ...analyticsData,\n      recommendations,\n      metadata: {\n        generatedAt: (/* @__PURE__ */ new Date()).toISOString(),\n        requestId: crypto.randomUUID(),\n        version: \"1.0\"\n      }\n    });\n  } catch (error) {\n    console.error(\"Cost analytics API error:\", error);\n    return json(\n      {\n        success: false,\n        error: \"Internal server error\",\n        message: error instanceof Error ? error.message : \"Unknown error occurred\",\n        timeframe: url.searchParams.get(\"timeframe\") || \"30d\"\n      },\n      { status: 500 }\n    );\n  }\n};\nconst POST = async ({ request }) => {\n  try {\n    const body = await request.json();\n    const { action, sessionId, currentCost, requestUnits } = body;\n    if (action === \"update-real-time-cost\") {\n      if (!sessionId || currentCost === void 0 || requestUnits === void 0) {\n        return json(\n          {\n            success: false,\n            error: \"Missing required fields\",\n            message: \"sessionId, currentCost, and requestUnits are required for real-time cost updates\"\n          },\n          { status: 400 }\n        );\n      }\n      await costAnalyticsManager.updateRealTimeCost(sessionId, currentCost, requestUnits);\n      return json({\n        success: true,\n        message: \"Real-time cost updated successfully\",\n        sessionId,\n        updatedAt: (/* @__PURE__ */ new Date()).toISOString()\n      });\n    }\n    return json(\n      {\n        success: false,\n        error: \"Invalid action\",\n        message: \"Supported actions: update-real-time-cost\"\n      },\n      { status: 400 }\n    );\n  } catch (error) {\n    console.error(\"Cost analytics POST error:\", error);\n    return json(\n      {\n        success: false,\n        error: \"Internal server error\",\n        message: error instanceof Error ? error.message : \"Unknown error occurred\"\n      },\n      { status: 500 }\n    );\n  }\n};\nexport {\n  GET,\n  POST\n};\n"],"names":[],"mappings":"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"}