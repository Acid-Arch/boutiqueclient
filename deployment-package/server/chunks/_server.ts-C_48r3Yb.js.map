{"version":3,"file":"_server.ts-C_48r3Yb.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/scraping/bulk/start/_server.ts.js"],"sourcesContent":["import { error, json } from \"@sveltejs/kit\";\nimport { query } from \"../../../../../../chunks/db-loader.js\";\nconst POST = async ({ request, locals }) => {\n  try {\n    console.log(\"🚀 Starting bulk scraping operation...\");\n    const requestData = await request.json();\n    console.log(\"📋 Bulk request data:\", JSON.stringify(requestData, null, 2));\n    if (!requestData.accountIds || !Array.isArray(requestData.accountIds) || requestData.accountIds.length === 0) {\n      throw error(400, \"Account IDs are required for bulk operation\");\n    }\n    for (const accountId of requestData.accountIds) {\n      if (!Number.isInteger(accountId) || accountId <= 0) {\n        throw error(400, `Invalid account ID: ${accountId}`);\n      }\n    }\n    console.log(`✅ Bulk operation validated for ${requestData.accountIds.length} accounts`);\n    console.log(\"🔍 Validating accounts exist...\");\n    const existingAccounts = await validateAccounts(requestData.accountIds);\n    console.log(`📊 Found ${existingAccounts.length} existing accounts`);\n    if (existingAccounts.length !== requestData.accountIds.length) {\n      const missingIds = requestData.accountIds.filter((id) => !existingAccounts.some((acc) => acc.id === id));\n      throw error(400, `Accounts not found: ${missingIds.join(\", \")}`);\n    }\n    const batchSize = requestData.batchSize || 50;\n    const totalAccounts = requestData.accountIds.length;\n    const batches = Math.ceil(totalAccounts / batchSize);\n    console.log(`🔧 Creating ${batches} batches with size ${batchSize} for ${totalAccounts} accounts`);\n    const parentSessionId = await createBulkParentSession(requestData, existingAccounts);\n    console.log(`✅ Parent session created: ${parentSessionId}`);\n    const batchSessionIds = [];\n    for (let i = 0; i < batches; i++) {\n      const startIdx = i * batchSize;\n      const endIdx = Math.min(startIdx + batchSize, totalAccounts);\n      const batchAccountIds = requestData.accountIds.slice(startIdx, endIdx);\n      console.log(`🏗️ Creating batch ${i + 1}/${batches} with ${batchAccountIds.length} accounts`);\n      const batchSessionId = await createBatchSession(\n        requestData,\n        batchAccountIds,\n        existingAccounts.filter((acc) => batchAccountIds.includes(acc.id)),\n        parentSessionId,\n        i + 1\n      );\n      batchSessionIds.push(batchSessionId);\n    }\n    console.log(`✅ Created ${batchSessionIds.length} batch sessions`);\n    await updateParentSessionWithBatches(parentSessionId, batchSessionIds);\n    await logBulkOperation(parentSessionId, \"INFO\", `Bulk operation created for ${totalAccounts} accounts in ${batches} batches`, {\n      accountIds: requestData.accountIds,\n      batchCount: batches,\n      batchSize,\n      priority: requestData.priority,\n      sessionType: requestData.sessionType\n    });\n    return json({\n      success: true,\n      parentSessionId,\n      batchSessionIds,\n      message: `Bulk operation created successfully with ${batches} batches`,\n      totalAccounts,\n      batchCount: batches,\n      batchSize,\n      sessionType: requestData.sessionType || \"ACCOUNT_METRICS\"\n    });\n  } catch (err) {\n    console.error(\"Bulk operation error:\", err);\n    if (err && typeof err === \"object\" && \"status\" in err) {\n      throw err;\n    }\n    return json(\n      { error: \"Failed to create bulk scraping operation\" },\n      { status: 500 }\n    );\n  }\n};\nasync function validateAccounts(accountIds) {\n  try {\n    const placeholders = accountIds.map((_, index) => `$${index + 1}`).join(\", \");\n    const validateQuery = `\n\t\t\tSELECT id, instagram_username as username, status\n\t\t\tFROM ig_accounts\n\t\t\tWHERE id IN (${placeholders})\n\t\t`;\n    const result = await query(validateQuery, accountIds);\n    return result?.rows || [];\n  } catch (error2) {\n    console.error(\"Error validating accounts:\", error2);\n    throw new Error(\"Failed to validate accounts\");\n  }\n}\nasync function createBulkParentSession(requestData, accounts) {\n  try {\n    const sessionId = crypto.randomUUID();\n    const now = /* @__PURE__ */ new Date();\n    const sessionType = requestData.sessionType || \"BULK_ACCOUNT_METRICS\";\n    const totalAccounts = accounts.length;\n    const priority = requestData.priority || \"NORMAL\";\n    const estimatedUnitsPerAccount = calculateUnitsPerAccount(requestData.config || {});\n    const totalEstimatedUnits = estimatedUnitsPerAccount * totalAccounts;\n    const estimatedCost = totalEstimatedUnits * 1e-3;\n    const batchSize = requestData.batchSize || 50;\n    const batches = Math.ceil(totalAccounts / batchSize);\n    const estimatedDuration = batches * 5 * 60 * 1e3;\n    const estimatedCompletion = new Date(now.getTime() + estimatedDuration);\n    const sessionQuery = `\n\t\t\tINSERT INTO scraping_sessions (\n\t\t\t\tid,\n\t\t\t\tsession_type,\n\t\t\t\tstatus,\n\t\t\t\taccount_ids,\n\t\t\t\tscraping_config,\n\t\t\t\ttotal_accounts,\n\t\t\t\tcompleted_accounts,\n\t\t\t\tfailed_accounts,\n\t\t\t\tskipped_accounts,\n\t\t\t\tprogress,\n\t\t\t\testimated_completion,\n\t\t\t\ttotal_request_units,\n\t\t\t\testimated_cost,\n\t\t\t\terror_count,\n\t\t\t\ttriggered_by,\n\t\t\t\ttrigger_source,\n\t\t\t\ttags,\n\t\t\t\tnotes\n\t\t\t) VALUES (\n\t\t\t\t$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18\n\t\t\t)\n\t\t`;\n    const sessionParams = [\n      sessionId,\n      sessionType,\n      \"PENDING\",\n      JSON.stringify(requestData.accountIds),\n      JSON.stringify({\n        ...requestData.config,\n        batchSize: requestData.batchSize,\n        priority,\n        costLimit: requestData.costLimit\n      }),\n      totalAccounts,\n      0,\n      // completed_accounts\n      0,\n      // failed_accounts\n      0,\n      // skipped_accounts\n      0,\n      // progress\n      estimatedCompletion,\n      0,\n      // total_request_units (will be updated as batches complete)\n      estimatedCost,\n      0,\n      // error_count\n      \"bulk_api\",\n      \"BULK_API\",\n      JSON.stringify(requestData.tags || [\"bulk_operation\"]),\n      requestData.notes || `Bulk operation for ${totalAccounts} accounts`\n    ];\n    await query(sessionQuery, sessionParams);\n    return sessionId;\n  } catch (error2) {\n    console.error(\"Error creating bulk parent session:\", error2);\n    throw new Error(\"Failed to create bulk parent session\");\n  }\n}\nasync function createBatchSession(requestData, batchAccountIds, batchAccounts, parentSessionId, batchNumber) {\n  try {\n    const sessionId = crypto.randomUUID();\n    const now = /* @__PURE__ */ new Date();\n    const sessionType = requestData.sessionType || \"ACCOUNT_METRICS\";\n    const totalAccounts = batchAccounts.length;\n    const estimatedUnitsPerAccount = calculateUnitsPerAccount(requestData.config || {});\n    const totalEstimatedUnits = estimatedUnitsPerAccount * totalAccounts;\n    const estimatedCost = totalEstimatedUnits * 1e-3;\n    const estimatedDuration = Math.ceil(totalAccounts / 6) * 60 * 1e3;\n    const estimatedCompletion = new Date(now.getTime() + estimatedDuration);\n    const sessionQuery = `\n\t\t\tINSERT INTO scraping_sessions (\n\t\t\t\tid,\n\t\t\t\tsession_type,\n\t\t\t\tstatus,\n\t\t\t\taccount_ids,\n\t\t\t\tscraping_config,\n\t\t\t\ttotal_accounts,\n\t\t\t\tcompleted_accounts,\n\t\t\t\tfailed_accounts,\n\t\t\t\tskipped_accounts,\n\t\t\t\tprogress,\n\t\t\t\testimated_completion,\n\t\t\t\ttotal_request_units,\n\t\t\t\testimated_cost,\n\t\t\t\terror_count,\n\t\t\t\ttriggered_by,\n\t\t\t\ttrigger_source,\n\t\t\t\ttags,\n\t\t\t\tnotes\n\t\t\t) VALUES (\n\t\t\t\t$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18\n\t\t\t)\n\t\t`;\n    const sessionParams = [\n      sessionId,\n      sessionType,\n      \"PENDING\",\n      JSON.stringify(batchAccountIds),\n      JSON.stringify({\n        ...requestData.config,\n        parentSessionId,\n        batchNumber,\n        priority: requestData.priority\n      }),\n      totalAccounts,\n      0,\n      // completed_accounts\n      0,\n      // failed_accounts\n      0,\n      // skipped_accounts\n      0,\n      // progress\n      estimatedCompletion,\n      0,\n      // total_request_units\n      estimatedCost,\n      0,\n      // error_count\n      \"bulk_api\",\n      \"BULK_BATCH\",\n      JSON.stringify([...requestData.tags || [], `batch_${batchNumber}`, \"bulk_operation\"]),\n      `Batch ${batchNumber} - ${totalAccounts} accounts`\n    ];\n    await query(sessionQuery, sessionParams);\n    return sessionId;\n  } catch (error2) {\n    console.error(`Error creating batch session ${batchNumber}:`, error2);\n    throw new Error(`Failed to create batch session ${batchNumber}`);\n  }\n}\nasync function updateParentSessionWithBatches(parentSessionId, batchSessionIds) {\n  try {\n    const updateQuery = `\n\t\t\tUPDATE scraping_sessions \n\t\t\tSET scraping_config = scraping_config || $1\n\t\t\tWHERE id = $2\n\t\t`;\n    const batchInfo = {\n      batchSessionIds,\n      batchCount: batchSessionIds.length,\n      createdBatches: (/* @__PURE__ */ new Date()).toISOString()\n    };\n    await query(updateQuery, [JSON.stringify(batchInfo), parentSessionId]);\n  } catch (error2) {\n    console.error(\"Error updating parent session with batch info:\", error2);\n    throw new Error(\"Failed to update parent session\");\n  }\n}\nfunction calculateUnitsPerAccount(config) {\n  let units = 2;\n  if (config.includeRecentMedia) {\n    units += Math.ceil((config.maxMediaToFetch || 12) / 10);\n  }\n  if (config.includeFollowers) {\n    units += 3;\n  }\n  if (config.includeStories) {\n    units += 1;\n  }\n  if (config.includeFollowing) {\n    units += 2;\n  }\n  if (config.includeHighlights) {\n    units += 1;\n  }\n  return units;\n}\nasync function logBulkOperation(sessionId, level, message, details = {}) {\n  try {\n    const logQuery = `\n\t\t\tINSERT INTO scraping_logs (\n\t\t\t\tid, session_id, level, message, source, details\n\t\t\t) VALUES (\n\t\t\t\tgen_random_uuid(), $1, $2, $3, $4, $5\n\t\t\t)\n\t\t`;\n    await query(logQuery, [\n      sessionId,\n      level,\n      message,\n      \"BULK_MANAGER\",\n      JSON.stringify(details)\n    ]);\n  } catch (error2) {\n    console.error(\"Error logging bulk operation:\", error2);\n  }\n}\nexport {\n  POST\n};\n"],"names":[],"mappings":"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"}