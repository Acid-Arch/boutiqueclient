{"version":3,"file":"oauth-service-DiGELVR6.js","sources":["../../../.svelte-kit/adapter-node/chunks/oauth-service.js"],"sourcesContent":["import pg from \"pg\";\nimport { A as AuthService, D as DATABASE_URL } from \"./auth-direct.js\";\nconst { Client } = pg;\nasync function getDbClient() {\n  const client = new Client({\n    connectionString: DATABASE_URL\n  });\n  await client.connect();\n  return client;\n}\nclass OAuthService {\n  /**\n   * Handle Google OAuth callback and create/update user\n   */\n  static async handleGoogleCallback(profile) {\n    let client = null;\n    try {\n      client = await getDbClient();\n      await client.query(\"BEGIN\");\n      const oauthUserQuery = `\n        SELECT id, email, name, company, avatar_url, role, subscription, active, last_login_at\n        FROM users \n        WHERE oauth_id = $1 AND oauth_provider = $2 AND active = true\n      `;\n      const oauthResult = await client.query(oauthUserQuery, [profile.sub || profile.id, \"google\"]);\n      if (oauthResult.rows.length > 0) {\n        const user = oauthResult.rows[0];\n        const sessionUser2 = await this.updateOAuthUserProfile(client, user.id, profile);\n        await client.query(\"COMMIT\");\n        return {\n          success: true,\n          user: sessionUser2,\n          isNewUser: false,\n          accountLinked: false\n        };\n      }\n      const emailUserQuery = `\n        SELECT id, email, name, company, avatar_url, role, subscription, active, last_login_at, oauth_provider\n        FROM users \n        WHERE email = $1 AND active = true\n      `;\n      const emailResult = await client.query(emailUserQuery, [profile.email]);\n      if (emailResult.rows.length > 0) {\n        const existingUser = emailResult.rows[0];\n        if (existingUser.oauth_provider) {\n          await client.query(\"ROLLBACK\");\n          return {\n            success: false,\n            error: \"Account is already linked to another OAuth provider\"\n          };\n        }\n        const sessionUser2 = await this.linkOAuthToExistingUser(client, existingUser.id, profile);\n        await client.query(\"COMMIT\");\n        return {\n          success: true,\n          user: sessionUser2,\n          isNewUser: false,\n          accountLinked: true\n        };\n      }\n      const sessionUser = await this.createNewOAuthUser(client, profile);\n      await client.query(\"COMMIT\");\n      return {\n        success: true,\n        user: sessionUser,\n        isNewUser: true,\n        accountLinked: false\n      };\n    } catch (error) {\n      if (client) {\n        await client.query(\"ROLLBACK\");\n      }\n      console.error(\"OAuth callback error:\", error);\n      return {\n        success: false,\n        error: \"OAuth authentication failed\"\n      };\n    } finally {\n      if (client) {\n        await client.end();\n      }\n    }\n  }\n  /**\n   * Create new user from OAuth profile\n   */\n  static async createNewOAuthUser(client, profile) {\n    const baseUsername = profile.email.split(\"@\")[0] || profile.name.toLowerCase().replace(/\\s+/g, \"\");\n    await this.generateUniqueUsername(client, baseUsername);\n    const insertUserQuery = `\n      INSERT INTO users (\n        email, password_hash, name, avatar_url, \n        oauth_provider, oauth_id, email_verified, role, subscription, active, provider,\n        created_at, updated_at, last_login_at\n      ) VALUES (\n        $1, NULL, $2, $3, \n        $4, $5, $6, $7, $8, $9, $10,\n        NOW(), NOW(), NOW()\n      ) RETURNING id, email, name, company, avatar_url, role, subscription, active, last_login_at\n    `;\n    const values = [\n      profile.email,\n      profile.name || \"User\",\n      profile.picture || null,\n      \"google\",\n      profile.sub || profile.id,\n      profile.email_verified || false,\n      \"CLIENT\",\n      // Default role\n      \"Basic\",\n      // Default subscription\n      true,\n      \"GOOGLE\"\n      // Provider enum value\n    ];\n    const result = await client.query(insertUserQuery, values);\n    const user = result.rows[0];\n    return this.mapDatabaseUserToSessionUser(user);\n  }\n  /**\n   * Link OAuth account to existing user\n   */\n  static async linkOAuthToExistingUser(client, userId, profile) {\n    const updateUserQuery = `\n      UPDATE users \n      SET \n        oauth_provider = $2,\n        oauth_id = $3,\n        avatar_url = COALESCE($4, avatar_url),\n        name = COALESCE($5, name),\n        email_verified = COALESCE($6, email_verified),\n        last_login_at = NOW(),\n        updated_at = NOW()\n      WHERE id = $1\n      RETURNING id, email, name, company, avatar_url, role, subscription, active, last_login_at\n    `;\n    const values = [\n      userId,\n      \"google\",\n      profile.sub || profile.id,\n      profile.picture || null,\n      profile.name || null,\n      profile.email_verified || null\n    ];\n    const result = await client.query(updateUserQuery, values);\n    const user = result.rows[0];\n    return this.mapDatabaseUserToSessionUser(user);\n  }\n  /**\n   * Update OAuth user profile data\n   */\n  static async updateOAuthUserProfile(client, userId, profile) {\n    const updateUserQuery = `\n      UPDATE users \n      SET \n        avatar_url = COALESCE($2, avatar_url),\n        name = COALESCE($3, name),\n        email_verified = COALESCE($4, email_verified),\n        last_login_at = NOW(),\n        updated_at = NOW()\n      WHERE id = $1\n      RETURNING id, email, name, company, avatar_url, role, subscription, active, last_login_at\n    `;\n    const values = [\n      userId,\n      profile.picture || null,\n      profile.name || null,\n      profile.email_verified || null\n    ];\n    const result = await client.query(updateUserQuery, values);\n    const user = result.rows[0];\n    return this.mapDatabaseUserToSessionUser(user);\n  }\n  /**\n   * Generate unique username from base string\n   */\n  static async generateUniqueUsername(client, baseUsername) {\n    let cleanBase = baseUsername.toLowerCase().replace(/[^a-z0-9_-]/g, \"\").slice(0, 20);\n    if (!cleanBase || cleanBase.length < 3) {\n      cleanBase = \"user\";\n    }\n    let username = cleanBase;\n    let counter = 1;\n    while (true) {\n      const checkQuery = `SELECT id FROM users WHERE username = $1`;\n      const result = await client.query(checkQuery, [username]);\n      if (result.rows.length === 0) {\n        return username;\n      }\n      username = `${cleanBase}${counter}`;\n      counter++;\n      if (counter > 999) {\n        username = `${cleanBase}${Date.now()}`;\n        break;\n      }\n    }\n    return username;\n  }\n  /**\n   * Map database user to SessionUser interface\n   */\n  static mapDatabaseUserToSessionUser(user) {\n    return {\n      id: user.id.toString(),\n      email: user.email,\n      name: user.name || \"User\",\n      company: user.company,\n      avatar: user.avatar_url,\n      role: user.role,\n      subscription: user.subscription,\n      isActive: user.active,\n      lastLoginAt: user.last_login_at\n    };\n  }\n  /**\n   * Find OAuth user by provider and ID\n   */\n  static async findOAuthUser(provider, oauthId) {\n    let client = null;\n    try {\n      client = await getDbClient();\n      const userQuery = `\n        SELECT id, email, name, company, avatar_url, role, subscription, active, last_login_at\n        FROM users \n        WHERE oauth_provider = $1 AND oauth_id = $2 AND active = true\n      `;\n      const result = await client.query(userQuery, [provider, oauthId]);\n      if (result.rows.length === 0) {\n        return null;\n      }\n      return this.mapDatabaseUserToSessionUser(result.rows[0]);\n    } catch (error) {\n      console.error(\"Find OAuth user error:\", error);\n      return null;\n    } finally {\n      if (client) {\n        await client.end();\n      }\n    }\n  }\n  /**\n   * Create session for OAuth user (uses existing AuthService patterns)\n   */\n  static async createOAuthSession(user, request) {\n    const sessionToken = AuthService.generateSessionToken();\n    const cookieOptions = AuthService.getSessionCookieOptions();\n    let client = null;\n    try {\n      client = await getDbClient();\n      const ipAddress = this.extractIPAddress(request);\n      const userAgent = request.headers.get(\"user-agent\") || null;\n      const insertSessionQuery = `\n        INSERT INTO user_sessions (\n          id, user_id, session_token, ip_address, user_agent, \n          last_activity, expires_at, active, created_at\n        ) VALUES (\n          gen_random_uuid(), $1, $2, $3, $4, \n          NOW(), NOW() + INTERVAL '7 days', true, NOW()\n        )\n      `;\n      await client.query(insertSessionQuery, [\n        parseInt(user.id),\n        sessionToken,\n        ipAddress,\n        userAgent\n      ]);\n      return {\n        token: sessionToken,\n        cookieOptions\n      };\n    } catch (error) {\n      console.error(\"Create OAuth session error:\", error);\n      throw new Error(\"Failed to create session\");\n    } finally {\n      if (client) {\n        await client.end();\n      }\n    }\n  }\n  /**\n   * Extract IP address from request\n   */\n  static extractIPAddress(request) {\n    const forwarded = request.headers.get(\"x-forwarded-for\");\n    if (forwarded) {\n      return forwarded.split(\",\")[0].trim();\n    }\n    const realIP = request.headers.get(\"x-real-ip\");\n    if (realIP) {\n      return realIP;\n    }\n    return \"unknown\";\n  }\n  /**\n   * Validate Google profile data\n   */\n  static validateGoogleProfile(profile) {\n    return profile && (typeof profile.sub === \"string\" || typeof profile.id === \"string\") && typeof profile.email === \"string\" && typeof profile.name === \"string\" && profile.email.includes(\"@\") && (profile.sub?.length > 0 || profile.id?.length > 0);\n  }\n  /**\n   * Check if user can link OAuth account\n   */\n  static async canLinkOAuthAccount(email, provider) {\n    let client = null;\n    try {\n      client = await getDbClient();\n      const userQuery = `\n        SELECT oauth_provider, active\n        FROM users \n        WHERE email = $1\n      `;\n      const result = await client.query(userQuery, [email]);\n      if (result.rows.length === 0) {\n        return { canLink: true };\n      }\n      const user = result.rows[0];\n      if (!user.active) {\n        return { canLink: false, reason: \"Account is inactive\" };\n      }\n      if (user.oauth_provider && user.oauth_provider !== provider) {\n        return { canLink: false, reason: `Account is already linked to ${user.oauth_provider}` };\n      }\n      return { canLink: true };\n    } catch (error) {\n      console.error(\"Check OAuth link eligibility error:\", error);\n      return { canLink: false, reason: \"Unable to verify account status\" };\n    } finally {\n      if (client) {\n        await client.end();\n      }\n    }\n  }\n}\nexport {\n  OAuthService as O\n};\n"],"names":[],"mappings":"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"}