{"version":3,"file":"_server.ts-zJVV5oMz.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/scraping/cost-optimizer/_server.ts.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { g as getClientAccountStats } from \"../../../../../chunks/client-account-filter.js\";\nconst COST_OPTIMIZATION_PRESETS = {\n  // Ultra conservative for testing\n  TEST_MODE: {\n    dailyBudgetLimit: 0.01,\n    monthlyBudgetLimit: 0.3,\n    costPerAccount: 2e-3,\n    requestsPerMinute: 5,\n    requestsPerHour: 100,\n    delayBetweenRequests: 3e3,\n    prioritizeOwnedAccounts: true,\n    maxAccountsPerSession: 3,\n    maxDailyAccounts: 5,\n    skipRecentlyScraped: true,\n    minimumHoursBetweenScrapes: 24,\n    retryFailedAccounts: true,\n    maxRetryAttempts: 2,\n    useBasicProfile: true,\n    skipDetailedMetrics: false,\n    batchRequestsWhenPossible: true\n  },\n  // Moderate budget for small clients\n  SMALL_SCALE: {\n    dailyBudgetLimit: 0.05,\n    monthlyBudgetLimit: 1.5,\n    costPerAccount: 2e-3,\n    requestsPerMinute: 10,\n    requestsPerHour: 300,\n    delayBetweenRequests: 2e3,\n    prioritizeOwnedAccounts: true,\n    maxAccountsPerSession: 15,\n    maxDailyAccounts: 25,\n    skipRecentlyScraped: true,\n    minimumHoursBetweenScrapes: 12,\n    retryFailedAccounts: true,\n    maxRetryAttempts: 3,\n    useBasicProfile: false,\n    skipDetailedMetrics: false,\n    batchRequestsWhenPossible: true\n  },\n  // Higher budget for production use\n  PRODUCTION: {\n    dailyBudgetLimit: 0.2,\n    monthlyBudgetLimit: 6,\n    costPerAccount: 2e-3,\n    requestsPerMinute: 20,\n    requestsPerHour: 800,\n    delayBetweenRequests: 1500,\n    prioritizeOwnedAccounts: true,\n    maxAccountsPerSession: 50,\n    maxDailyAccounts: 100,\n    skipRecentlyScraped: true,\n    minimumHoursBetweenScrapes: 8,\n    retryFailedAccounts: true,\n    maxRetryAttempts: 3,\n    useBasicProfile: false,\n    skipDetailedMetrics: false,\n    batchRequestsWhenPossible: true\n  },\n  // Maximum scale for enterprise\n  ENTERPRISE: {\n    dailyBudgetLimit: 1,\n    monthlyBudgetLimit: 30,\n    costPerAccount: 2e-3,\n    requestsPerMinute: 30,\n    requestsPerHour: 1500,\n    delayBetweenRequests: 1e3,\n    prioritizeOwnedAccounts: false,\n    // Scrape all eligible accounts\n    maxAccountsPerSession: 200,\n    maxDailyAccounts: 500,\n    skipRecentlyScraped: true,\n    minimumHoursBetweenScrapes: 6,\n    retryFailedAccounts: true,\n    maxRetryAttempts: 5,\n    useBasicProfile: false,\n    skipDetailedMetrics: false,\n    batchRequestsWhenPossible: true\n  }\n};\nclass CostOptimizer {\n  config;\n  requestHistory = [];\n  constructor(preset = \"TEST_MODE\") {\n    this.config = { ...COST_OPTIMIZATION_PRESETS[preset] };\n  }\n  /**\n   * Analyze cost implications for a set of accounts\n   */\n  analyzeCosts(totalAccounts) {\n    const accountsWithinDailyBudget = Math.floor(this.config.dailyBudgetLimit / this.config.costPerAccount);\n    const accountsToScrape = Math.min(\n      totalAccounts,\n      accountsWithinDailyBudget,\n      this.config.maxDailyAccounts\n    );\n    const estimatedDailyCost = accountsToScrape * this.config.costPerAccount;\n    const estimatedMonthlyCost = estimatedDailyCost * 30;\n    const budgetUtilization = estimatedDailyCost / this.config.dailyBudgetLimit * 100;\n    const costSavingsOpportunities = [];\n    if (this.config.useBasicProfile) {\n      costSavingsOpportunities.push(\"Using basic profile endpoint for reduced costs\");\n    }\n    if (this.config.batchRequestsWhenPossible) {\n      costSavingsOpportunities.push(\"Batching requests when possible for efficiency\");\n    }\n    if (this.config.skipRecentlyScraped) {\n      costSavingsOpportunities.push(\"Skipping recently scraped accounts to avoid duplicate costs\");\n    }\n    return {\n      totalEligibleAccounts: totalAccounts,\n      accountsWithinBudget: accountsToScrape,\n      estimatedDailyCost,\n      estimatedMonthlyCost,\n      budgetUtilization,\n      recommendedAccountLimit: accountsWithinDailyBudget,\n      costSavingsOpportunities\n    };\n  }\n  /**\n   * Check current rate limiting status\n   */\n  checkRateLimit() {\n    const now = /* @__PURE__ */ new Date();\n    const oneMinuteAgo = new Date(now.getTime() - 6e4);\n    const oneHourAgo = new Date(now.getTime() - 36e5);\n    this.requestHistory = this.requestHistory.filter((date) => date > oneHourAgo);\n    const requestsInLastMinute = this.requestHistory.filter((date) => date > oneMinuteAgo).length;\n    const requestsInLastHour = this.requestHistory.length;\n    const isMinuteLimitExceeded = requestsInLastMinute >= this.config.requestsPerMinute;\n    const isHourLimitExceeded = requestsInLastHour >= this.config.requestsPerHour;\n    const isRateLimited = isMinuteLimitExceeded || isHourLimitExceeded;\n    let suggestedDelay = this.config.delayBetweenRequests;\n    let nextAllowedRequest = new Date(now.getTime() + suggestedDelay);\n    if (isMinuteLimitExceeded) {\n      suggestedDelay = 6e4;\n      nextAllowedRequest = new Date(now.getTime() + suggestedDelay);\n    } else if (isHourLimitExceeded) {\n      suggestedDelay = 36e5;\n      nextAllowedRequest = new Date(now.getTime() + suggestedDelay);\n    }\n    return {\n      requestsInLastMinute,\n      requestsInLastHour,\n      nextAllowedRequest,\n      isRateLimited,\n      suggestedDelay\n    };\n  }\n  /**\n   * Record a request in the rate limiting system\n   */\n  recordRequest() {\n    this.requestHistory.push(/* @__PURE__ */ new Date());\n  }\n  /**\n   * Get optimal scraping parameters for a session\n   */\n  getOptimalScrapingParams(totalAccounts) {\n    const analysis = this.analyzeCosts(totalAccounts);\n    const accountsToScrape = analysis.accountsWithinBudget;\n    const delayBetweenRequests = this.config.delayBetweenRequests;\n    const processingTimePerAccount = 5e3;\n    const totalTimePerAccount = delayBetweenRequests + processingTimePerAccount;\n    const estimatedDuration = accountsToScrape * totalTimePerAccount / 6e4;\n    return {\n      accountsToScrape,\n      delayBetweenRequests,\n      estimatedDuration,\n      estimatedCost: analysis.estimatedDailyCost,\n      useBasicProfile: this.config.useBasicProfile\n    };\n  }\n  /**\n   * Check if an account should be skipped based on recent scraping history\n   */\n  shouldSkipAccount(lastScrapedTime) {\n    if (!this.config.skipRecentlyScraped || !lastScrapedTime) {\n      return false;\n    }\n    const now = /* @__PURE__ */ new Date();\n    const hoursSinceLastScrape = (now.getTime() - lastScrapedTime.getTime()) / (1e3 * 60 * 60);\n    return hoursSinceLastScrape < this.config.minimumHoursBetweenScrapes;\n  }\n  /**\n   * Get cost savings recommendations\n   */\n  getCostSavingsRecommendations(currentSpending) {\n    const recommendations = [];\n    if (currentSpending > this.config.dailyBudgetLimit * 0.8) {\n      recommendations.push(\"Consider reducing daily account limit to stay within budget\");\n      recommendations.push(\"Enable basic profile mode to reduce costs per account\");\n      recommendations.push(\"Increase minimum hours between scrapes to reduce frequency\");\n    }\n    if (!this.config.useBasicProfile && currentSpending > this.config.dailyBudgetLimit * 0.5) {\n      recommendations.push(\"Switch to basic profile endpoint for 30-50% cost reduction\");\n    }\n    if (!this.config.skipRecentlyScraped) {\n      recommendations.push(\"Enable 'skip recently scraped' to avoid duplicate costs\");\n    }\n    if (this.config.delayBetweenRequests < 2e3) {\n      recommendations.push(\"Increase delay between requests to improve success rate and reduce retries\");\n    }\n    return recommendations;\n  }\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig) {\n    this.config = { ...this.config, ...newConfig };\n  }\n  /**\n   * Get current configuration\n   */\n  getConfig() {\n    return { ...this.config };\n  }\n  /**\n   * Apply a preset configuration\n   */\n  applyPreset(preset) {\n    this.config = { ...COST_OPTIMIZATION_PRESETS[preset] };\n  }\n  /**\n   * Validate configuration for common issues\n   */\n  validateConfig() {\n    const warnings = [];\n    const errors = [];\n    if (this.config.dailyBudgetLimit <= 0) {\n      errors.push(\"Daily budget limit must be greater than 0\");\n    }\n    if (this.config.monthlyBudgetLimit < this.config.dailyBudgetLimit * 30) {\n      warnings.push(\"Monthly budget may be insufficient for daily budget limit\");\n    }\n    if (this.config.requestsPerMinute > this.config.requestsPerHour / 60) {\n      errors.push(\"Requests per minute cannot exceed hourly rate divided by 60\");\n    }\n    if (this.config.delayBetweenRequests < 1e3) {\n      warnings.push(\"Very short delays may cause rate limiting issues\");\n    }\n    if (this.config.maxDailyAccounts > this.config.dailyBudgetLimit / this.config.costPerAccount) {\n      warnings.push(\"Daily account limit exceeds what daily budget allows\");\n    }\n    return {\n      isValid: errors.length === 0,\n      warnings,\n      errors\n    };\n  }\n}\nlet globalOptimizer = null;\nfunction getCostOptimizer() {\n  if (!globalOptimizer) {\n    globalOptimizer = new CostOptimizer(\"TEST_MODE\");\n  }\n  return globalOptimizer;\n}\nconst GET = async ({ url }) => {\n  try {\n    const action = url.searchParams.get(\"action\") || \"analyze\";\n    const optimizer = getCostOptimizer();\n    switch (action) {\n      case \"analyze\":\n        const accountStats = await getClientAccountStats();\n        const costAnalysis = optimizer.analyzeCosts(accountStats.eligibleForScraping);\n        return json({\n          success: true,\n          data: {\n            accountStats,\n            costAnalysis,\n            currentConfig: optimizer.getConfig(),\n            optimalParams: optimizer.getOptimalScrapingParams(accountStats.eligibleForScraping)\n          }\n        });\n      case \"rate-limit\":\n        const rateLimitStatus = optimizer.checkRateLimit();\n        return json({\n          success: true,\n          data: {\n            rateLimitStatus,\n            canProceed: !rateLimitStatus.isRateLimited,\n            recommendedDelay: rateLimitStatus.suggestedDelay\n          }\n        });\n      case \"presets\":\n        const presets = Object.keys(COST_OPTIMIZATION_PRESETS).map((key) => ({\n          name: key,\n          config: COST_OPTIMIZATION_PRESETS[key],\n          description: getPresetDescription(key)\n        }));\n        return json({\n          success: true,\n          data: { presets }\n        });\n      case \"recommendations\":\n        const currentSpending = parseFloat(url.searchParams.get(\"spending\") || \"0\");\n        const recommendations = optimizer.getCostSavingsRecommendations(currentSpending);\n        return json({\n          success: true,\n          data: {\n            currentSpending,\n            recommendations,\n            configValidation: optimizer.validateConfig()\n          }\n        });\n      case \"validate\":\n        const validation = optimizer.validateConfig();\n        return json({\n          success: true,\n          data: {\n            validation,\n            currentConfig: optimizer.getConfig()\n          }\n        });\n      default:\n        return json({\n          success: false,\n          error: \"Invalid action. Valid actions: analyze, rate-limit, presets, recommendations, validate\"\n        }, { status: 400 });\n    }\n  } catch (error) {\n    console.error(\"Cost optimizer API error:\", error);\n    return json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\"\n    }, { status: 500 });\n  }\n};\nconst POST = async ({ request }) => {\n  try {\n    const { action, preset, config } = await request.json();\n    const optimizer = getCostOptimizer();\n    switch (action) {\n      case \"apply-preset\":\n        if (!preset || !COST_OPTIMIZATION_PRESETS[preset]) {\n          return json({\n            success: false,\n            error: \"Invalid preset. Valid presets: \" + Object.keys(COST_OPTIMIZATION_PRESETS).join(\", \")\n          }, { status: 400 });\n        }\n        optimizer.applyPreset(preset);\n        return json({\n          success: true,\n          message: `Applied preset: ${preset}`,\n          data: {\n            newConfig: optimizer.getConfig(),\n            validation: optimizer.validateConfig()\n          }\n        });\n      case \"update-config\":\n        if (!config) {\n          return json({\n            success: false,\n            error: \"Configuration object is required\"\n          }, { status: 400 });\n        }\n        optimizer.updateConfig(config);\n        const validation = optimizer.validateConfig();\n        return json({\n          success: true,\n          message: \"Configuration updated\",\n          data: {\n            updatedConfig: optimizer.getConfig(),\n            validation\n          }\n        });\n      case \"record-request\":\n        optimizer.recordRequest();\n        const newRateLimit = optimizer.checkRateLimit();\n        return json({\n          success: true,\n          message: \"Request recorded\",\n          data: {\n            rateLimitStatus: newRateLimit\n          }\n        });\n      case \"test-scenarios\":\n        const scenarios = await generateTestScenarios(optimizer);\n        return json({\n          success: true,\n          data: { scenarios }\n        });\n      default:\n        return json({\n          success: false,\n          error: \"Invalid action. Valid actions: apply-preset, update-config, record-request, test-scenarios\"\n        }, { status: 400 });\n    }\n  } catch (error) {\n    console.error(\"Cost optimizer API error:\", error);\n    return json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\"\n    }, { status: 500 });\n  }\n};\nfunction getPresetDescription(presetKey) {\n  const descriptions = {\n    TEST_MODE: \"Ultra conservative settings for testing with minimal cost ($0.01/day)\",\n    SMALL_SCALE: \"Moderate budget for small clients with careful cost control ($0.05/day)\",\n    PRODUCTION: \"Higher budget for regular production use ($0.20/day)\",\n    ENTERPRISE: \"Maximum scale for enterprise with full account coverage ($1.00/day)\"\n  };\n  return descriptions[presetKey] || \"Custom configuration\";\n}\nasync function generateTestScenarios(optimizer) {\n  const accountStats = await getClientAccountStats();\n  const scenarios = [];\n  const currentAnalysis = optimizer.analyzeCosts(accountStats.eligibleForScraping);\n  scenarios.push({\n    name: \"Current Configuration\",\n    config: optimizer.getConfig(),\n    analysis: currentAnalysis,\n    optimalParams: optimizer.getOptimalScrapingParams(accountStats.eligibleForScraping)\n  });\n  for (const [presetName, presetConfig] of Object.entries(COST_OPTIMIZATION_PRESETS)) {\n    const testOptimizer = new CostOptimizer();\n    testOptimizer.updateConfig(presetConfig);\n    scenarios.push({\n      name: `${presetName} Preset`,\n      config: presetConfig,\n      analysis: testOptimizer.analyzeCosts(accountStats.eligibleForScraping),\n      optimalParams: testOptimizer.getOptimalScrapingParams(accountStats.eligibleForScraping)\n    });\n  }\n  return scenarios;\n}\nexport {\n  GET,\n  POST\n};\n"],"names":[],"mappings":"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"}