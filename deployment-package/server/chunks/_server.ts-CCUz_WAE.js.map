{"version":3,"file":"_server.ts-CCUz_WAE.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/accounts/bulk-info/_server.ts.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { prisma } from \"../../../../../chunks/database.js\";\nconst POST = async ({ request }) => {\n  try {\n    let evaluateAutomationEligibility = function(account) {\n      const canLogin = account.status === \"Assigned\" && !!account.assignedDeviceId;\n      const canWarmup = account.status === \"Logged In\";\n      let loginReason = \"\";\n      let warmupReason = \"\";\n      let recommendedOperation = \"none\";\n      if (account.status !== \"Assigned\") {\n        loginReason = `Account status must be 'Assigned' (current: '${account.status}')`;\n      } else if (!account.assignedDeviceId) {\n        loginReason = \"Account must be assigned to a device\";\n      } else {\n        loginReason = \"Ready for login automation\";\n      }\n      if (account.status !== \"Logged In\") {\n        warmupReason = `Account status must be 'Logged In' (current: '${account.status}')`;\n      } else {\n        warmupReason = \"Ready for warmup automation\";\n      }\n      if (canLogin && canWarmup) {\n        recommendedOperation = \"warmup\";\n      } else if (canLogin) {\n        recommendedOperation = body.operationType === \"both\" ? \"both\" : \"login\";\n      } else if (canWarmup) {\n        recommendedOperation = \"warmup\";\n      }\n      return {\n        canLogin,\n        canWarmup,\n        loginReason,\n        warmupReason,\n        recommendedOperation\n      };\n    };\n    const body = await request.json();\n    if (!body.accountIds || !Array.isArray(body.accountIds) || body.accountIds.length === 0) {\n      return json({\n        success: false,\n        error: \"Account IDs are required\"\n      }, { status: 400 });\n    }\n    if (body.accountIds.length > 100) {\n      return json({\n        success: false,\n        error: \"Maximum 100 accounts allowed per request\"\n      }, { status: 400 });\n    }\n    console.log(`Fetching bulk account info for ${body.accountIds.length} accounts`);\n    const includeClause = {\n      account: {\n        select: {\n          id: true,\n          instagramUsername: true,\n          status: true,\n          assignedDeviceId: true,\n          assignedCloneNumber: true,\n          assignedPackageName: true,\n          loginTimestamp: true,\n          assignmentTimestamp: true,\n          createdAt: true,\n          updatedAt: true,\n          imapStatus: true\n        }\n      }\n    };\n    if (body.includeActiveSessions) {\n      includeClause.automationSessions = {\n        where: {\n          status: {\n            in: [\"STARTING\", \"RUNNING\", \"STOPPING\"]\n          }\n        },\n        select: {\n          id: true,\n          sessionType: true,\n          status: true,\n          progress: true,\n          startTime: true\n        }\n      };\n    }\n    const accounts = await prisma.igAccount.findMany({\n      where: {\n        id: {\n          in: body.accountIds\n        }\n      },\n      select: {\n        id: true,\n        instagramUsername: true,\n        status: true,\n        assignedDeviceId: true,\n        assignedCloneNumber: true,\n        assignedPackageName: true,\n        loginTimestamp: true,\n        assignmentTimestamp: true,\n        createdAt: true,\n        updatedAt: true,\n        imapStatus: true,\n        automationSessions: body.includeActiveSessions ? {\n          where: {\n            status: {\n              in: [\"STARTING\", \"RUNNING\", \"STOPPING\"]\n            }\n          },\n          select: {\n            id: true,\n            sessionType: true,\n            status: true,\n            progress: true,\n            startTime: true\n          }\n        } : false\n      },\n      orderBy: {\n        instagramUsername: \"asc\"\n      }\n    });\n    let deviceInfoMap = /* @__PURE__ */ new Map();\n    if (body.includeAutomationEligibility) {\n      const deviceIds = accounts.map((acc) => acc.assignedDeviceId).filter(Boolean);\n      if (deviceIds.length > 0) {\n        const cloneInventory = await prisma.cloneInventory.findMany({\n          where: {\n            deviceId: { in: deviceIds }\n          },\n          select: {\n            deviceId: true,\n            cloneNumber: true,\n            deviceName: true,\n            cloneHealth: true,\n            cloneStatus: true\n          }\n        });\n        for (const clone of cloneInventory) {\n          const key = `${clone.deviceId}_${clone.cloneNumber}`;\n          deviceInfoMap.set(key, {\n            deviceName: clone.deviceName,\n            cloneHealth: clone.cloneHealth,\n            cloneStatus: clone.cloneStatus\n          });\n        }\n      }\n    }\n    const accountData = accounts.map((account) => {\n      const baseData = {\n        id: account.id,\n        instagramUsername: account.instagramUsername,\n        status: account.status,\n        assignedDeviceId: account.assignedDeviceId,\n        assignedCloneNumber: account.assignedCloneNumber,\n        assignedPackageName: account.assignedPackageName,\n        loginTimestamp: account.loginTimestamp ? account.loginTimestamp.toISOString() : null,\n        assignmentTimestamp: account.assignmentTimestamp ? account.assignmentTimestamp.toISOString() : null,\n        createdAt: account.createdAt.toISOString(),\n        updatedAt: account.updatedAt.toISOString(),\n        imapStatus: account.imapStatus\n      };\n      if (body.includeAutomationEligibility) {\n        baseData.automationEligibility = evaluateAutomationEligibility(account);\n      }\n      if (body.includeActiveSessions && account.automationSessions) {\n        baseData.activeSessions = account.automationSessions.map((session) => ({\n          id: session.id,\n          sessionType: session.sessionType,\n          status: session.status,\n          progress: session.progress,\n          startTime: session.startTime ? session.startTime.toISOString() : null\n        }));\n      }\n      if (body.includeAutomationEligibility && account.assignedDeviceId && account.assignedCloneNumber !== null) {\n        const deviceKey = `${account.assignedDeviceId}_${account.assignedCloneNumber}`;\n        const deviceInfo = deviceInfoMap.get(deviceKey);\n        if (deviceInfo) {\n          baseData.deviceInfo = deviceInfo;\n        }\n      }\n      return baseData;\n    });\n    const foundAccountIds = new Set(accounts.map((account) => account.id));\n    const notFound = body.accountIds.filter((id) => !foundAccountIds.has(id));\n    let eligibilitySummary;\n    if (body.includeAutomationEligibility) {\n      const summary = {\n        canLogin: 0,\n        canWarmup: 0,\n        canBoth: 0,\n        ineligible: 0,\n        hasActiveSessions: 0\n      };\n      for (const account of accountData) {\n        if (account.automationEligibility) {\n          const { canLogin, canWarmup } = account.automationEligibility;\n          if (canLogin && canWarmup) {\n            summary.canBoth++;\n          } else if (canLogin) {\n            summary.canLogin++;\n          } else if (canWarmup) {\n            summary.canWarmup++;\n          } else {\n            summary.ineligible++;\n          }\n        }\n        if (account.activeSessions && account.activeSessions.length > 0) {\n          summary.hasActiveSessions++;\n        }\n      }\n      eligibilitySummary = summary;\n    }\n    console.log(`Bulk account info retrieved: ${accounts.length} found, ${notFound.length} not found`);\n    if (eligibilitySummary) {\n      console.log(`Eligibility summary: ${eligibilitySummary.canLogin} can login, ${eligibilitySummary.canWarmup} can warmup, ${eligibilitySummary.canBoth} can both, ${eligibilitySummary.ineligible} ineligible, ${eligibilitySummary.hasActiveSessions} have active sessions`);\n    }\n    const response = {\n      success: true,\n      data: {\n        accounts: accountData,\n        found: accounts.length,\n        notFound\n      }\n    };\n    if (eligibilitySummary) {\n      response.data.eligibilitySummary = eligibilitySummary;\n    }\n    return json(response);\n  } catch (error) {\n    console.error(\"Bulk account info error:\", error);\n    return json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Failed to fetch account information\"\n    }, { status: 500 });\n  }\n};\nexport {\n  POST\n};\n"],"names":[],"mappings":"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"}