{"version":3,"file":"ip-whitelist-Di39y6GV.js","sources":["../../../.svelte-kit/adapter-node/chunks/ip-whitelist.js"],"sourcesContent":["import { g as getIPWhitelistConfig, e as extractPublicIP, b as getUserAgent, c as ipInCIDR } from \"./ip-utils.js\";\nimport pg from \"pg\";\nconst { Pool } = pg;\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === \"production\" ? { rejectUnauthorized: false } : false\n});\nconst whitelistCache = /* @__PURE__ */ new Map();\nasync function validateIPAccess(request, userId, userEmail) {\n  const config = getIPWhitelistConfig();\n  if (!config.enabled) {\n    return {\n      allowed: true,\n      publicIP: null,\n      source: \"disabled\",\n      reason: \"IP whitelist is disabled\"\n    };\n  }\n  if (config.devBypass && process.env.NODE_ENV === \"development\") {\n    return {\n      allowed: true,\n      publicIP: null,\n      source: \"dev_bypass\",\n      reason: \"Development mode bypass enabled\"\n    };\n  }\n  const extractedIP = extractPublicIP(request);\n  if (!extractedIP) {\n    await logIPAccess(null, userEmail || null, null, false, \"no_public_ip_found\", request);\n    return {\n      allowed: false,\n      publicIP: null,\n      source: \"extraction_failed\",\n      reason: \"Could not determine public IP address\"\n    };\n  }\n  const { ip: publicIP } = extractedIP;\n  const rateLimitResult = await checkRateLimits(publicIP, userId);\n  if (!rateLimitResult.allowed) {\n    await logIPAccess(userId || null, userEmail || null, publicIP, false, rateLimitResult.blockReason || \"rate_limit\", request);\n    return {\n      allowed: false,\n      publicIP,\n      source: \"rate_limited\",\n      reason: `Rate limit exceeded: ${rateLimitResult.blockReason}`\n    };\n  }\n  if (config.adminBypass && userId) {\n    const isAdmin = await checkIfUserIsAdmin(userId);\n    if (isAdmin) {\n      await logIPAccess(userId || null, userEmail || null, publicIP, true, \"admin_bypass\", request);\n      return {\n        allowed: true,\n        publicIP,\n        source: \"admin_bypass\",\n        reason: \"Admin user bypass enabled\"\n      };\n    }\n  }\n  const cacheKey = `${publicIP}:${userId || \"global\"}`;\n  const cached = getFromCache(cacheKey);\n  if (cached !== null) {\n    await logIPAccess(userId || null, userEmail || null, publicIP, cached, cached ? \"cache_hit\" : \"cache_miss\", request);\n    return {\n      allowed: cached,\n      publicIP,\n      source: \"cache\",\n      reason: cached ? \"IP found in cache\" : \"IP not in whitelist (cached)\"\n    };\n  }\n  const validationResult = await checkIPWhitelist(publicIP, userId);\n  addToCache(cacheKey, validationResult.allowed, config.cacheTTL);\n  await logIPAccess(\n    userId || null,\n    userEmail || null,\n    publicIP,\n    validationResult.allowed,\n    validationResult.allowed ? \"whitelist_match\" : \"not_whitelisted\",\n    request\n  );\n  return {\n    allowed: validationResult.allowed,\n    publicIP,\n    source: \"database\",\n    reason: validationResult.reason,\n    matchedRule: validationResult.matchedRule\n  };\n}\nasync function checkIPWhitelist(publicIP, userId) {\n  const client = await pool.connect();\n  try {\n    const query = `\n      SELECT \n        iw.id,\n        iw.address,\n        iw.description,\n        iw.user_id IS NULL as is_global\n      FROM ip_whitelist iw\n      WHERE \n        iw.is_active = true\n        AND (iw.expires_at IS NULL OR iw.expires_at > NOW())\n        AND (iw.user_id IS NULL OR iw.user_id = $2)\n      ORDER BY \n        iw.user_id NULLS LAST,  -- User-specific rules first\n        iw.id\n    `;\n    const result = await client.query(query, [publicIP, userId]);\n    for (const row of result.rows) {\n      if (ipInCIDR(publicIP, row.address)) {\n        return {\n          allowed: true,\n          reason: \"IP matches whitelist rule\",\n          matchedRule: {\n            id: row.id,\n            address: row.address,\n            description: row.description,\n            isGlobal: row.is_global\n          }\n        };\n      }\n    }\n    return {\n      allowed: false,\n      reason: \"IP not found in whitelist\"\n    };\n  } catch (error) {\n    console.error(\"IP whitelist database error:\", error);\n    const config = getIPWhitelistConfig();\n    return {\n      allowed: config.mode === \"permissive\",\n      reason: `Database error: ${config.mode} mode applied`\n    };\n  } finally {\n    client.release();\n  }\n}\nasync function checkRateLimits(publicIP, userId) {\n  const client = await pool.connect();\n  const now = /* @__PURE__ */ new Date();\n  const windowMinutes = 15;\n  const ipLimit = 5;\n  const userLimit = 10;\n  try {\n    await client.query(\"BEGIN\");\n    let ipRateLimit = await client.query(\n      \"SELECT * FROM ip_rate_limits WHERE ip_address = $1\",\n      [publicIP]\n    );\n    if (ipRateLimit.rows.length === 0) {\n      await client.query(\n        \"INSERT INTO ip_rate_limits (ip_address, failed_attempts) VALUES ($1, 0)\",\n        [publicIP]\n      );\n      ipRateLimit = await client.query(\n        \"SELECT * FROM ip_rate_limits WHERE ip_address = $1\",\n        [publicIP]\n      );\n    }\n    const ipRecord = ipRateLimit.rows[0];\n    if (ipRecord.is_blocked && ipRecord.blocked_until && new Date(ipRecord.blocked_until) > now) {\n      await client.query(\"COMMIT\");\n      return {\n        allowed: false,\n        remainingAttempts: 0,\n        resetTime: new Date(ipRecord.blocked_until),\n        blockReason: \"ip_rate_limit\"\n      };\n    }\n    const windowStart = new Date(now.getTime() - windowMinutes * 60 * 1e3);\n    if (new Date(ipRecord.first_attempt) < windowStart) {\n      await client.query(\n        \"UPDATE ip_rate_limits SET failed_attempts = 0, first_attempt = $1, is_blocked = false, blocked_until = NULL WHERE ip_address = $2\",\n        [now, publicIP]\n      );\n    }\n    if (ipRecord.failed_attempts >= ipLimit) {\n      const blockUntil = new Date(now.getTime() + 60 * 60 * 1e3);\n      await client.query(\n        \"UPDATE ip_rate_limits SET is_blocked = true, blocked_until = $1 WHERE ip_address = $2\",\n        [blockUntil, publicIP]\n      );\n      await client.query(\"COMMIT\");\n      return {\n        allowed: false,\n        remainingAttempts: 0,\n        resetTime: blockUntil,\n        blockReason: \"ip_rate_limit\"\n      };\n    }\n    if (userId) {\n      let userRateLimit = await client.query(\n        \"SELECT * FROM user_rate_limits WHERE user_id = $1\",\n        [userId]\n      );\n      if (userRateLimit.rows.length === 0) {\n        await client.query(\n          \"INSERT INTO user_rate_limits (user_id, failed_attempts) VALUES ($1, 0)\",\n          [userId]\n        );\n        userRateLimit = await client.query(\n          \"SELECT * FROM user_rate_limits WHERE user_id = $1\",\n          [userId]\n        );\n      }\n      const userRecord = userRateLimit.rows[0];\n      if (userRecord.is_blocked && userRecord.blocked_until && new Date(userRecord.blocked_until) > now) {\n        await client.query(\"COMMIT\");\n        return {\n          allowed: false,\n          remainingAttempts: 0,\n          resetTime: new Date(userRecord.blocked_until),\n          blockReason: \"user_rate_limit\"\n        };\n      }\n      if (new Date(userRecord.first_attempt) < windowStart) {\n        await client.query(\n          \"UPDATE user_rate_limits SET failed_attempts = 0, first_attempt = $1, is_blocked = false, blocked_until = NULL WHERE user_id = $2\",\n          [now, userId]\n        );\n      }\n      if (userRecord.failed_attempts >= userLimit) {\n        const blockUntil = new Date(now.getTime() + 2 * 60 * 60 * 1e3);\n        await client.query(\n          \"UPDATE user_rate_limits SET is_blocked = true, blocked_until = $1 WHERE user_id = $2\",\n          [blockUntil, userId]\n        );\n        await client.query(\"COMMIT\");\n        return {\n          allowed: false,\n          remainingAttempts: 0,\n          resetTime: blockUntil,\n          blockReason: \"user_rate_limit\"\n        };\n      }\n    }\n    await client.query(\"COMMIT\");\n    return {\n      allowed: true,\n      remainingAttempts: ipLimit - ipRecord.failed_attempts,\n      resetTime: null\n    };\n  } catch (error) {\n    await client.query(\"ROLLBACK\");\n    console.error(\"Rate limit check error:\", error);\n    return {\n      allowed: true,\n      remainingAttempts: 1,\n      resetTime: null\n    };\n  } finally {\n    client.release();\n  }\n}\nasync function recordFailedAttempt(publicIP, userId) {\n  const client = await pool.connect();\n  try {\n    await client.query(\"BEGIN\");\n    await client.query(`\n      INSERT INTO ip_rate_limits (ip_address, failed_attempts, last_attempt) \n      VALUES ($1, 1, NOW())\n      ON CONFLICT (ip_address) \n      DO UPDATE SET \n        failed_attempts = ip_rate_limits.failed_attempts + 1,\n        last_attempt = NOW()\n    `, [publicIP]);\n    if (userId) {\n      await client.query(`\n        INSERT INTO user_rate_limits (user_id, failed_attempts, last_attempt)\n        VALUES ($1, 1, NOW())\n        ON CONFLICT (user_id)\n        DO UPDATE SET \n          failed_attempts = user_rate_limits.failed_attempts + 1,\n          last_attempt = NOW()\n      `, [userId]);\n    }\n    await client.query(\"COMMIT\");\n  } catch (error) {\n    await client.query(\"ROLLBACK\");\n    console.error(\"Failed to record failed attempt:\", error);\n  } finally {\n    client.release();\n  }\n}\nasync function checkIfUserIsAdmin(userId) {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(\n      \"SELECT role FROM users WHERE id = $1\",\n      [userId]\n    );\n    return result.rows.length > 0 && result.rows[0].role === \"ADMIN\";\n  } catch (error) {\n    console.error(\"Error checking admin status:\", error);\n    return false;\n  } finally {\n    client.release();\n  }\n}\nasync function logIPAccess(userId, email, publicIP, granted, reason, request) {\n  const config = getIPWhitelistConfig();\n  if (!config.logAll && granted) {\n    return;\n  }\n  const client = await pool.connect();\n  try {\n    await client.query(`\n      INSERT INTO ip_access_logs (user_id, email, public_ip, access_granted, denial_reason, user_agent)\n      VALUES ($1, $2, $3, $4, $5, $6)\n    `, [\n      userId,\n      email,\n      publicIP,\n      granted,\n      granted ? null : reason,\n      getUserAgent(request)\n    ]);\n  } catch (error) {\n    console.error(\"Failed to log IP access:\", error);\n  } finally {\n    client.release();\n  }\n}\nfunction getFromCache(key) {\n  const entry = whitelistCache.get(key);\n  if (!entry) return null;\n  const now = Date.now();\n  if (now > entry.timestamp + entry.ttl * 1e3) {\n    whitelistCache.delete(key);\n    return null;\n  }\n  return entry.result;\n}\nfunction addToCache(key, result, ttlSeconds) {\n  whitelistCache.set(key, {\n    result,\n    timestamp: Date.now(),\n    ttl: ttlSeconds\n  });\n}\nasync function addIPToWhitelist(address, description, userId, createdBy, expiresAt = null) {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(`\n      INSERT INTO ip_whitelist (address, description, user_id, created_by, expires_at)\n      VALUES ($1, $2, $3, $4, $5)\n      RETURNING id\n    `, [address, description, userId, createdBy, expiresAt]);\n    clearCacheForIP(address);\n    return { success: true, id: result.rows[0].id };\n  } catch (error) {\n    console.error(\"Failed to add IP to whitelist:\", error);\n    return { success: false, error: error.message };\n  } finally {\n    client.release();\n  }\n}\nasync function removeIPFromWhitelist(id) {\n  const client = await pool.connect();\n  try {\n    await client.query(\"DELETE FROM ip_whitelist WHERE id = $1\", [id]);\n    whitelistCache.clear();\n    return { success: true };\n  } catch (error) {\n    console.error(\"Failed to remove IP from whitelist:\", error);\n    return { success: false, error: error.message };\n  } finally {\n    client.release();\n  }\n}\nfunction clearCacheForIP(address) {\n  whitelistCache.clear();\n}\nexport {\n  addIPToWhitelist as a,\n  recordFailedAttempt as b,\n  removeIPFromWhitelist as r,\n  validateIPAccess as v\n};\n"],"names":[],"mappings":"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"}