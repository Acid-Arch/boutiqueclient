{"version":3,"file":"_server.ts-C6DhOExq.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/scraping/bulk/_server.ts.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { H as HikerAPIClient } from \"../../../../../chunks/hiker-api-client.js\";\nimport { u as updateSessionProgress, c as cancelSession, p as pauseSession, b as createBulkSession, d as getSessionById, s as startSession, e as getActiveProcessingSessions } from \"../../../../../chunks/session-manager.js\";\nimport { w as withErrorHandling, v as validateErrorRecoverySystem } from \"../../../../../chunks/error-recovery.js\";\nlet notifySessionProgress;\nlet notifySessionComplete;\nlet notifyCostUpdate;\nlet notifySessionStateChange;\nclass BulkScrapingOrchestrator {\n  hikerClient;\n  sessionManager;\n  constructor() {\n    this.hikerClient = new HikerAPIClient();\n    this.sessionManager = {\n      pauseSession,\n      cancelSession,\n      updateSessionProgress\n    };\n  }\n  /**\n   * Create and start a bulk scraping session\n   */\n  async createSession(config) {\n    try {\n      this.validateConfig(config);\n      const sessionId = await createBulkSession(\n        config.sessionType,\n        config.targetAccounts,\n        {\n          priority: config.priority,\n          batchSize: config.batchSize,\n          costLimit: config.costLimit,\n          scheduledFor: config.scheduledFor,\n          triggeredBy: config.triggeredBy,\n          triggerSource: config.triggerSource\n        }\n      );\n      console.log(`Created bulk scraping session: ${sessionId}`);\n      return sessionId;\n    } catch (error) {\n      console.error(\"Failed to create bulk scraping session:\", error);\n      throw error;\n    }\n  }\n  /**\n   * Execute a bulk scraping session\n   */\n  async executeSession(sessionId) {\n    const startTime = Date.now();\n    let processedAccounts = 0;\n    let successfulAccounts = 0;\n    let failedAccounts = 0;\n    let skippedAccounts = 0;\n    let totalRequestUnits = 0;\n    let totalCost = 0;\n    const errors = [];\n    try {\n      const session = await getSessionById(sessionId);\n      if (!session) {\n        throw new Error(`Session ${sessionId} not found`);\n      }\n      await startSession(sessionId);\n      console.log(`Started bulk scraping session: ${sessionId}`);\n      notifySessionStateChange(sessionId, \"PENDING\", \"IN_PROGRESS\", \"Session started\");\n      const targetAccounts = await this.getSessionTargetAccounts(sessionId);\n      const batchSize = 5;\n      const batches = this.createBatches(targetAccounts, batchSize);\n      for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {\n        const batch = batches[batchIndex];\n        console.log(`Processing batch ${batchIndex + 1}/${batches.length} (${batch.length} accounts)`);\n        const batchResults = await this.processBatch(batch, session, batchIndex + 1);\n        batchResults.forEach((result2) => {\n          processedAccounts++;\n          if (result2.success) {\n            successfulAccounts++;\n            totalRequestUnits += result2.requestUnits || 0;\n            totalCost += result2.cost || 0;\n          } else if (result2.skipped) {\n            skippedAccounts++;\n          } else {\n            failedAccounts++;\n            errors.push({\n              accountId: result2.accountId,\n              error: result2.error || \"Unknown error\",\n              timestamp: /* @__PURE__ */ new Date()\n            });\n          }\n        });\n        await updateSessionProgress(sessionId, {\n          completedAccounts: successfulAccounts,\n          failedAccounts,\n          skippedAccounts,\n          requestUnits: totalRequestUnits,\n          actualCost: totalCost\n        });\n        const progress = Math.round(processedAccounts / targetAccounts.length * 100);\n        const estimatedTimeRemaining = this.calculateTimeRemaining(\n          processedAccounts,\n          targetAccounts.length,\n          Date.now() - startTime\n        );\n        notifySessionProgress(sessionId, {\n          progress,\n          completedAccounts: successfulAccounts,\n          failedAccounts,\n          skippedAccounts,\n          totalAccounts: targetAccounts.length,\n          currentAccount: batch[batch.length - 1],\n          // Last processed account in batch\n          estimatedTimeRemaining,\n          requestUnits: totalRequestUnits,\n          actualCost: totalCost,\n          status: \"IN_PROGRESS\"\n        });\n        notifyCostUpdate(sessionId, {\n          requestUnits: totalRequestUnits,\n          cost: totalCost,\n          budgetUsed: totalCost / session.estimatedCost * 100,\n          budgetRemaining: Math.max(0, session.estimatedCost - totalCost)\n        });\n        if (totalCost >= session.estimatedCost * 1.5) {\n          console.log(`Cost limit exceeded, stopping session ${sessionId}`);\n          break;\n        }\n        if (batchIndex < batches.length - 1) {\n          const delayMs = this.calculateBatchDelay(batchResults);\n          if (delayMs > 0) {\n            console.log(`Rate limiting: waiting ${delayMs}ms before next batch`);\n            await new Promise((resolve) => setTimeout(resolve, delayMs));\n          }\n        }\n      }\n      const duration = Date.now() - startTime;\n      console.log(`Completed bulk scraping session ${sessionId} in ${duration}ms`);\n      const result = {\n        sessionId,\n        success: true,\n        totalAccounts: targetAccounts.length,\n        processedAccounts,\n        successfulAccounts,\n        failedAccounts,\n        skippedAccounts,\n        totalRequestUnits,\n        totalCost,\n        duration,\n        errors\n      };\n      notifySessionComplete(sessionId, result);\n      return result;\n    } catch (error) {\n      console.error(`Bulk scraping session ${sessionId} failed:`, error);\n      try {\n        await cancelSession(sessionId, error instanceof Error ? error.message : \"Unknown error\");\n      } catch (cancelError) {\n        console.error(`Failed to cancel session ${sessionId}:`, cancelError);\n      }\n      return {\n        sessionId,\n        success: false,\n        totalAccounts: 0,\n        processedAccounts,\n        successfulAccounts,\n        failedAccounts,\n        skippedAccounts,\n        totalRequestUnits,\n        totalCost,\n        duration: Date.now() - startTime,\n        errors: [\n          ...errors,\n          {\n            accountId: \"SYSTEM\",\n            error: error instanceof Error ? error.message : \"Unknown system error\",\n            timestamp: /* @__PURE__ */ new Date()\n          }\n        ]\n      };\n    }\n  }\n  /**\n   * Process a batch of accounts with error handling and recovery\n   */\n  async processBatch(accounts, session, batchNumber) {\n    const results = [];\n    for (let i = 0; i < accounts.length; i++) {\n      const accountId = accounts[i];\n      console.log(`Processing account ${i + 1}/${accounts.length}: ${accountId}`);\n      const errorContext = {\n        sessionId: session.id,\n        accountId,\n        requestType: session.sessionType,\n        attemptNumber: 1,\n        totalAttempts: 3,\n        consecutiveErrors: 0,\n        sessionStartTime: session.startTime || /* @__PURE__ */ new Date()\n      };\n      const result = await withErrorHandling(\n        async () => {\n          switch (session.sessionType) {\n            case \"ACCOUNT_METRICS\":\n              return await this.hikerClient.getUserProfile(accountId);\n            case \"DETAILED_ANALYSIS\":\n              return await this.hikerClient.getUserProfile(accountId, { force: true });\n            case \"FOLLOWERS_ANALYSIS\":\n              return await this.hikerClient.getUserProfile(accountId);\n            default:\n              throw new Error(`Unknown session type: ${session.sessionType}`);\n          }\n        },\n        errorContext,\n        this.sessionManager\n      );\n      if (result.success) {\n        results.push({\n          accountId,\n          success: true,\n          skipped: false,\n          requestUnits: result.data.requestUnits || 2,\n          cost: result.data.metrics?.totalCost || 2e-3\n        });\n      } else {\n        const shouldSkip = result.recovery.strategy === \"SKIP\";\n        results.push({\n          accountId,\n          success: false,\n          skipped: shouldSkip,\n          error: result.error.message\n        });\n        if ([\"PAUSE_SESSION\", \"CANCEL_SESSION\"].includes(result.recovery.strategy)) {\n          console.log(`Batch processing stopped due to: ${result.recovery.reason}`);\n          break;\n        }\n      }\n      if (i < accounts.length - 1) {\n        await new Promise((resolve) => setTimeout(resolve, 1e3));\n      }\n    }\n    return results;\n  }\n  /**\n   * Create batches from target accounts\n   */\n  createBatches(accounts, batchSize) {\n    const batches = [];\n    for (let i = 0; i < accounts.length; i += batchSize) {\n      batches.push(accounts.slice(i, i + batchSize));\n    }\n    return batches;\n  }\n  /**\n   * Calculate delay between batches based on rate limiting\n   */\n  calculateBatchDelay(batchResults) {\n    const rateLimit = parseInt(process.env.HIKER_RATE_LIMIT_PER_SECOND || \"11\");\n    const successfulRequests = batchResults.filter((r) => r.success).length;\n    if (successfulRequests >= rateLimit) {\n      return 2e3;\n    }\n    return 0;\n  }\n  /**\n   * Get target accounts for a session (placeholder - would be stored in session data)\n   */\n  async getSessionTargetAccounts(sessionId) {\n    return [\"therock\", \"instagram\", \"natgeo\", \"cristiano\", \"kyliejenner\"];\n  }\n  /**\n   * Validate bulk scraping configuration\n   */\n  validateConfig(config) {\n    if (!config.targetAccounts || config.targetAccounts.length === 0) {\n      throw new Error(\"Target accounts list cannot be empty\");\n    }\n    if (config.batchSize <= 0 || config.batchSize > 50) {\n      throw new Error(\"Batch size must be between 1 and 50\");\n    }\n    if (config.maxConcurrentRequests <= 0 || config.maxConcurrentRequests > 10) {\n      throw new Error(\"Max concurrent requests must be between 1 and 10\");\n    }\n    if (config.costLimit <= 0 || config.costLimit > 100) {\n      throw new Error(\"Cost limit must be between $0.01 and $100.00\");\n    }\n    const validSessionTypes = [\"ACCOUNT_METRICS\", \"DETAILED_ANALYSIS\", \"FOLLOWERS_ANALYSIS\"];\n    if (!validSessionTypes.includes(config.sessionType)) {\n      throw new Error(`Invalid session type. Must be one of: ${validSessionTypes.join(\", \")}`);\n    }\n  }\n  /**\n   * Calculate estimated time remaining for session completion\n   */\n  calculateTimeRemaining(processedAccounts, totalAccounts, elapsedTime) {\n    if (processedAccounts === 0) return 0;\n    const averageTimePerAccount = elapsedTime / processedAccounts;\n    const remainingAccounts = totalAccounts - processedAccounts;\n    return Math.round(remainingAccounts * averageTimePerAccount / 1e3);\n  }\n  /**\n   * Get status of all active bulk scraping sessions\n   */\n  async getActiveSessions() {\n    return await getActiveProcessingSessions(10);\n  }\n}\nconst bulkScrapingOrchestrator = new BulkScrapingOrchestrator();\nconst GET = async ({ url }) => {\n  try {\n    const action = url.searchParams.get(\"action\");\n    switch (action) {\n      case \"health\":\n        const errorSystemHealth = validateErrorRecoverySystem();\n        return json({\n          success: true,\n          health: {\n            bulkOrchestrator: \"operational\",\n            errorRecovery: errorSystemHealth,\n            timestamp: (/* @__PURE__ */ new Date()).toISOString()\n          }\n        });\n      case \"active-sessions\":\n        const activeSessions = await bulkScrapingOrchestrator.getActiveSessions();\n        return json({\n          success: true,\n          activeSessions,\n          count: activeSessions.length\n        });\n      default:\n        return json(\n          { success: false, error: \"Invalid action. Use: health, active-sessions\" },\n          { status: 400 }\n        );\n    }\n  } catch (error) {\n    console.error(\"Bulk scraping API error:\", error);\n    return json(\n      {\n        success: false,\n        error: \"Failed to process bulk scraping request\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      },\n      { status: 500 }\n    );\n  }\n};\nconst POST = async ({ request }) => {\n  try {\n    const data = await request.json();\n    const { action } = data;\n    switch (action) {\n      case \"create-session\":\n        const config = {\n          sessionType: data.sessionType || \"ACCOUNT_METRICS\",\n          targetAccounts: data.targetAccounts || [],\n          batchSize: data.batchSize || 5,\n          maxConcurrentRequests: data.maxConcurrentRequests || 3,\n          costLimit: data.costLimit || 5,\n          priority: data.priority || \"NORMAL\",\n          scheduledFor: data.scheduledFor ? new Date(data.scheduledFor) : void 0,\n          triggeredBy: data.triggeredBy || \"USER\",\n          triggerSource: data.triggerSource || \"MANUAL\"\n        };\n        const sessionId = await bulkScrapingOrchestrator.createSession(config);\n        return json({\n          success: true,\n          sessionId,\n          message: \"Bulk scraping session created successfully\",\n          config: {\n            ...config,\n            scheduledFor: config.scheduledFor?.toISOString()\n          }\n        });\n      case \"execute-session\":\n        if (!data.sessionId) {\n          return json(\n            { success: false, error: \"Session ID is required\" },\n            { status: 400 }\n          );\n        }\n        const result = await bulkScrapingOrchestrator.executeSession(data.sessionId);\n        return json({\n          success: true,\n          result,\n          message: result.success ? \"Bulk scraping session completed successfully\" : \"Bulk scraping session completed with errors\"\n        });\n      case \"create-and-execute\":\n        const createConfig = {\n          sessionType: data.sessionType || \"ACCOUNT_METRICS\",\n          targetAccounts: data.targetAccounts || [],\n          batchSize: data.batchSize || 5,\n          maxConcurrentRequests: data.maxConcurrentRequests || 3,\n          costLimit: data.costLimit || 5,\n          priority: data.priority || \"HIGH\",\n          // Higher priority for immediate execution\n          triggeredBy: data.triggeredBy || \"USER\",\n          triggerSource: data.triggerSource || \"MANUAL\"\n        };\n        if (!createConfig.targetAccounts || createConfig.targetAccounts.length === 0) {\n          return json(\n            { success: false, error: \"Target accounts list is required and cannot be empty\" },\n            { status: 400 }\n          );\n        }\n        const newSessionId = await bulkScrapingOrchestrator.createSession(createConfig);\n        const executeResult = await bulkScrapingOrchestrator.executeSession(newSessionId);\n        return json({\n          success: true,\n          sessionId: newSessionId,\n          result: executeResult,\n          message: executeResult.success ? \"Bulk scraping session created and completed successfully\" : \"Bulk scraping session created but completed with errors\",\n          summary: {\n            totalAccounts: executeResult.totalAccounts,\n            successfulAccounts: executeResult.successfulAccounts,\n            failedAccounts: executeResult.failedAccounts,\n            skippedAccounts: executeResult.skippedAccounts,\n            totalCost: executeResult.totalCost,\n            duration: executeResult.duration,\n            errorCount: executeResult.errors.length\n          }\n        });\n      case \"test-integration\":\n        const testConfig = {\n          sessionType: \"ACCOUNT_METRICS\",\n          targetAccounts: [\"therock\", \"instagram\", \"natgeo\"],\n          batchSize: 2,\n          maxConcurrentRequests: 2,\n          costLimit: 1,\n          priority: \"NORMAL\",\n          triggeredBy: \"SYSTEM_TEST\",\n          triggerSource: \"API\"\n        };\n        const testSessionId = await bulkScrapingOrchestrator.createSession(testConfig);\n        return json({\n          success: true,\n          message: \"Integration test successful - session created\",\n          testSessionId,\n          testConfig,\n          nextStep: `Use POST /api/scraping/bulk with action: execute-session and sessionId: ${testSessionId} to run the test`\n        });\n      default:\n        return json(\n          {\n            success: false,\n            error: \"Invalid action. Available actions: create-session, execute-session, create-and-execute, test-integration\"\n          },\n          { status: 400 }\n        );\n    }\n  } catch (error) {\n    console.error(\"Bulk scraping POST API error:\", error);\n    return json(\n      {\n        success: false,\n        error: \"Failed to process bulk scraping request\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      },\n      { status: 500 }\n    );\n  }\n};\nexport {\n  GET,\n  POST\n};\n"],"names":[],"mappings":"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"}