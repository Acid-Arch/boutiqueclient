{"version":3,"file":"_server.ts-rPzq2eVn.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/scraping/enhanced-error-recovery/health/_server.ts.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nconst GET = async ({ url }) => {\n  try {\n    const accountIds = url.searchParams.get(\"accountIds\")?.split(\",\") || [];\n    const includeRecommendations = url.searchParams.get(\"recommendations\") === \"true\";\n    const healthThreshold = parseInt(url.searchParams.get(\"threshold\") || \"0\");\n    let accountHealthData;\n    if (accountIds.length > 0) {\n      accountHealthData = await getSpecificAccountHealth(accountIds);\n    } else {\n      accountHealthData = await getAllAccountHealth(healthThreshold);\n    }\n    const systemHealthMetrics = await getSystemHealthMetrics();\n    let recommendations = [];\n    if (includeRecommendations) {\n      recommendations = generateHealthRecommendations(accountHealthData, systemHealthMetrics);\n    }\n    return json({\n      success: true,\n      accounts: accountHealthData,\n      systemMetrics: systemHealthMetrics,\n      recommendations,\n      metadata: {\n        generatedAt: (/* @__PURE__ */ new Date()).toISOString(),\n        accountCount: accountHealthData.length,\n        averageHealthScore: calculateAverageHealth(accountHealthData),\n        requestId: crypto.randomUUID()\n      }\n    });\n  } catch (error) {\n    console.error(\"Enhanced error recovery health API error:\", error);\n    return json(\n      {\n        success: false,\n        error: \"Internal server error\",\n        message: error instanceof Error ? error.message : \"Unknown error occurred\"\n      },\n      { status: 500 }\n    );\n  }\n};\nconst POST = async ({ request }) => {\n  try {\n    const body = await request.json();\n    const { action, accountId, healthUpdate } = body;\n    if (action === \"update-health\") {\n      if (!accountId) {\n        return json(\n          {\n            success: false,\n            error: \"Missing required fields\",\n            message: \"accountId is required for health updates\"\n          },\n          { status: 400 }\n        );\n      }\n      const updatedHealth = await updateAccountHealth(accountId, healthUpdate);\n      return json({\n        success: true,\n        message: \"Account health updated successfully\",\n        accountId,\n        updatedHealth,\n        updatedAt: (/* @__PURE__ */ new Date()).toISOString()\n      });\n    }\n    if (action === \"bulk-health-check\") {\n      const { accountIds } = body;\n      if (!accountIds || !Array.isArray(accountIds)) {\n        return json(\n          {\n            success: false,\n            error: \"Invalid request\",\n            message: \"accountIds array is required for bulk health check\"\n          },\n          { status: 400 }\n        );\n      }\n      const healthResults = await performBulkHealthCheck(accountIds);\n      return json({\n        success: true,\n        message: \"Bulk health check completed\",\n        results: healthResults,\n        completedAt: (/* @__PURE__ */ new Date()).toISOString()\n      });\n    }\n    return json(\n      {\n        success: false,\n        error: \"Invalid action\",\n        message: \"Supported actions: update-health, bulk-health-check\"\n      },\n      { status: 400 }\n    );\n  } catch (error) {\n    console.error(\"Enhanced error recovery health POST error:\", error);\n    return json(\n      {\n        success: false,\n        error: \"Internal server error\",\n        message: error instanceof Error ? error.message : \"Unknown error occurred\"\n      },\n      { status: 500 }\n    );\n  }\n};\nasync function getSpecificAccountHealth(accountIds) {\n  return accountIds.map((accountId) => generateMockAccountHealth(accountId));\n}\nasync function getAllAccountHealth(healthThreshold) {\n  const mockAccounts = [];\n  for (let i = 1; i <= 50; i++) {\n    const health = generateMockAccountHealth(`account-${i.toString().padStart(3, \"0\")}`);\n    if (health.healthScore >= healthThreshold) {\n      mockAccounts.push(health);\n    }\n  }\n  return mockAccounts;\n}\nfunction generateMockAccountHealth(accountId) {\n  const now = /* @__PURE__ */ new Date();\n  let healthScore;\n  const rand = Math.random();\n  if (rand < 0.6) {\n    healthScore = 70 + Math.random() * 30;\n  } else if (rand < 0.8) {\n    healthScore = 50 + Math.random() * 20;\n  } else if (rand < 0.95) {\n    healthScore = 30 + Math.random() * 20;\n  } else {\n    healthScore = Math.random() * 30;\n  }\n  const consecutiveFailures = healthScore < 50 ? Math.floor(Math.random() * 10) : Math.floor(Math.random() * 3);\n  const errorRate = healthScore < 50 ? Math.random() * 5 : Math.random() * 1;\n  const suspiciousActivity = healthScore < 30 ? Math.random() > 0.5 : false;\n  let nextErrorProbability = (100 - healthScore) * 0.01;\n  nextErrorProbability += consecutiveFailures * 0.05;\n  nextErrorProbability += errorRate * 0.1;\n  nextErrorProbability = Math.min(nextErrorProbability, 0.95);\n  let recommendedAction = \"CONTINUE\";\n  if (healthScore < 20 || nextErrorProbability > 0.8) recommendedAction = \"QUARANTINE\";\n  else if (healthScore < 40 || nextErrorProbability > 0.6) recommendedAction = \"INVESTIGATE\";\n  else if (healthScore < 60 || nextErrorProbability > 0.4) recommendedAction = \"PAUSE\";\n  return {\n    accountId,\n    healthScore,\n    riskFactors: {\n      consecutiveFailures,\n      errorRate,\n      lastSuccessfulSession: healthScore > 50 ? new Date(now.getTime() - Math.random() * 24 * 60 * 60 * 1e3) : void 0,\n      suspiciousActivity,\n      rateLimitHistory: suspiciousActivity ? [\n        now.getTime() - 36e5,\n        now.getTime() - 18e5,\n        now.getTime() - 9e5\n      ] : []\n    },\n    predictions: {\n      nextErrorProbability,\n      recommendedAction,\n      confidenceLevel: Math.min(0.7 + Math.random() * 0.25, 0.95)\n    },\n    lastAnalyzed: now\n  };\n}\nasync function getSystemHealthMetrics() {\n  return {\n    totalAccounts: 50,\n    healthyAccounts: 30,\n    atRiskAccounts: 15,\n    criticalAccounts: 5,\n    averageHealthScore: 68.5,\n    systemLoad: 0.65,\n    errorRate: 0.12,\n    recoverySuccessRate: 94.2,\n    lastUpdated: (/* @__PURE__ */ new Date()).toISOString()\n  };\n}\nfunction generateHealthRecommendations(accountHealthData, systemMetrics) {\n  const recommendations = [];\n  const criticalAccounts = accountHealthData.filter((a) => a.healthScore < 30).length;\n  const atRiskAccounts = accountHealthData.filter((a) => a.healthScore < 60).length;\n  if (criticalAccounts > 0) {\n    recommendations.push({\n      priority: \"HIGH\",\n      type: \"ACCOUNT_QUARANTINE\",\n      message: `${criticalAccounts} accounts require immediate quarantine`,\n      action: \"Review and quarantine critical accounts\",\n      impact: \"Prevents system-wide error propagation\"\n    });\n  }\n  if (atRiskAccounts > accountHealthData.length * 0.3) {\n    recommendations.push({\n      priority: \"MEDIUM\",\n      type: \"SYSTEM_OPTIMIZATION\",\n      message: \"High percentage of at-risk accounts detected\",\n      action: \"Consider reducing session frequency and implementing longer delays\",\n      impact: \"Improves overall system stability\"\n    });\n  }\n  if (systemMetrics.errorRate > 0.15) {\n    recommendations.push({\n      priority: \"MEDIUM\",\n      type: \"ERROR_PREVENTION\",\n      message: \"System error rate above threshold\",\n      action: \"Enable proactive error prevention mode\",\n      impact: \"Reduces overall error occurrence\"\n    });\n  }\n  return recommendations;\n}\nfunction calculateAverageHealth(accounts) {\n  if (accounts.length === 0) return 0;\n  const sum = accounts.reduce((acc, account) => acc + account.healthScore, 0);\n  return Math.round(sum / accounts.length * 10) / 10;\n}\nasync function updateAccountHealth(accountId, healthUpdate) {\n  return generateMockAccountHealth(accountId);\n}\nasync function performBulkHealthCheck(accountIds) {\n  return accountIds.map((accountId) => ({\n    accountId,\n    status: \"checked\",\n    healthScore: 50 + Math.random() * 50,\n    issues: Math.random() > 0.8 ? [\"high_error_rate\"] : [],\n    checkedAt: (/* @__PURE__ */ new Date()).toISOString()\n  }));\n}\nexport {\n  GET,\n  POST\n};\n"],"names":[],"mappings":"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"}