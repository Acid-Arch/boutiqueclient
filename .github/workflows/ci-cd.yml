name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Security and Quality Checks
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for vulnerabilities
        run: |
          VULNERABILITIES=$(npm audit --json | jq '.metadata.vulnerabilities.total')
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "Found $VULNERABILITIES vulnerabilities"
            exit 1
          fi

  # Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/test_db

      - name: Run database migrations
        run: npx prisma db push --force-reset
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/test_db

      - name: Run unit tests
        run: npm run test:run
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/test_db
          NODE_ENV: test
          AUTH_SECRET: test-secret-32-bytes-long-for-testing
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret

      - name: Run type checking
        run: npm run check

      - name: Run linting
        run: npm run lint

      - name: Test coverage
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/test_db

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            build/
            package.json
            package-lock.json
            prisma/
          retention-days: 1

  # Package Application
  package:
    name: Package Application for Deployment
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: Create deployment package
        run: |
          mkdir -p deployment-package
          cp -r build/ deployment-package/
          cp package.json package-lock.json deployment-package/
          cp -r prisma/ deployment-package/
          cp -r scripts/ deployment-package/
          tar -czf boutique-client-${{ github.sha }}.tar.gz -C deployment-package .

      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: boutique-client-${{ github.sha }}.tar.gz
          retention-days: 30

  # E2E Testing
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: e2e_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: Setup test database
        run: npx prisma db push --force-reset
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/e2e_db

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/e2e_db
          NODE_ENV: test
          AUTH_SECRET: test-secret-32-bytes-long-for-e2e-testing
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Production Deployment (when ready)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [package]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy notification
        run: |
          echo "ðŸš€ Ready for production deployment"
          echo "Deployment package: boutique-client-${{ github.sha }}.tar.gz"
          echo "Use scripts/deploy-production.sh for server deployment"

      - name: Download deployment package
        uses: actions/download-artifact@v3
        with:
          name: deployment-package

      # Uncomment and customize for your deployment strategy:
      # - name: Deploy to production server
      #   run: |
      #     # Transfer package to production server
      #     # scp boutique-client-${{ github.sha }}.tar.gz user@server:/opt/boutique-client/
      #     # ssh user@server 'cd /opt/boutique-client && ./scripts/deploy-production.sh boutique-client-${{ github.sha }}.tar.gz'