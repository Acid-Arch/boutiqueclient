{"version":3,"file":"_server.ts-CRAg_222.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/export/_server.ts.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { getPrisma } from \"../../../../chunks/db-loader.js\";\nconst FIELD_DISPLAY_NAMES = {\n  id: \"ID\",\n  recordId: \"Record ID\",\n  instagramUsername: \"Instagram Username\",\n  instagramPassword: \"Instagram Password\",\n  emailAddress: \"Email Address\",\n  emailPassword: \"Email Password\",\n  status: \"Status\",\n  imapStatus: \"IMAP Status\",\n  assignedDeviceId: \"Device ID\",\n  assignedCloneNumber: \"Clone Number\",\n  assignedPackageName: \"Package Name\",\n  assignmentTimestamp: \"Assignment Date\",\n  loginTimestamp: \"Login Date\",\n  createdAt: \"Created Date\",\n  updatedAt: \"Updated Date\"\n};\nfunction formatDateForExport(date) {\n  if (!date) return \"\";\n  return date.toISOString().replace(\"T\", \" \").substring(0, 19);\n}\nfunction getFieldValue(account, fieldName) {\n  const value = account[fieldName];\n  if (fieldName.includes(\"Timestamp\") || fieldName.includes(\"At\")) {\n    return formatDateForExport(value);\n  }\n  if (value === null || value === void 0) {\n    return \"\";\n  }\n  return String(value);\n}\nfunction escapeCsvField(value) {\n  if (value.includes(\",\") || value.includes(\"\\n\") || value.includes('\"')) {\n    return `\"${value.replace(/\"/g, '\"\"')}\"`;\n  }\n  return value;\n}\nfunction convertToCSV(accounts, fields, includeHeaders = true) {\n  const selectedFields = Object.entries(fields).filter(([_, selected]) => selected).map(([fieldName, _]) => fieldName);\n  const rows = [];\n  if (includeHeaders) {\n    const headers = selectedFields.map((field) => FIELD_DISPLAY_NAMES[field]);\n    rows.push(headers.map((header) => escapeCsvField(header)).join(\",\"));\n  }\n  accounts.forEach((account) => {\n    const values = selectedFields.map((field) => {\n      const value = getFieldValue(account, field);\n      return escapeCsvField(value);\n    });\n    rows.push(values.join(\",\"));\n  });\n  return rows.join(\"\\n\");\n}\nfunction convertToJSON(accounts, fields, includeMetadata = true) {\n  const selectedFields = Object.entries(fields).filter(([_, selected]) => selected).map(([fieldName, _]) => fieldName);\n  const filteredAccounts = accounts.map((account) => {\n    const filtered = {};\n    selectedFields.forEach((field) => {\n      const value = account[field];\n      if (field.includes(\"Timestamp\") || field.includes(\"At\")) {\n        filtered[field] = value ? value.toISOString() : void 0;\n      } else {\n        filtered[field] = value ?? void 0;\n      }\n    });\n    return filtered;\n  });\n  if (includeMetadata) {\n    return JSON.stringify({\n      metadata: {\n        exportDate: (/* @__PURE__ */ new Date()).toISOString(),\n        recordCount: accounts.length,\n        fields: selectedFields,\n        format: \"instagram-account-export-v1\"\n      },\n      accounts: filteredAccounts\n    }, null, 2);\n  }\n  return JSON.stringify(filteredAccounts, null, 2);\n}\nfunction generateExportFilename(format, recordCount, prefix = \"ig-accounts\") {\n  const timestamp = (/* @__PURE__ */ new Date()).toISOString().replace(/[:.]/g, \"-\").substring(0, 19);\n  const extension = format === \"csv\" ? \"csv\" : \"json\";\n  return `${prefix}-${recordCount}-records-${timestamp}.${extension}`;\n}\nfunction validateExportConfig(config) {\n  const errors = [];\n  if (!config.format) {\n    errors.push(\"Export format is required\");\n  } else if (![\"csv\", \"json\"].includes(config.format)) {\n    errors.push(\"Export format must be CSV or JSON\");\n  }\n  if (!config.fields) {\n    errors.push(\"Field selection is required\");\n  } else {\n    const selectedFields = Object.values(config.fields).filter(Boolean);\n    if (selectedFields.length === 0) {\n      errors.push(\"At least one field must be selected for export\");\n    }\n  }\n  if (config.dateRange) {\n    if (!config.dateRange.from || !config.dateRange.to) {\n      errors.push(\"Both start and end dates are required for date range filtering\");\n    } else if (config.dateRange.from > config.dateRange.to) {\n      errors.push(\"Start date cannot be after end date\");\n    }\n  }\n  return {\n    valid: errors.length === 0,\n    errors\n  };\n}\nfunction estimateExportSize(recordCount, fields, format) {\n  const selectedFieldCount = Object.values(fields).filter(Boolean).length;\n  const avgFieldSize = 35;\n  const headerSize = 500;\n  const estimatedBytes = recordCount * selectedFieldCount * avgFieldSize + headerSize;\n  let size;\n  let unit;\n  if (estimatedBytes < 1024) {\n    size = estimatedBytes;\n    unit = \"B\";\n  } else if (estimatedBytes < 1024 * 1024) {\n    size = estimatedBytes / 1024;\n    unit = \"KB\";\n  } else {\n    size = estimatedBytes / (1024 * 1024);\n    unit = \"MB\";\n  }\n  return {\n    size: Math.round(size * 100) / 100,\n    unit,\n    displaySize: `${Math.round(size * 100) / 100} ${unit}`\n  };\n}\nfunction isLargeExport(recordCount, fields) {\n  const estimate = estimateExportSize(recordCount, fields);\n  return estimate.size > 1 && estimate.unit === \"MB\";\n}\nfunction getRecommendedBatchSize(recordCount) {\n  if (recordCount <= 1e3) return recordCount;\n  if (recordCount <= 5e3) return 1e3;\n  if (recordCount <= 1e4) return 2e3;\n  return 5e3;\n}\nconst POST = async ({ request }) => {\n  try {\n    const config = await request.json();\n    const prisma = await getPrisma();\n    const validation = validateExportConfig(config);\n    if (!validation.valid) {\n      return json({\n        success: false,\n        error: `Invalid export configuration: ${validation.errors.join(\", \")}`\n      }, { status: 400 });\n    }\n    const where = {};\n    if (config.statusFilter) {\n      where.status = config.statusFilter;\n    }\n    if (config.searchQuery) {\n      where.OR = [\n        { instagramUsername: { contains: config.searchQuery, mode: \"insensitive\" } },\n        { emailAddress: { contains: config.searchQuery, mode: \"insensitive\" } }\n      ];\n    }\n    if (config.dateRange) {\n      where.createdAt = {\n        gte: config.dateRange.from,\n        lte: config.dateRange.to\n      };\n    }\n    const totalCount = await prisma.igAccount.count({ where });\n    if (totalCount === 0) {\n      return json({\n        success: false,\n        error: \"No accounts match the specified filters\"\n      }, { status: 400 });\n    }\n    const needsBatching = isLargeExport(totalCount, config.fields);\n    let accounts = [];\n    if (needsBatching) {\n      const batchSize = getRecommendedBatchSize(totalCount);\n      let skip = 0;\n      while (skip < totalCount) {\n        const batchAccounts = await prisma.igAccount.findMany({\n          where,\n          orderBy: { createdAt: \"desc\" },\n          take: batchSize,\n          skip,\n          include: {\n            // Only include device info if device fields are selected\n            ...config.fields.assignedDeviceId || config.fields.assignedCloneNumber || config.fields.assignedPackageName ? {\n              // Note: In a real scenario, you'd join with CloneInventory table\n              // For now, we'll just include the basic assignment info\n            } : {}\n          }\n        });\n        accounts.push(...batchAccounts);\n        skip += batchSize;\n        if (batchAccounts.length === 0) break;\n      }\n    } else {\n      accounts = await prisma.igAccount.findMany({\n        where,\n        orderBy: { createdAt: \"desc\" },\n        include: {\n          // Only include device info if device fields are selected\n          ...config.fields.assignedDeviceId || config.fields.assignedCloneNumber || config.fields.assignedPackageName ? {\n            // Note: In a real scenario, you'd join with CloneInventory table\n          } : {}\n        }\n      });\n    }\n    if (config.fields.assignedDeviceId || config.fields.assignedCloneNumber || config.fields.assignedPackageName) {\n      const deviceIds = accounts.map((account) => account.assignedDeviceId).filter((id) => Boolean(id));\n      if (deviceIds.length > 0) {\n        const deviceData = await prisma.cloneInventory.findMany({\n          where: {\n            deviceId: { in: deviceIds }\n          },\n          select: {\n            deviceId: true,\n            deviceName: true,\n            packageName: true,\n            cloneHealth: true,\n            cloneNumber: true\n          }\n        });\n        const deviceMap = new Map(\n          deviceData.map((device) => [`${device.deviceId}-${device.cloneNumber}`, device])\n        );\n        accounts = accounts.map((account) => {\n          if (account.assignedDeviceId && account.assignedCloneNumber !== null) {\n            const deviceKey = `${account.assignedDeviceId}-${account.assignedCloneNumber}`;\n            const deviceInfo = deviceMap.get(deviceKey);\n            if (deviceInfo) {\n              return {\n                ...account,\n                assignedDevice: {\n                  deviceName: deviceInfo.deviceName,\n                  packageName: deviceInfo.packageName,\n                  cloneHealth: deviceInfo.cloneHealth\n                }\n              };\n            }\n          }\n          return account;\n        });\n      }\n    }\n    let exportData;\n    let filename;\n    if (config.format === \"csv\") {\n      exportData = convertToCSV(accounts, config.fields, config.includeHeaders);\n      filename = generateExportFilename(\"csv\", accounts.length, \"ig-accounts\");\n    } else {\n      exportData = convertToJSON(accounts, config.fields, true);\n      filename = generateExportFilename(\"json\", accounts.length, \"ig-accounts\");\n    }\n    console.log(`Export completed: ${accounts.length} accounts exported in ${config.format.toUpperCase()} format`);\n    return json({\n      success: true,\n      data: exportData,\n      filename,\n      recordCount: accounts.length,\n      metadata: {\n        format: config.format,\n        timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n        totalRecords: accounts.length,\n        fieldsExported: Object.entries(config.fields).filter(([_, selected]) => selected).map(([field, _]) => field),\n        filtersApplied: {\n          status: config.statusFilter || null,\n          search: config.searchQuery || null,\n          dateRange: config.dateRange || null\n        }\n      }\n    });\n  } catch (error) {\n    console.error(\"Export failed:\", error);\n    if (error instanceof Error) {\n      if (error.message.includes(\"timeout\")) {\n        return json({\n          success: false,\n          error: \"Export timed out. Please try exporting a smaller dataset or contact support.\"\n        }, { status: 408 });\n      }\n      if (error.message.includes(\"memory\")) {\n        return json({\n          success: false,\n          error: \"Export dataset too large. Please apply additional filters to reduce the data size.\"\n        }, { status: 413 });\n      }\n    }\n    return json({\n      success: false,\n      error: \"Export failed due to an internal error. Please try again.\"\n    }, { status: 500 });\n  }\n};\nconst GET = async ({ url }) => {\n  try {\n    const prisma = await getPrisma();\n    const statusFilter = url.searchParams.get(\"status\") || void 0;\n    const searchQuery = url.searchParams.get(\"search\") || void 0;\n    const where = {};\n    if (statusFilter) {\n      where.status = statusFilter;\n    }\n    if (searchQuery) {\n      where.OR = [\n        { instagramUsername: { contains: searchQuery, mode: \"insensitive\" } },\n        { emailAddress: { contains: searchQuery, mode: \"insensitive\" } }\n      ];\n    }\n    const [totalCount, oldestAccount, newestAccount] = await Promise.all([\n      prisma.igAccount.count({ where }),\n      prisma.igAccount.findFirst({\n        where,\n        orderBy: { createdAt: \"asc\" },\n        select: { createdAt: true }\n      }),\n      prisma.igAccount.findFirst({\n        where,\n        orderBy: { createdAt: \"desc\" },\n        select: { createdAt: true }\n      })\n    ]);\n    const statusBreakdown = await prisma.igAccount.groupBy({\n      by: [\"status\"],\n      where: searchQuery ? {\n        OR: [\n          { instagramUsername: { contains: searchQuery, mode: \"insensitive\" } },\n          { emailAddress: { contains: searchQuery, mode: \"insensitive\" } }\n        ]\n      } : {},\n      _count: {\n        status: true\n      }\n    });\n    const statusCounts = statusBreakdown.reduce((acc, item) => {\n      acc[item.status] = item._count.status;\n      return acc;\n    }, {});\n    return json({\n      success: true,\n      data: {\n        totalRecords: totalCount,\n        dateRange: {\n          oldest: oldestAccount?.createdAt || null,\n          newest: newestAccount?.createdAt || null\n        },\n        statusBreakdown: statusCounts,\n        hasData: totalCount > 0\n      }\n    });\n  } catch (error) {\n    console.error(\"Failed to get export stats:\", error);\n    return json({\n      success: false,\n      error: \"Failed to retrieve export statistics\"\n    }, { status: 500 });\n  }\n};\nexport {\n  GET,\n  POST\n};\n"],"names":[],"mappings":"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"}