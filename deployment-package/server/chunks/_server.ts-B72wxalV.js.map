{"version":3,"file":"_server.ts-B72wxalV.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/accounts/bulk/_server.ts.js"],"sourcesContent":["import { error, json } from \"@sveltejs/kit\";\nimport { getPrisma } from \"../../../../../chunks/db-loader.js\";\nimport { A as ACCOUNT_STATUSES } from \"../../../../../chunks/status.js\";\nconst POST = async ({ request }) => {\n  try {\n    const body = await request.json();\n    const { operation, accountIds } = body;\n    if (!accountIds || !Array.isArray(accountIds) || accountIds.length === 0) {\n      throw error(400, \"No account IDs provided\");\n    }\n    const prisma = await getPrisma();\n    const existingAccounts = await prisma.igAccount.findMany({\n      where: { id: { in: accountIds } },\n      select: {\n        id: true,\n        instagramUsername: true,\n        status: true,\n        assignedDeviceId: true,\n        assignedCloneNumber: true,\n        emailAddress: true,\n        createdAt: true,\n        updatedAt: true\n      }\n    });\n    if (existingAccounts.length !== accountIds.length) {\n      throw error(400, \"Some account IDs are invalid\");\n    }\n    switch (operation) {\n      case \"updateStatus\":\n        return await handleStatusUpdate(existingAccounts, body.newStatus, prisma);\n      case \"assignDevices\":\n        return await handleDeviceAssignment(existingAccounts, body, prisma);\n      case \"export\":\n        return await handleExport(existingAccounts, body.format, prisma);\n      case \"delete\":\n        return await handleBulkDelete(accountIds, prisma);\n      default:\n        throw error(400, \"Invalid operation\");\n    }\n  } catch (err) {\n    console.error(\"Bulk operation error:\", err);\n    if (err instanceof Error) {\n      throw error(500, err.message);\n    }\n    throw error(500, \"Internal server error\");\n  }\n};\nasync function handleStatusUpdate(accounts, newStatus, prisma) {\n  if (!ACCOUNT_STATUSES.includes(newStatus)) {\n    throw error(400, \"Invalid status\");\n  }\n  const errors = [];\n  let updated = 0;\n  try {\n    const updateData = { status: newStatus, updatedAt: /* @__PURE__ */ new Date() };\n    if (newStatus === \"Logged In\") {\n      updateData.loginTimestamp = /* @__PURE__ */ new Date();\n    } else if (newStatus === \"Unused\") {\n      updateData.assignedDeviceId = null;\n      updateData.assignedCloneNumber = null;\n      updateData.assignedPackageName = null;\n      updateData.assignmentTimestamp = null;\n    }\n    const result = await prisma.igAccount.updateMany({\n      where: { id: { in: accounts.map((a) => a.id) } },\n      data: updateData\n    });\n    updated = result.count;\n    if (newStatus === \"Unused\") {\n      const assignedClones = accounts.filter((a) => a.assignedDeviceId && a.assignedCloneNumber);\n      if (assignedClones.length > 0) {\n        await prisma.cloneInventory.updateMany({\n          where: {\n            OR: assignedClones.map((account) => ({\n              AND: [\n                { deviceId: account.assignedDeviceId },\n                { cloneNumber: account.assignedCloneNumber }\n              ]\n            }))\n          },\n          data: {\n            cloneStatus: \"Available\",\n            currentAccount: null,\n            updatedAt: /* @__PURE__ */ new Date()\n          }\n        });\n      }\n    }\n  } catch (updateError) {\n    console.error(\"Status update error:\", updateError);\n    errors.push(\"Failed to update some accounts\");\n  }\n  return json({\n    updated,\n    errors,\n    message: updated > 0 ? `Successfully updated ${updated} accounts` : \"No accounts were updated\"\n  });\n}\nasync function handleDeviceAssignment(accounts, options, prisma) {\n  const {\n    assignmentMode = \"auto\",\n    deviceId,\n    autoAssignmentStrategy = \"round-robin\",\n    preferredDeviceIds = [],\n    excludeDeviceIds = [],\n    maxAccountsPerDevice,\n    allowPartialAssignment = false\n  } = options;\n  const unassignedAccounts = accounts.filter((account) => !account.assignedDeviceId);\n  if (unassignedAccounts.length === 0) {\n    return json({\n      assigned: 0,\n      errors: [],\n      message: \"No unassigned accounts to process\"\n    });\n  }\n  let assignments;\n  let errors = [];\n  try {\n    assignments = await getAssignments(unassignedAccounts, {\n      assignmentMode,\n      deviceId,\n      strategy: autoAssignmentStrategy,\n      preferredDeviceIds,\n      excludeDeviceIds,\n      maxAccountsPerDevice,\n      allowPartialAssignment\n    }, prisma);\n  } catch (assignmentError) {\n    if (allowPartialAssignment && assignmentError.message.includes(\"Insufficient capacity\")) {\n      try {\n        assignments = await getPartialAssignments(unassignedAccounts, {\n          assignmentMode,\n          deviceId,\n          strategy: autoAssignmentStrategy,\n          preferredDeviceIds,\n          excludeDeviceIds,\n          maxAccountsPerDevice\n        }, prisma);\n        errors.push(`Partial assignment: Only ${assignments.length} of ${unassignedAccounts.length} accounts could be assigned`);\n      } catch (partialError) {\n        throw error(400, partialError.message);\n      }\n    } else {\n      throw error(400, assignmentError.message);\n    }\n  }\n  let assigned = 0;\n  try {\n    await prisma.$transaction(async (tx) => {\n      for (const { account, clone } of assignments) {\n        await tx.igAccount.update({\n          where: { id: account.id },\n          data: {\n            status: \"Assigned\",\n            assignedDeviceId: clone.deviceId,\n            assignedCloneNumber: clone.cloneNumber,\n            assignedPackageName: clone.packageName,\n            assignmentTimestamp: /* @__PURE__ */ new Date(),\n            updatedAt: /* @__PURE__ */ new Date()\n          }\n        });\n        await tx.cloneInventory.update({\n          where: {\n            deviceId_cloneNumber: {\n              deviceId: clone.deviceId,\n              cloneNumber: clone.cloneNumber\n            }\n          },\n          data: {\n            cloneStatus: \"Assigned\",\n            currentAccount: account.instagramUsername,\n            updatedAt: /* @__PURE__ */ new Date()\n          }\n        });\n        assigned++;\n      }\n    });\n  } catch (assignError) {\n    console.error(\"Assignment error:\", assignError);\n    errors.push(\"Failed to assign some accounts to devices\");\n  }\n  return json({\n    assigned,\n    errors,\n    message: assigned > 0 ? `Successfully assigned ${assigned} accounts to devices` : \"No accounts were assigned\"\n  });\n}\nasync function handleExport(accounts, format, prisma) {\n  const completeAccounts = await prisma.igAccount.findMany({\n    where: { id: { in: accounts.map((a) => a.id) } },\n    select: {\n      id: true,\n      instagramUsername: true,\n      emailAddress: true,\n      status: true,\n      assignedDeviceId: true,\n      assignedCloneNumber: true,\n      assignedPackageName: true,\n      assignmentTimestamp: true,\n      loginTimestamp: true,\n      createdAt: true,\n      updatedAt: true\n    }\n  });\n  if (format === \"csv\") {\n    const headers = [\n      \"ID\",\n      \"Username\",\n      \"Email\",\n      \"Status\",\n      \"Device ID\",\n      \"Clone Number\",\n      \"Package Name\",\n      \"Assignment Date\",\n      \"Last Login\",\n      \"Created\",\n      \"Updated\"\n    ];\n    const rows = completeAccounts.map((account) => [\n      account.id.toString(),\n      account.instagramUsername,\n      account.emailAddress,\n      account.status,\n      account.assignedDeviceId || \"\",\n      account.assignedCloneNumber?.toString() || \"\",\n      account.assignedPackageName || \"\",\n      account.assignmentTimestamp?.toISOString() || \"\",\n      account.loginTimestamp?.toISOString() || \"\",\n      account.createdAt.toISOString(),\n      account.updatedAt.toISOString()\n    ]);\n    const csv = [headers, ...rows].map((row) => row.map((field) => `\"${field}\"`).join(\",\")).join(\"\\n\");\n    return new Response(csv, {\n      headers: {\n        \"Content-Type\": \"text/csv\",\n        \"Content-Disposition\": `attachment; filename=\"accounts_${(/* @__PURE__ */ new Date()).toISOString().split(\"T\")[0]}.csv\"`\n      }\n    });\n  } else {\n    const jsonData = {\n      exported_at: (/* @__PURE__ */ new Date()).toISOString(),\n      total_accounts: completeAccounts.length,\n      accounts: completeAccounts\n    };\n    return new Response(JSON.stringify(jsonData, null, 2), {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Content-Disposition\": `attachment; filename=\"accounts_${(/* @__PURE__ */ new Date()).toISOString().split(\"T\")[0]}.json\"`\n      }\n    });\n  }\n}\nasync function handleBulkDelete(accountIds, prisma) {\n  const errors = [];\n  let deleted = 0;\n  try {\n    const accountsToDelete = await prisma.igAccount.findMany({\n      where: { id: { in: accountIds } },\n      select: {\n        id: true,\n        instagramUsername: true,\n        assignedDeviceId: true,\n        assignedCloneNumber: true\n      }\n    });\n    await prisma.$transaction(async (tx) => {\n      const assignedAccounts = accountsToDelete.filter((a) => a.assignedDeviceId && a.assignedCloneNumber);\n      if (assignedAccounts.length > 0) {\n        await tx.cloneInventory.updateMany({\n          where: {\n            OR: assignedAccounts.map((account) => ({\n              AND: [\n                { deviceId: account.assignedDeviceId },\n                { cloneNumber: account.assignedCloneNumber }\n              ]\n            }))\n          },\n          data: {\n            cloneStatus: \"Available\",\n            currentAccount: null,\n            updatedAt: /* @__PURE__ */ new Date()\n          }\n        });\n      }\n      const result = await tx.igAccount.deleteMany({\n        where: { id: { in: accountIds } }\n      });\n      deleted = result.count;\n    });\n  } catch (deleteError) {\n    console.error(\"Delete error:\", deleteError);\n    errors.push(\"Failed to delete some accounts\");\n  }\n  return json({\n    deleted,\n    errors,\n    message: deleted > 0 ? `Successfully deleted ${deleted} accounts` : \"No accounts were deleted\"\n  });\n}\nasync function getAssignments(accounts, options, prisma) {\n  const { assignmentMode, deviceId, strategy, preferredDeviceIds = [], excludeDeviceIds = [], maxAccountsPerDevice } = options;\n  const whereClause = {\n    cloneStatus: \"Available\"\n  };\n  if (assignmentMode === \"specific\" && deviceId) {\n    whereClause.deviceId = deviceId;\n  } else if (preferredDeviceIds.length > 0) {\n    whereClause.deviceId = { in: preferredDeviceIds };\n  }\n  if (excludeDeviceIds.length > 0) {\n    if (whereClause.deviceId) {\n      if (typeof whereClause.deviceId === \"string\") {\n        if (excludeDeviceIds.includes(whereClause.deviceId)) {\n          throw new Error(\"Specified device is in exclusion list\");\n        }\n      } else if (whereClause.deviceId.in) {\n        whereClause.deviceId.in = whereClause.deviceId.in.filter((id) => !excludeDeviceIds.includes(id));\n        if (whereClause.deviceId.in.length === 0) {\n          throw new Error(\"All preferred devices are excluded\");\n        }\n      }\n    } else {\n      whereClause.deviceId = { notIn: excludeDeviceIds };\n    }\n  }\n  const availableClones = await prisma.cloneInventory.findMany({\n    where: whereClause,\n    orderBy: [\n      { deviceId: \"asc\" },\n      { cloneNumber: \"asc\" }\n    ]\n  });\n  if (availableClones.length === 0) {\n    throw new Error(\"No available clones found\");\n  }\n  let filteredClones = availableClones;\n  if (maxAccountsPerDevice) {\n    filteredClones = await applyDeviceCapacityLimits(availableClones, maxAccountsPerDevice, prisma);\n  }\n  if (filteredClones.length < accounts.length) {\n    throw new Error(`Insufficient capacity. Need ${accounts.length} slots, but only ${filteredClones.length} available`);\n  }\n  switch (strategy) {\n    case \"round-robin\":\n      return getRoundRobinAssignments(accounts, filteredClones);\n    case \"fill-first\":\n      return getFillFirstAssignments(accounts, filteredClones);\n    case \"capacity-based\":\n      return getCapacityBasedAssignments(accounts, filteredClones);\n    case \"balanced-load\":\n      return getBalancedLoadAssignments(accounts, filteredClones, prisma);\n    case \"optimal-distribution\":\n      return getOptimalDistributionAssignments(accounts, filteredClones, prisma);\n    default:\n      return getRoundRobinAssignments(accounts, filteredClones);\n  }\n}\nasync function getRoundRobinAssignments(accounts, availableClones, prisma) {\n  const deviceClones = /* @__PURE__ */ new Map();\n  for (const clone of availableClones) {\n    if (!deviceClones.has(clone.deviceId)) {\n      deviceClones.set(clone.deviceId, []);\n    }\n    deviceClones.get(clone.deviceId).push(clone);\n  }\n  const assignments = [];\n  const devices = Array.from(deviceClones.keys());\n  let deviceIndex = 0;\n  for (const account of accounts) {\n    let attempts = 0;\n    while (attempts < devices.length) {\n      const currentDevice = devices[deviceIndex];\n      const availableDeviceClones = deviceClones.get(currentDevice);\n      if (availableDeviceClones.length > 0) {\n        const clone = availableDeviceClones.shift();\n        assignments.push({ account, clone });\n        break;\n      }\n      deviceIndex = (deviceIndex + 1) % devices.length;\n      attempts++;\n    }\n    deviceIndex = (deviceIndex + 1) % devices.length;\n  }\n  return assignments;\n}\nasync function getFillFirstAssignments(accounts, availableClones, prisma) {\n  const assignments = [];\n  const clonesCopy = [...availableClones];\n  for (let i = 0; i < accounts.length && i < clonesCopy.length; i++) {\n    assignments.push({\n      account: accounts[i],\n      clone: clonesCopy[i]\n    });\n  }\n  return assignments;\n}\nasync function getCapacityBasedAssignments(accounts, availableClones, prisma) {\n  const deviceClones = /* @__PURE__ */ new Map();\n  for (const clone of availableClones) {\n    if (!deviceClones.has(clone.deviceId)) {\n      deviceClones.set(clone.deviceId, []);\n    }\n    deviceClones.get(clone.deviceId).push(clone);\n  }\n  const sortedDevices = Array.from(deviceClones.entries()).sort((a, b) => b[1].length - a[1].length).map(([deviceId, clones]) => ({ deviceId, clones }));\n  const assignments = [];\n  let deviceIndex = 0;\n  for (const account of accounts) {\n    while (deviceIndex < sortedDevices.length) {\n      const device = sortedDevices[deviceIndex];\n      if (device.clones.length > 0) {\n        const clone = device.clones.shift();\n        assignments.push({ account, clone });\n        if (device.clones.length === 0) {\n          deviceIndex++;\n        }\n        break;\n      }\n      deviceIndex++;\n    }\n  }\n  return assignments;\n}\nasync function getBalancedLoadAssignments(accounts, availableClones, prisma) {\n  const deviceLoadMap = /* @__PURE__ */ new Map();\n  for (const clone of availableClones) {\n    if (!deviceLoadMap.has(clone.deviceId)) {\n      const currentLoad = await prisma.cloneInventory.count({\n        where: {\n          deviceId: clone.deviceId,\n          cloneStatus: { in: [\"Assigned\", \"Logged In\"] }\n        }\n      });\n      deviceLoadMap.set(clone.deviceId, currentLoad);\n    }\n  }\n  const deviceClones = /* @__PURE__ */ new Map();\n  for (const clone of availableClones) {\n    if (!deviceClones.has(clone.deviceId)) {\n      deviceClones.set(clone.deviceId, []);\n    }\n    deviceClones.get(clone.deviceId).push(clone);\n  }\n  const sortedDevices = Array.from(deviceClones.entries()).sort((a, b) => (deviceLoadMap.get(a[0]) || 0) - (deviceLoadMap.get(b[0]) || 0)).map(([deviceId, clones]) => ({ deviceId, clones, currentLoad: deviceLoadMap.get(deviceId) || 0 }));\n  const assignments = [];\n  let deviceIndex = 0;\n  for (const account of accounts) {\n    while (deviceIndex < sortedDevices.length) {\n      const device = sortedDevices[deviceIndex];\n      if (device.clones.length > 0) {\n        const clone = device.clones.shift();\n        assignments.push({ account, clone });\n        device.currentLoad++;\n        let newIndex = deviceIndex;\n        while (newIndex > 0 && sortedDevices[newIndex - 1].currentLoad > device.currentLoad) {\n          [sortedDevices[newIndex], sortedDevices[newIndex - 1]] = [sortedDevices[newIndex - 1], sortedDevices[newIndex]];\n          newIndex--;\n        }\n        while (newIndex < sortedDevices.length - 1 && sortedDevices[newIndex + 1].currentLoad < device.currentLoad) {\n          [sortedDevices[newIndex], sortedDevices[newIndex + 1]] = [sortedDevices[newIndex + 1], sortedDevices[newIndex]];\n          newIndex++;\n        }\n        deviceIndex = newIndex;\n        break;\n      }\n      deviceIndex++;\n    }\n  }\n  return assignments;\n}\nasync function getOptimalDistributionAssignments(accounts, availableClones, prisma) {\n  const deviceInfo = /* @__PURE__ */ new Map();\n  for (const clone of availableClones) {\n    if (!deviceInfo.has(clone.deviceId)) {\n      const totalCapacity = await prisma.cloneInventory.count({\n        where: { deviceId: clone.deviceId }\n      });\n      const currentUsage = await prisma.cloneInventory.count({\n        where: {\n          deviceId: clone.deviceId,\n          cloneStatus: { in: [\"Assigned\", \"Logged In\"] }\n        }\n      });\n      const efficiency = totalCapacity > 0 ? (totalCapacity - currentUsage) / totalCapacity : 0;\n      deviceInfo.set(clone.deviceId, {\n        totalCapacity,\n        currentUsage,\n        availableClones: [],\n        efficiency\n      });\n    }\n    deviceInfo.get(clone.deviceId).availableClones.push(clone);\n  }\n  const assignments = [];\n  const deviceList = Array.from(deviceInfo.entries()).filter(([_, info]) => info.availableClones.length > 0).sort((a, b) => b[1].efficiency - a[1].efficiency);\n  let totalWeight = deviceList.reduce((sum, [_, info]) => sum + info.efficiency, 0);\n  for (const account of accounts) {\n    if (deviceList.length === 0) break;\n    let remainingWeight = Math.random() * totalWeight;\n    let selectedDeviceIndex = 0;\n    for (let i = 0; i < deviceList.length; i++) {\n      remainingWeight -= deviceList[i][1].efficiency;\n      if (remainingWeight <= 0 || deviceList[i][1].availableClones.length > 0) {\n        selectedDeviceIndex = i;\n        break;\n      }\n    }\n    const [deviceId, deviceData] = deviceList[selectedDeviceIndex];\n    if (deviceData.availableClones.length > 0) {\n      const clone = deviceData.availableClones.shift();\n      assignments.push({ account, clone });\n      deviceData.currentUsage++;\n      deviceData.efficiency = deviceData.totalCapacity > 0 ? (deviceData.totalCapacity - deviceData.currentUsage) / deviceData.totalCapacity : 0;\n      if (deviceData.availableClones.length === 0) {\n        deviceList.splice(selectedDeviceIndex, 1);\n        totalWeight -= deviceData.efficiency;\n      }\n    }\n  }\n  return assignments;\n}\nasync function applyDeviceCapacityLimits(clones, maxAccountsPerDevice, prisma) {\n  const deviceUsage = /* @__PURE__ */ new Map();\n  for (const clone of clones) {\n    if (!deviceUsage.has(clone.deviceId)) {\n      const currentUsage = await prisma.cloneInventory.count({\n        where: {\n          deviceId: clone.deviceId,\n          cloneStatus: { in: [\"Assigned\", \"Logged In\"] }\n        }\n      });\n      deviceUsage.set(clone.deviceId, currentUsage);\n    }\n  }\n  const filteredClones = [];\n  const deviceCloneCounts = /* @__PURE__ */ new Map();\n  for (const clone of clones) {\n    const currentDeviceCount = deviceCloneCounts.get(clone.deviceId) || 0;\n    const currentUsage = deviceUsage.get(clone.deviceId) || 0;\n    if (currentUsage + currentDeviceCount < maxAccountsPerDevice) {\n      filteredClones.push(clone);\n      deviceCloneCounts.set(clone.deviceId, currentDeviceCount + 1);\n    }\n  }\n  return filteredClones;\n}\nasync function getPartialAssignments(accounts, options, prisma) {\n  const whereClause = { cloneStatus: \"Available\" };\n  if (options.assignmentMode === \"specific\" && options.deviceId) {\n    whereClause.deviceId = options.deviceId;\n  } else if (options.preferredDeviceIds && options.preferredDeviceIds.length > 0) {\n    whereClause.deviceId = { in: options.preferredDeviceIds };\n  }\n  if (options.excludeDeviceIds && options.excludeDeviceIds.length > 0) {\n    if (whereClause.deviceId) {\n      if (typeof whereClause.deviceId === \"string\") {\n        if (options.excludeDeviceIds.includes(whereClause.deviceId)) {\n          throw new Error(\"Specified device is excluded\");\n        }\n      } else if (whereClause.deviceId.in) {\n        whereClause.deviceId.in = whereClause.deviceId.in.filter(\n          (id) => !options.excludeDeviceIds.includes(id)\n        );\n      }\n    } else {\n      whereClause.deviceId = { notIn: options.excludeDeviceIds };\n    }\n  }\n  const availableClones = await prisma.cloneInventory.findMany({\n    where: whereClause,\n    orderBy: [\n      { deviceId: \"asc\" },\n      { cloneNumber: \"asc\" }\n    ]\n  });\n  let filteredClones = availableClones;\n  if (options.maxAccountsPerDevice) {\n    filteredClones = await applyDeviceCapacityLimits(availableClones, options.maxAccountsPerDevice, prisma);\n  }\n  const accountsToAssign = accounts.slice(0, filteredClones.length);\n  switch (options.strategy) {\n    case \"round-robin\":\n      return getRoundRobinAssignments(accountsToAssign, filteredClones);\n    case \"fill-first\":\n      return getFillFirstAssignments(accountsToAssign, filteredClones);\n    case \"capacity-based\":\n      return getCapacityBasedAssignments(accountsToAssign, filteredClones);\n    case \"balanced-load\":\n      return getBalancedLoadAssignments(accountsToAssign, filteredClones, prisma);\n    case \"optimal-distribution\":\n      return getOptimalDistributionAssignments(accountsToAssign, filteredClones, prisma);\n    default:\n      return getRoundRobinAssignments(accountsToAssign, filteredClones);\n  }\n}\nexport {\n  POST\n};\n"],"names":[],"mappings":"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"}