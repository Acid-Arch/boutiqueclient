{"version":3,"file":"_server.ts-cybq5PcF.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/scraping/daily-scheduler/_server.ts.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { a as getClientAccountSample, b as getClientAccountsForScraping, f as filterAccountsForScraping, g as getClientAccountStats } from \"../../../../../chunks/client-account-filter.js\";\nimport { b as createBulkSession, u as updateSessionProgress } from \"../../../../../chunks/session-manager.js\";\nimport { H as HikerAPIClient } from \"../../../../../chunks/hiker-api-client.js\";\nimport * as cron from \"node-cron\";\nconst DEFAULT_DAILY_CONFIG = {\n  enabled: true,\n  cronSchedule: \"0 9 * * *\",\n  // 9 AM daily\n  maxAccountsPerDay: 50,\n  // Start conservative for testing\n  costLimit: 0.1,\n  // $0.10 daily limit for testing\n  testMode: true,\n  // Start in test mode\n  testAccountLimit: 5,\n  prioritizeOwnedAccounts: true\n};\nclass DailyScrapingScheduler {\n  config;\n  cronJob = null;\n  isRunning = false;\n  hikerClient;\n  constructor(config = DEFAULT_DAILY_CONFIG) {\n    this.config = config;\n    this.hikerClient = new HikerAPIClient();\n  }\n  /**\n   * Start the daily scraping scheduler\n   */\n  start() {\n    if (this.cronJob) {\n      console.log(\"Daily scraping scheduler is already running\");\n      return;\n    }\n    if (!this.config.enabled) {\n      console.log(\"Daily scraping scheduler is disabled\");\n      return;\n    }\n    console.log(`Starting daily scraping scheduler with cron: ${this.config.cronSchedule}`);\n    this.cronJob = cron.schedule(this.config.cronSchedule, async () => {\n      await this.executeDailyScraping();\n    }, {\n      timezone: \"UTC\"\n    });\n    console.log(\"✅ Daily scraping scheduler started\");\n  }\n  /**\n   * Stop the daily scraping scheduler\n   */\n  stop() {\n    if (this.cronJob) {\n      this.cronJob.stop();\n      this.cronJob = null;\n      console.log(\"Daily scraping scheduler stopped\");\n    }\n  }\n  /**\n   * Execute daily scraping session\n   */\n  async executeDailyScraping() {\n    if (this.isRunning) {\n      console.log(\"Daily scraping is already running, skipping this execution\");\n      return;\n    }\n    this.isRunning = true;\n    console.log(\"🚀 Starting daily scraping session...\");\n    try {\n      const accountsToScrape = await this.getAccountsForDailyScraping();\n      if (accountsToScrape.length === 0) {\n        console.log(\"No accounts eligible for scraping today\");\n        return;\n      }\n      const estimatedCost = accountsToScrape.length * 2e-3;\n      if (estimatedCost > this.config.costLimit) {\n        console.log(`⚠️ Estimated cost $${estimatedCost.toFixed(3)} exceeds daily limit $${this.config.costLimit}`);\n        console.log(`Reducing accounts from ${accountsToScrape.length} to ${Math.floor(this.config.costLimit / 2e-3)}`);\n        accountsToScrape.splice(Math.floor(this.config.costLimit / 2e-3));\n      }\n      const sessionId = `daily-scraping-${Date.now()}`;\n      const session = await createBulkSession(\n        \"ACCOUNT_METRICS\",\n        accountsToScrape.map((acc) => acc.username),\n        {\n          costLimit: parseFloat(estimatedCost.toFixed(3)),\n          triggerSource: \"SCHEDULED\",\n          triggeredBy: \"DailyScrapingScheduler\"\n        }\n      );\n      console.log(`📊 Daily scraping session created: ${sessionId}`);\n      console.log(`Accounts to scrape: ${accountsToScrape.length}`);\n      console.log(`Estimated cost: $${estimatedCost.toFixed(3)}`);\n      let completedAccounts = 0;\n      let failedAccounts = 0;\n      for (const account of accountsToScrape) {\n        try {\n          console.log(`Scraping account: ${account.username}`);\n          const profileData = await this.hikerClient.getUserProfile(account.username);\n          if (profileData) {\n            completedAccounts++;\n            console.log(`✅ Successfully scraped ${account.username}`);\n          } else {\n            failedAccounts++;\n            console.log(`❌ Failed to scrape ${account.username}`);\n          }\n          const progress = Math.round((completedAccounts + failedAccounts) / accountsToScrape.length * 100);\n          await updateSessionProgress(sessionId, {\n            completedAccounts,\n            failedAccounts,\n            requestUnits: completedAccounts * 2,\n            // Estimated request units\n            actualCost: completedAccounts * 2e-3\n            // Estimated cost\n          });\n          await new Promise((resolve) => setTimeout(resolve, 2e3));\n        } catch (error) {\n          failedAccounts++;\n          console.error(`Error scraping ${account.username}:`, error);\n        }\n      }\n      await updateSessionProgress(sessionId, {\n        completedAccounts,\n        failedAccounts,\n        requestUnits: completedAccounts * 2,\n        actualCost: completedAccounts * 2e-3\n      });\n      console.log(\"✅ Daily scraping session completed\");\n      console.log(`Completed: ${completedAccounts}, Failed: ${failedAccounts}`);\n    } catch (error) {\n      console.error(\"❌ Daily scraping session failed:\", error);\n    } finally {\n      this.isRunning = false;\n    }\n  }\n  /**\n   * Get accounts for daily scraping based on configuration\n   */\n  async getAccountsForDailyScraping() {\n    try {\n      let accounts;\n      if (this.config.testMode) {\n        accounts = await getClientAccountSample(this.config.testAccountLimit);\n        console.log(`📝 Test mode: Using ${accounts.length} sample accounts`);\n      } else {\n        const allAccounts = await getClientAccountsForScraping();\n        accounts = filterAccountsForScraping(allAccounts);\n        if (accounts.length > this.config.maxAccountsPerDay) {\n          accounts = accounts.slice(0, this.config.maxAccountsPerDay);\n        }\n        console.log(`🏭 Production mode: Using ${accounts.length} accounts`);\n      }\n      if (this.config.prioritizeOwnedAccounts) {\n        accounts.sort((a, b) => {\n          if (a.ownerId && !b.ownerId) return -1;\n          if (!a.ownerId && b.ownerId) return 1;\n          return 0;\n        });\n      }\n      return accounts;\n    } catch (error) {\n      console.error(\"Error getting accounts for daily scraping:\", error);\n      return [];\n    }\n  }\n  /**\n   * Get current scheduler statistics\n   */\n  async getSchedulerStats() {\n    try {\n      const stats = await getClientAccountStats();\n      const accountsToScrape = this.config.testMode ? Math.min(this.config.testAccountLimit, stats.eligibleForScraping) : Math.min(this.config.maxAccountsPerDay, stats.eligibleForScraping);\n      const estimatedCost = accountsToScrape * 2e-3;\n      const estimatedDuration = accountsToScrape * 0.5;\n      return {\n        scheduledTime: this.config.cronSchedule,\n        totalEligibleAccounts: stats.eligibleForScraping,\n        accountsToScrape,\n        estimatedCost,\n        estimatedDuration,\n        lastRunDate: null,\n        // Would be stored in database\n        nextRunDate: this.getNextRunDate(),\n        isRunning: this.isRunning\n      };\n    } catch (error) {\n      console.error(\"Error getting scheduler stats:\", error);\n      throw error;\n    }\n  }\n  /**\n   * Update scheduler configuration\n   */\n  updateConfig(newConfig) {\n    this.config = { ...this.config, ...newConfig };\n    if (this.cronJob) {\n      this.stop();\n      this.start();\n    }\n    console.log(\"Daily scraping scheduler configuration updated\");\n  }\n  /**\n   * Get the next scheduled run date\n   */\n  getNextRunDate() {\n    if (!this.cronJob) return null;\n    try {\n      const now = /* @__PURE__ */ new Date();\n      const tomorrow = new Date(now);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      tomorrow.setHours(9, 0, 0, 0);\n      return tomorrow;\n    } catch {\n      return null;\n    }\n  }\n  /**\n   * Manual trigger for testing (bypasses schedule)\n   */\n  async triggerManualScraping() {\n    console.log(\"🔧 Manual scraping triggered\");\n    await this.executeDailyScraping();\n  }\n  /**\n   * Get current configuration\n   */\n  getConfig() {\n    return { ...this.config };\n  }\n  /**\n   * Check if scheduler is currently running a scraping session\n   */\n  getRunningStatus() {\n    return this.isRunning;\n  }\n}\nlet globalScheduler = null;\nfunction getDailyScheduler() {\n  if (!globalScheduler) {\n    globalScheduler = new DailyScrapingScheduler();\n  }\n  return globalScheduler;\n}\nconst GET = async ({ url }) => {\n  try {\n    const action = url.searchParams.get(\"action\") || \"status\";\n    const scheduler = getDailyScheduler();\n    switch (action) {\n      case \"status\":\n        const stats = await scheduler.getSchedulerStats();\n        const config = scheduler.getConfig();\n        const clientStats = await getClientAccountStats();\n        return json({\n          success: true,\n          data: {\n            scheduler: {\n              enabled: config.enabled,\n              testMode: config.testMode,\n              cronSchedule: config.cronSchedule,\n              maxAccountsPerDay: config.maxAccountsPerDay,\n              costLimit: config.costLimit,\n              isRunning: scheduler.getRunningStatus()\n            },\n            stats,\n            clientAccounts: clientStats\n          }\n        });\n      case \"test-accounts\":\n        const limit = parseInt(url.searchParams.get(\"limit\") || \"5\");\n        const sampleAccounts = await getClientAccountSample(limit);\n        return json({\n          success: true,\n          data: {\n            sampleAccounts: sampleAccounts.map((account) => ({\n              id: account.id,\n              username: account.username,\n              email: account.email,\n              ownerId: account.ownerId,\n              accountType: account.accountType,\n              currentStatus: account.currentStatus,\n              isCompanyAccount: account.email?.includes(\"@op.pl\") || false\n            })),\n            totalSampled: sampleAccounts.length\n          }\n        });\n      case \"config\":\n        return json({\n          success: true,\n          data: {\n            config: scheduler.getConfig()\n          }\n        });\n      default:\n        return json({\n          success: false,\n          error: \"Invalid action. Valid actions: status, test-accounts, config\"\n        }, { status: 400 });\n    }\n  } catch (error) {\n    console.error(\"Daily scheduler API error:\", error);\n    return json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\"\n    }, { status: 500 });\n  }\n};\nconst POST = async ({ request }) => {\n  try {\n    const { action, config } = await request.json();\n    const scheduler = getDailyScheduler();\n    switch (action) {\n      case \"start\":\n        scheduler.start();\n        return json({\n          success: true,\n          message: \"Daily scheduler started\"\n        });\n      case \"stop\":\n        scheduler.stop();\n        return json({\n          success: true,\n          message: \"Daily scheduler stopped\"\n        });\n      case \"trigger\":\n        if (scheduler.getRunningStatus()) {\n          return json({\n            success: false,\n            error: \"Scraping session is already running\"\n          }, { status: 409 });\n        }\n        scheduler.triggerManualScraping().catch(console.error);\n        return json({\n          success: true,\n          message: \"Manual scraping session triggered\"\n        });\n      case \"update-config\":\n        if (!config) {\n          return json({\n            success: false,\n            error: \"Configuration object is required\"\n          }, { status: 400 });\n        }\n        scheduler.updateConfig(config);\n        return json({\n          success: true,\n          message: \"Configuration updated\",\n          data: {\n            updatedConfig: scheduler.getConfig()\n          }\n        });\n      case \"test-setup\":\n        const testConfig = {\n          enabled: true,\n          testMode: true,\n          testAccountLimit: 3,\n          costLimit: 0.01,\n          // $0.01 for testing\n          maxAccountsPerDay: 5,\n          cronSchedule: \"*/5 * * * *\"\n          // Every 5 minutes for testing\n        };\n        scheduler.updateConfig(testConfig);\n        return json({\n          success: true,\n          message: \"Test configuration applied\",\n          data: {\n            testConfig\n          }\n        });\n      case \"production-setup\":\n        const prodConfig = {\n          enabled: true,\n          testMode: false,\n          maxAccountsPerDay: 100,\n          costLimit: 0.2,\n          // $0.20 daily\n          cronSchedule: \"0 9 * * *\",\n          // 9 AM daily\n          prioritizeOwnedAccounts: true\n        };\n        scheduler.updateConfig(prodConfig);\n        return json({\n          success: true,\n          message: \"Production configuration applied\",\n          data: {\n            productionConfig: prodConfig\n          }\n        });\n      default:\n        return json({\n          success: false,\n          error: \"Invalid action. Valid actions: start, stop, trigger, update-config, test-setup, production-setup\"\n        }, { status: 400 });\n    }\n  } catch (error) {\n    console.error(\"Daily scheduler API error:\", error);\n    return json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\"\n    }, { status: 500 });\n  }\n};\nexport {\n  GET,\n  POST\n};\n"],"names":[],"mappings":"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"}