{"version":3,"file":"_server.ts-DSIhPayR.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/auth/check-ip/_server.ts.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { g as getIPWhitelistConfig, e as extractPublicIP } from \"../../../../../chunks/ip-utils.js\";\nimport pg from \"pg\";\nconst { Pool } = pg;\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === \"production\" ? { rejectUnauthorized: false } : false\n});\nconst GET = async ({ request, url }) => {\n  try {\n    const config = getIPWhitelistConfig();\n    const extractedIP = extractPublicIP(request);\n    if (!extractedIP) {\n      return json({\n        success: true,\n        ip: null,\n        isPublic: false,\n        source: \"unknown\",\n        isWhitelisted: false,\n        reason: \"Could not determine public IP address\",\n        config: {\n          enabled: config.enabled,\n          mode: config.mode\n        }\n      });\n    }\n    const { ip: publicIP, source } = extractedIP;\n    let isWhitelisted = false;\n    let matchedRules = [];\n    let groups = [];\n    let expiresAt = null;\n    if (config.enabled) {\n      const client = await pool.connect();\n      try {\n        const query = `\n\t\t\t\t\tSELECT \n\t\t\t\t\t\tiw.id,\n\t\t\t\t\t\tiw.address,\n\t\t\t\t\t\tiw.description,\n\t\t\t\t\t\tiw.user_id,\n\t\t\t\t\t\tiw.expires_at,\n\t\t\t\t\t\tiwg.group_name\n\t\t\t\t\tFROM ip_whitelist iw\n\t\t\t\t\tLEFT JOIN ip_whitelist_group_members iwgm ON iw.id = iwgm.whitelist_id\n\t\t\t\t\tLEFT JOIN ip_whitelist_groups iwg ON iwgm.group_id = iwg.id AND iwg.is_active = true\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tiw.is_active = true\n\t\t\t\t\t\tAND (iw.expires_at IS NULL OR iw.expires_at > NOW())\n\t\t\t\t\tORDER BY \n\t\t\t\t\t\tiw.user_id NULLS LAST,\n\t\t\t\t\t\tiw.id\n\t\t\t\t`;\n        const result = await client.query(query);\n        for (const row of result.rows) {\n          if (row.address === publicIP || row.address === `${publicIP}/32` || row.address === `${publicIP}/128` || publicIP.startsWith(row.address.split(\"/\")[0])) {\n            isWhitelisted = true;\n            matchedRules.push({\n              id: row.id,\n              address: row.address,\n              description: row.description,\n              isGlobal: row.user_id === null,\n              userId: row.user_id\n            });\n            if (row.group_name && !groups.includes(row.group_name)) {\n              groups.push(row.group_name);\n            }\n            if (row.expires_at) {\n              expiresAt = row.expires_at;\n            }\n          }\n        }\n      } finally {\n        client.release();\n      }\n    }\n    let recentAttempts = 0;\n    let isRateLimited = false;\n    if (config.enabled) {\n      const client = await pool.connect();\n      try {\n        const attemptsResult = await client.query(\n          `SELECT COUNT(*) as count \n\t\t\t\t\t FROM ip_access_logs \n\t\t\t\t\t WHERE public_ip = $1 \n\t\t\t\t\t AND timestamp > NOW() - INTERVAL '1 hour'`,\n          [publicIP]\n        );\n        recentAttempts = parseInt(attemptsResult.rows[0].count);\n        const rateLimitResult = await client.query(\n          `SELECT is_blocked, blocked_until \n\t\t\t\t\t FROM ip_rate_limits \n\t\t\t\t\t WHERE ip_address = $1`,\n          [publicIP]\n        );\n        if (rateLimitResult.rows.length > 0) {\n          const rateLimitRow = rateLimitResult.rows[0];\n          isRateLimited = rateLimitRow.is_blocked && rateLimitRow.blocked_until && new Date(rateLimitRow.blocked_until) > /* @__PURE__ */ new Date();\n        }\n      } finally {\n        client.release();\n      }\n    }\n    return json({\n      success: true,\n      ip: publicIP,\n      source,\n      isPublic: extractedIP.isPublic,\n      version: extractedIP.version,\n      isWhitelisted,\n      matchedRules,\n      groups,\n      expiresAt,\n      config: {\n        enabled: config.enabled,\n        mode: config.mode,\n        devBypass: config.devBypass && process.env.NODE_ENV === \"development\"\n      },\n      security: {\n        recentAttempts,\n        isRateLimited\n      }\n    });\n  } catch (error) {\n    console.error(\"Check IP API error:\", error);\n    return json(\n      {\n        success: false,\n        error: \"Internal server error\"\n      },\n      { status: 500 }\n    );\n  }\n};\nconst POST = async ({ request }) => {\n  try {\n    const { ip } = await request.json();\n    if (!ip) {\n      return json(\n        {\n          success: false,\n          error: \"IP address is required\"\n        },\n        { status: 400 }\n      );\n    }\n    const config = getIPWhitelistConfig();\n    let isWhitelisted = false;\n    let matchedRules = [];\n    if (config.enabled) {\n      const client = await pool.connect();\n      try {\n        const query = `\n\t\t\t\t\tSELECT \n\t\t\t\t\t\tiw.id,\n\t\t\t\t\t\tiw.address,\n\t\t\t\t\t\tiw.description,\n\t\t\t\t\t\tiw.user_id,\n\t\t\t\t\t\tiw.expires_at\n\t\t\t\t\tFROM ip_whitelist iw\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tiw.is_active = true\n\t\t\t\t\t\tAND (iw.expires_at IS NULL OR iw.expires_at > NOW())\n\t\t\t\t\tORDER BY \n\t\t\t\t\t\tiw.user_id NULLS LAST,\n\t\t\t\t\t\tiw.id\n\t\t\t\t`;\n        const result = await client.query(query);\n        for (const row of result.rows) {\n          if (row.address === ip || row.address === `${ip}/32` || row.address === `${ip}/128` || ip.startsWith(row.address.split(\"/\")[0])) {\n            isWhitelisted = true;\n            matchedRules.push({\n              id: row.id,\n              address: row.address,\n              description: row.description,\n              isGlobal: row.user_id === null,\n              userId: row.user_id\n            });\n          }\n        }\n      } finally {\n        client.release();\n      }\n    }\n    return json({\n      success: true,\n      ip,\n      isWhitelisted,\n      matchedRules,\n      config: {\n        enabled: config.enabled,\n        mode: config.mode\n      }\n    });\n  } catch (error) {\n    console.error(\"Check IP POST API error:\", error);\n    return json(\n      {\n        success: false,\n        error: \"Internal server error\"\n      },\n      { status: 500 }\n    );\n  }\n};\nexport {\n  GET,\n  POST\n};\n"],"names":[],"mappings":"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"}