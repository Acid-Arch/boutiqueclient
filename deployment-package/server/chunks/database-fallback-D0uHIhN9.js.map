{"version":3,"file":"database-fallback-D0uHIhN9.js","sources":["../../../.svelte-kit/adapter-node/chunks/database-fallback.js"],"sourcesContent":["import pg from \"pg\";\nimport { m as monitoredQuery } from \"./db-security-logger.js\";\nimport { A, a, C, D, b, c, g } from \"./status.js\";\nconst { Pool } = pg;\nconst sslRequired = process.env.DATABASE_URL?.includes(\"sslmode=require\") && !process.env.DATABASE_URL?.includes(\"sslmode=disable\");\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL || (() => {\n    throw new Error(\"DATABASE_URL environment variable is required\");\n  })(),\n  max: parseInt(process.env.DB_POOL_MAX || \"20\"),\n  // Configurable connection pool size\n  min: parseInt(process.env.DB_POOL_MIN || \"5\"),\n  idleTimeoutMillis: parseInt(process.env.DB_IDLE_TIMEOUT || \"30000\"),\n  connectionTimeoutMillis: parseInt(process.env.DB_CONNECTION_TIMEOUT || \"5000\"),\n  statement_timeout: parseInt(process.env.DB_STATEMENT_TIMEOUT || \"30000\"),\n  query_timeout: parseInt(process.env.DB_QUERY_TIMEOUT || \"30000\"),\n  // Enhanced SSL configuration for security\n  ssl: sslRequired ? {\n    rejectUnauthorized: process.env.NODE_ENV === \"production\",\n    // Strict in production\n    checkServerIdentity: process.env.NODE_ENV === \"production\" ? void 0 : () => void 0,\n    ca: process.env.DB_SSL_CA_CERT,\n    // Support for CA certificate\n    cert: process.env.DB_SSL_CLIENT_CERT,\n    // Client certificate\n    key: process.env.DB_SSL_CLIENT_KEY\n    // Client private key\n  } : false\n});\npool.on(\"error\", (err, client) => {\n  console.error(\"Unexpected database error on idle client:\", err);\n});\npool.on(\"connect\", (client) => {\n  console.log(\"Database connection established via fallback pool\");\n});\nasync function withRetry(operation, maxRetries = 3) {\n  let lastError = null;\n  for (let i = 0; i <= maxRetries; i++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error;\n      if (i < maxRetries && isRetryableError(error)) {\n        const delay = Math.pow(2, i) * 1e3;\n        console.warn(`Database operation failed, retrying in ${delay}ms (attempt ${i + 1}/${maxRetries + 1}):`, error);\n        await new Promise((resolve) => setTimeout(resolve, delay));\n      } else {\n        break;\n      }\n    }\n  }\n  throw lastError || new Error(\"Operation failed after retries\");\n}\nfunction isRetryableError(error) {\n  if (!error) return false;\n  const retryableCodes = [\"ECONNRESET\", \"ENOTFOUND\", \"ETIMEDOUT\", \"ECONNREFUSED\"];\n  return retryableCodes.includes(error.code) || error instanceof Error && error.message.includes(\"connection\");\n}\nasync function getAccountStats() {\n  const client = await pool.connect();\n  try {\n    const totalResult = await client.query(\"SELECT COUNT(*) as total FROM ig_accounts\");\n    const statusResult = await client.query(`\n\t\t\tSELECT status, COUNT(*) as count \n\t\t\tFROM ig_accounts \n\t\t\tGROUP BY status \n\t\t\tORDER BY count DESC\n\t\t`);\n    const total = parseInt(totalResult.rows[0].total);\n    const byStatus = statusResult.rows.reduce((acc, row) => {\n      acc[row.status] = parseInt(row.count);\n      return acc;\n    }, {});\n    return { total, byStatus };\n  } finally {\n    client.release();\n  }\n}\nfunction buildWhereClause(where) {\n  const conditions = [];\n  const params = [];\n  let paramCount = 0;\n  function addCondition(key, value, operator = \"=\") {\n    const dbKey = key.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n    if (value === null) {\n      conditions.push(`${dbKey} IS NULL`);\n    } else if (value !== void 0) {\n      paramCount++;\n      if (operator === \"IN\" && Array.isArray(value)) {\n        const placeholders = value.map((_, index) => {\n          return `$${paramCount + index}`;\n        });\n        conditions.push(`${dbKey} IN (${placeholders.join(\", \")})`);\n        params.push(...value);\n        paramCount += value.length - 1;\n      } else {\n        conditions.push(`${dbKey} ${operator} $${paramCount}`);\n        params.push(value);\n      }\n    }\n  }\n  function processWhereConditions(whereObj) {\n    for (const [key, value] of Object.entries(whereObj)) {\n      if (key === \"OR\") {\n        const orConditions = [];\n        for (const orCondition of value) {\n          const { whereClause: subWhere, params: subParams } = buildWhereClause(orCondition);\n          if (subWhere) {\n            orConditions.push(`(${subWhere})`);\n            params.push(...subParams);\n            paramCount += subParams.length;\n          }\n        }\n        if (orConditions.length > 0) {\n          conditions.push(`(${orConditions.join(\" OR \")})`);\n        }\n      } else if (key === \"AND\") {\n        for (const andCondition of value) {\n          for (const subCondition of andCondition.AND || [andCondition]) {\n            processWhereConditions(subCondition);\n          }\n        }\n      } else if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n        if (\"in\" in value) {\n          addCondition(key, value.in, \"IN\");\n        } else if (\"notIn\" in value) {\n          addCondition(key, value.notIn, \"NOT IN\");\n        } else if (\"not\" in value) {\n          addCondition(key, value.not, \"!=\");\n        } else if (\"contains\" in value) {\n          paramCount++;\n          const dbKey = key.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n          const valueObj = value;\n          const ilike = valueObj.mode === \"insensitive\" ? \"ILIKE\" : \"LIKE\";\n          conditions.push(`${dbKey} ${ilike} $${paramCount}`);\n          params.push(`%${valueObj.contains}%`);\n        } else if (\"gte\" in value) {\n          addCondition(key, value.gte, \">=\");\n        } else if (\"lte\" in value) {\n          addCondition(key, value.lte, \"<=\");\n        } else if (\"gt\" in value) {\n          addCondition(key, value.gt, \">\");\n        } else if (\"lt\" in value) {\n          addCondition(key, value.lt, \"<\");\n        }\n      } else {\n        addCondition(key, value);\n      }\n    }\n  }\n  processWhereConditions(where);\n  return {\n    whereClause: conditions.join(\" AND \"),\n    params\n  };\n}\nfunction buildSetClause(data, startParamCount = 0) {\n  const setClauses = [];\n  const params = [];\n  let paramCount = startParamCount;\n  for (const [key, value] of Object.entries(data)) {\n    if (value !== void 0 && key !== \"updatedAt\") {\n      paramCount++;\n      const dbKey = key.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n      setClauses.push(`${dbKey} = $${paramCount}`);\n      params.push(value);\n    }\n  }\n  return {\n    setClause: setClauses.join(\", \"),\n    params\n  };\n}\nfunction buildOrderByClause(orderBy) {\n  const clauses = [];\n  for (const [key, direction] of Object.entries(orderBy)) {\n    const dbKey = key.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n    clauses.push(`${dbKey} ${direction}`);\n  }\n  return clauses.join(\", \");\n}\nfunction buildCloneWhereClause(where) {\n  const conditions = [];\n  const params = [];\n  let paramCount = 0;\n  function addCondition(key, value, operator = \"=\") {\n    let dbKey = key;\n    switch (key) {\n      case \"deviceId\":\n        dbKey = \"device_id\";\n        break;\n      case \"deviceId_cloneNumber\":\n        if (typeof value === \"object\" && value.deviceId && value.cloneNumber !== void 0) {\n          paramCount++;\n          conditions.push(`device_id = $${paramCount}`);\n          params.push(value.deviceId);\n          paramCount++;\n          conditions.push(`clone_number = $${paramCount}`);\n          params.push(value.cloneNumber);\n        }\n        return;\n      case \"cloneNumber\":\n        dbKey = \"clone_number\";\n        break;\n      case \"cloneStatus\":\n        dbKey = \"clone_status\";\n        break;\n      case \"cloneHealth\":\n        dbKey = \"clone_health\";\n        break;\n      case \"currentAccount\":\n        dbKey = \"current_account\";\n        break;\n      case \"packageName\":\n        dbKey = \"package_name\";\n        break;\n      case \"lastScanned\":\n        dbKey = \"last_scanned\";\n        break;\n      case \"updatedAt\":\n        dbKey = \"updated_at\";\n        break;\n    }\n    if (value === null) {\n      conditions.push(`${dbKey} IS NULL`);\n    } else if (value !== void 0) {\n      paramCount++;\n      if (operator === \"IN\" && Array.isArray(value)) {\n        const placeholders = value.map((_, index) => {\n          return `$${paramCount + index}`;\n        });\n        conditions.push(`${dbKey} IN (${placeholders.join(\", \")})`);\n        params.push(...value);\n        paramCount += value.length - 1;\n      } else {\n        conditions.push(`${dbKey} ${operator} $${paramCount}`);\n        params.push(value);\n      }\n    }\n  }\n  function processWhereConditions(whereObj) {\n    for (const [key, value] of Object.entries(whereObj)) {\n      if (key === \"OR\") {\n        const orConditions = [];\n        for (const orCondition of value) {\n          const { whereClause: subWhere, params: subParams } = buildCloneWhereClause(orCondition);\n          if (subWhere) {\n            orConditions.push(`(${subWhere})`);\n            params.push(...subParams);\n            paramCount += subParams.length;\n          }\n        }\n        if (orConditions.length > 0) {\n          conditions.push(`(${orConditions.join(\" OR \")})`);\n        }\n      } else if (key === \"AND\") {\n        for (const andCondition of value) {\n          for (const subCondition of andCondition.AND || [andCondition]) {\n            processWhereConditions(subCondition);\n          }\n        }\n      } else if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n        if (\"in\" in value) {\n          addCondition(key, value.in, \"IN\");\n        } else if (\"notIn\" in value) {\n          addCondition(key, value.notIn, \"NOT IN\");\n        } else if (\"not\" in value) {\n          addCondition(key, value.not, \"!=\");\n        }\n      } else {\n        addCondition(key, value);\n      }\n    }\n  }\n  processWhereConditions(where);\n  return {\n    whereClause: conditions.join(\" AND \"),\n    params\n  };\n}\nfunction buildCloneSetClause(data, startParamCount = 0) {\n  const setClauses = [];\n  const params = [];\n  let paramCount = startParamCount;\n  for (const [key, value] of Object.entries(data)) {\n    if (value !== void 0 && key !== \"updatedAt\") {\n      paramCount++;\n      let dbKey = key;\n      switch (key) {\n        case \"cloneStatus\":\n          dbKey = \"clone_status\";\n          break;\n        case \"currentAccount\":\n          dbKey = \"current_account\";\n          break;\n      }\n      setClauses.push(`${dbKey} = $${paramCount}`);\n      params.push(value);\n    }\n  }\n  return {\n    setClause: setClauses.join(\", \"),\n    params\n  };\n}\nfunction buildCloneOrderByClause(orderBy) {\n  const clauses = [];\n  if (Array.isArray(orderBy)) {\n    for (const orderItem of orderBy) {\n      for (const [key, direction] of Object.entries(orderItem)) {\n        let dbKey = key;\n        switch (key) {\n          case \"deviceId\":\n            dbKey = \"device_id\";\n            break;\n          case \"cloneNumber\":\n            dbKey = \"clone_number\";\n            break;\n        }\n        clauses.push(`${dbKey} ${direction}`);\n      }\n    }\n  } else {\n    for (const [key, direction] of Object.entries(orderBy)) {\n      let dbKey = key;\n      switch (key) {\n        case \"deviceId\":\n          dbKey = \"device_id\";\n          break;\n        case \"cloneNumber\":\n          dbKey = \"clone_number\";\n          break;\n      }\n      clauses.push(`${dbKey} ${direction}`);\n    }\n  }\n  return clauses.join(\", \");\n}\nfunction mapDbRowToAccount(row) {\n  return {\n    id: row.id,\n    recordId: row.record_id,\n    instagramUsername: row.instagram_username,\n    instagramPassword: row.instagram_password,\n    emailAddress: row.email_address,\n    emailPassword: row.email_password,\n    status: row.status,\n    imapStatus: row.imap_status,\n    assignedDeviceId: row.assigned_device_id,\n    assignedCloneNumber: row.assigned_clone_number,\n    assignedPackageName: row.assigned_package_name,\n    assignmentTimestamp: row.assignment_timestamp,\n    loginTimestamp: row.login_timestamp,\n    createdAt: row.created_at,\n    updatedAt: row.updated_at\n  };\n}\nfunction mapDbRowToClone(row) {\n  return {\n    deviceId: row.device_id,\n    deviceName: row.device_name,\n    cloneNumber: row.clone_number,\n    cloneStatus: row.clone_status,\n    cloneHealth: row.clone_health,\n    currentAccount: row.current_account,\n    packageName: row.package_name,\n    lastScanned: row.last_scanned,\n    updatedAt: row.updated_at,\n    createdAt: row.created_at\n  };\n}\nconst prisma = {\n  igAccount: {\n    count: async (options = {}) => {\n      const client = await pool.connect();\n      try {\n        let query2 = \"SELECT COUNT(*) as count FROM ig_accounts\";\n        const { whereClause, params } = buildWhereClause(options.where || {});\n        if (whereClause) {\n          query2 += ` WHERE ${whereClause}`;\n        }\n        const result = await client.query(query2, params);\n        return parseInt(result.rows[0].count);\n      } finally {\n        client.release();\n      }\n    },\n    findMany: async (options = {}) => {\n      const client = await pool.connect();\n      try {\n        let query2 = \"SELECT * FROM ig_accounts\";\n        const { whereClause, params } = buildWhereClause(options.where || {});\n        let paramCount = params.length;\n        if (whereClause) {\n          query2 += ` WHERE ${whereClause}`;\n        }\n        if (options.orderBy) {\n          const orderByClauses = buildOrderByClause(options.orderBy);\n          if (orderByClauses) {\n            query2 += ` ORDER BY ${orderByClauses}`;\n          }\n        }\n        if (options.take) {\n          paramCount++;\n          query2 += ` LIMIT $${paramCount}`;\n          params.push(options.take);\n        }\n        if (options.skip) {\n          paramCount++;\n          query2 += ` OFFSET $${paramCount}`;\n          params.push(options.skip);\n        }\n        const result = await client.query(query2, params);\n        return result.rows.map(mapDbRowToAccount);\n      } finally {\n        client.release();\n      }\n    },\n    findFirst: async (options = {}) => {\n      const client = await pool.connect();\n      try {\n        let query2 = \"SELECT * FROM ig_accounts\";\n        const { whereClause, params } = buildWhereClause(options.where || {});\n        let paramCount = params.length;\n        if (whereClause) {\n          query2 += ` WHERE ${whereClause}`;\n        }\n        if (options.orderBy) {\n          const orderByClauses = buildOrderByClause(options.orderBy);\n          if (orderByClauses) {\n            query2 += ` ORDER BY ${orderByClauses}`;\n          }\n        }\n        query2 += \" LIMIT 1\";\n        const result = await client.query(query2, params);\n        return result.rows.length > 0 ? mapDbRowToAccount(result.rows[0]) : null;\n      } finally {\n        client.release();\n      }\n    },\n    update: async (options) => {\n      const client = await pool.connect();\n      try {\n        const { whereClause, params: whereParams } = buildWhereClause(options.where);\n        const { setClause, params: setParams } = buildSetClause(options.data, whereParams.length);\n        if (!whereClause || !setClause) {\n          throw new Error(\"Invalid update parameters\");\n        }\n        const query2 = `UPDATE ig_accounts SET ${setClause}, updated_at = NOW() WHERE ${whereClause} RETURNING *`;\n        const allParams = [...whereParams, ...setParams];\n        const result = await client.query(query2, allParams);\n        return result.rows.length > 0 ? mapDbRowToAccount(result.rows[0]) : null;\n      } finally {\n        client.release();\n      }\n    },\n    updateMany: async (options) => {\n      const client = await pool.connect();\n      try {\n        const { whereClause, params: whereParams } = buildWhereClause(options.where);\n        const { setClause, params: setParams } = buildSetClause(options.data, whereParams.length);\n        if (!whereClause || !setClause) {\n          throw new Error(\"Invalid updateMany parameters\");\n        }\n        const query2 = `UPDATE ig_accounts SET ${setClause}, updated_at = NOW() WHERE ${whereClause}`;\n        const allParams = [...whereParams, ...setParams];\n        const result = await client.query(query2, allParams);\n        return { count: result.rowCount || 0 };\n      } finally {\n        client.release();\n      }\n    },\n    deleteMany: async (options) => {\n      const client = await pool.connect();\n      try {\n        const { whereClause, params } = buildWhereClause(options.where);\n        if (!whereClause) {\n          throw new Error(\"DELETE requires WHERE clause for safety\");\n        }\n        const query2 = `DELETE FROM ig_accounts WHERE ${whereClause}`;\n        const result = await client.query(query2, params);\n        return { count: result.rowCount || 0 };\n      } finally {\n        client.release();\n      }\n    },\n    groupBy: async (options) => {\n      const client = await pool.connect();\n      try {\n        const { whereClause, params } = buildWhereClause(options.where || {});\n        const groupByFields = options.by.map((field) => {\n          return field.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n        });\n        let selectClause = groupByFields.join(\", \");\n        if (options._count) {\n          for (const [countField, _] of Object.entries(options._count)) {\n            const dbField = countField.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n            selectClause += `, COUNT(${dbField}) as _count_${dbField}`;\n          }\n        }\n        let query2 = `SELECT ${selectClause} FROM ig_accounts`;\n        if (whereClause) {\n          query2 += ` WHERE ${whereClause}`;\n        }\n        query2 += ` GROUP BY ${groupByFields.join(\", \")}`;\n        const result = await client.query(query2, params);\n        return result.rows.map((row) => {\n          const transformed = {};\n          options.by.forEach((field, index) => {\n            const dbField = groupByFields[index];\n            transformed[field] = row[dbField];\n          });\n          if (options._count) {\n            transformed._count = {};\n            for (const countField of Object.keys(options._count)) {\n              const dbField = countField.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n              transformed._count[countField] = parseInt(row[`_count_${dbField}`]);\n            }\n          }\n          return transformed;\n        });\n      } finally {\n        client.release();\n      }\n    }\n  },\n  cloneInventory: {\n    count: async (options = {}) => {\n      const client = await pool.connect();\n      try {\n        let query2 = \"SELECT COUNT(*) as count FROM clone_inventory\";\n        const { whereClause, params } = buildCloneWhereClause(options.where || {});\n        if (whereClause) {\n          query2 += ` WHERE ${whereClause}`;\n        }\n        const result = await client.query(query2, params);\n        return parseInt(result.rows[0].count);\n      } finally {\n        client.release();\n      }\n    },\n    findMany: async (options = {}) => {\n      const client = await pool.connect();\n      try {\n        let query2 = \"SELECT * FROM clone_inventory\";\n        const { whereClause, params } = buildCloneWhereClause(options.where || {});\n        let paramCount = params.length;\n        if (whereClause) {\n          query2 += ` WHERE ${whereClause}`;\n        }\n        if (options.orderBy) {\n          const orderByClauses = buildCloneOrderByClause(options.orderBy);\n          if (orderByClauses) {\n            query2 += ` ORDER BY ${orderByClauses}`;\n          }\n        }\n        if (options.take) {\n          paramCount++;\n          query2 += ` LIMIT $${paramCount}`;\n          params.push(options.take);\n        }\n        if (options.skip) {\n          paramCount++;\n          query2 += ` OFFSET $${paramCount}`;\n          params.push(options.skip);\n        }\n        const result = await client.query(query2, params);\n        return result.rows.map(mapDbRowToClone);\n      } finally {\n        client.release();\n      }\n    },\n    update: async (options) => {\n      const client = await pool.connect();\n      try {\n        const { whereClause, params: whereParams } = buildCloneWhereClause(options.where);\n        const { setClause, params: setParams } = buildCloneSetClause(options.data, whereParams.length);\n        if (!whereClause || !setClause) {\n          throw new Error(\"Invalid clone update parameters\");\n        }\n        const query2 = `UPDATE clone_inventory SET ${setClause}, updated_at = NOW() WHERE ${whereClause} RETURNING *`;\n        const allParams = [...whereParams, ...setParams];\n        const result = await client.query(query2, allParams);\n        return result.rows.length > 0 ? mapDbRowToClone(result.rows[0]) : null;\n      } finally {\n        client.release();\n      }\n    },\n    updateMany: async (options) => {\n      const client = await pool.connect();\n      try {\n        const { whereClause, params: whereParams } = buildCloneWhereClause(options.where);\n        const { setClause, params: setParams } = buildCloneSetClause(options.data, whereParams.length);\n        if (!whereClause || !setClause) {\n          throw new Error(\"Invalid clone updateMany parameters\");\n        }\n        const query2 = `UPDATE clone_inventory SET ${setClause}, updated_at = NOW() WHERE ${whereClause}`;\n        const allParams = [...whereParams, ...setParams];\n        const result = await client.query(query2, allParams);\n        return { count: result.rowCount || 0 };\n      } finally {\n        client.release();\n      }\n    }\n  },\n  // Transaction support\n  $transaction: async (callback) => {\n    const client = await pool.connect();\n    try {\n      await client.query(\"BEGIN\");\n      const tx = {\n        igAccount: {\n          update: async (options) => {\n            const { whereClause, params: whereParams } = buildWhereClause(options.where);\n            const { setClause, params: setParams } = buildSetClause(options.data, whereParams.length);\n            if (!whereClause || !setClause) {\n              throw new Error(\"Invalid update parameters\");\n            }\n            const query2 = `UPDATE ig_accounts SET ${setClause}, updated_at = NOW() WHERE ${whereClause} RETURNING *`;\n            const allParams = [...whereParams, ...setParams];\n            const result2 = await client.query(query2, allParams);\n            return result2.rows.length > 0 ? mapDbRowToAccount(result2.rows[0]) : null;\n          },\n          updateMany: async (options) => {\n            const { whereClause, params: whereParams } = buildWhereClause(options.where);\n            const { setClause, params: setParams } = buildSetClause(options.data, whereParams.length);\n            if (!whereClause || !setClause) {\n              throw new Error(\"Invalid updateMany parameters\");\n            }\n            const query2 = `UPDATE ig_accounts SET ${setClause}, updated_at = NOW() WHERE ${whereClause}`;\n            const allParams = [...whereParams, ...setParams];\n            const result2 = await client.query(query2, allParams);\n            return { count: result2.rowCount || 0 };\n          },\n          deleteMany: async (options) => {\n            const { whereClause, params } = buildWhereClause(options.where);\n            if (!whereClause) {\n              throw new Error(\"DELETE requires WHERE clause for safety\");\n            }\n            const query2 = `DELETE FROM ig_accounts WHERE ${whereClause}`;\n            const result2 = await client.query(query2, params);\n            return { count: result2.rowCount || 0 };\n          },\n          findMany: async (options = {}) => {\n            const { whereClause, params } = buildWhereClause(options.where || {});\n            let paramCount = params.length;\n            let query2 = \"SELECT * FROM ig_accounts\";\n            if (whereClause) {\n              query2 += ` WHERE ${whereClause}`;\n            }\n            const result2 = await client.query(query2, params);\n            return result2.rows.map(mapDbRowToAccount);\n          }\n        },\n        cloneInventory: {\n          update: async (options) => {\n            const { whereClause, params: whereParams } = buildCloneWhereClause(options.where);\n            const { setClause, params: setParams } = buildCloneSetClause(options.data, whereParams.length);\n            if (!whereClause || !setClause) {\n              throw new Error(\"Invalid clone update parameters\");\n            }\n            const query2 = `UPDATE clone_inventory SET ${setClause}, updated_at = NOW() WHERE ${whereClause} RETURNING *`;\n            const allParams = [...whereParams, ...setParams];\n            const result2 = await client.query(query2, allParams);\n            return result2.rows.length > 0 ? mapDbRowToClone(result2.rows[0]) : null;\n          },\n          updateMany: async (options) => {\n            const { whereClause, params: whereParams } = buildCloneWhereClause(options.where);\n            const { setClause, params: setParams } = buildCloneSetClause(options.data, whereParams.length);\n            if (!whereClause || !setClause) {\n              throw new Error(\"Invalid clone updateMany parameters\");\n            }\n            const query2 = `UPDATE clone_inventory SET ${setClause}, updated_at = NOW() WHERE ${whereClause}`;\n            const allParams = [...whereParams, ...setParams];\n            const result2 = await client.query(query2, allParams);\n            return { count: result2.rowCount || 0 };\n          }\n        }\n      };\n      const result = await callback(tx);\n      await client.query(\"COMMIT\");\n      return result;\n    } catch (error) {\n      await client.query(\"ROLLBACK\");\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n};\nasync function getAccounts(limit = 20, offset = 0, statusFilter, searchQuery, advancedFilters) {\n  const client = await pool.connect();\n  try {\n    let query2 = \"SELECT * FROM ig_accounts\";\n    const params = [];\n    const conditions = [];\n    const searchClauses = [];\n    let paramCount = 0;\n    if (statusFilter && !advancedFilters?.statuses) {\n      paramCount++;\n      conditions.push(`status = $${paramCount}`);\n      params.push(statusFilter);\n    }\n    if (searchQuery && !advancedFilters?.search) {\n      paramCount++;\n      searchClauses.push(`instagram_username ILIKE $${paramCount}`);\n      params.push(`%${searchQuery}%`);\n      paramCount++;\n      searchClauses.push(`email_address ILIKE $${paramCount}`);\n      params.push(`%${searchQuery}%`);\n    }\n    if (advancedFilters) {\n      if (advancedFilters.search) {\n        paramCount++;\n        searchClauses.push(`instagram_username ILIKE $${paramCount}`);\n        params.push(`%${advancedFilters.search}%`);\n        paramCount++;\n        searchClauses.push(`email_address ILIKE $${paramCount}`);\n        params.push(`%${advancedFilters.search}%`);\n        paramCount++;\n        searchClauses.push(`assigned_device_id ILIKE $${paramCount}`);\n        params.push(`%${advancedFilters.search}%`);\n      }\n      if (advancedFilters.statuses && advancedFilters.statuses.length > 0) {\n        const statusPlaceholders = [];\n        for (const status of advancedFilters.statuses) {\n          paramCount++;\n          statusPlaceholders.push(`$${paramCount}`);\n          params.push(status);\n        }\n        conditions.push(`status IN (${statusPlaceholders.join(\", \")})`);\n      }\n      if (advancedFilters.deviceAssignment) {\n        switch (advancedFilters.deviceAssignment) {\n          case \"assigned\":\n            conditions.push(\"assigned_device_id IS NOT NULL\");\n            break;\n          case \"unassigned\":\n            conditions.push(\"assigned_device_id IS NULL\");\n            break;\n          case \"specific\":\n            if (advancedFilters.specificDevice) {\n              paramCount++;\n              conditions.push(`assigned_device_id = $${paramCount}`);\n              params.push(advancedFilters.specificDevice);\n            }\n            break;\n        }\n      }\n      if (advancedFilters.createdDateFrom) {\n        paramCount++;\n        conditions.push(`created_at >= $${paramCount}`);\n        params.push(advancedFilters.createdDateFrom);\n      }\n      if (advancedFilters.createdDateTo) {\n        const endOfDay = new Date(advancedFilters.createdDateTo);\n        endOfDay.setHours(23, 59, 59, 999);\n        paramCount++;\n        conditions.push(`created_at <= $${paramCount}`);\n        params.push(endOfDay);\n      }\n      if (advancedFilters.loginDateFrom) {\n        paramCount++;\n        conditions.push(`login_timestamp >= $${paramCount}`);\n        params.push(advancedFilters.loginDateFrom);\n      }\n      if (advancedFilters.loginDateTo) {\n        const endOfDay = new Date(advancedFilters.loginDateTo);\n        endOfDay.setHours(23, 59, 59, 999);\n        paramCount++;\n        conditions.push(`login_timestamp <= $${paramCount}`);\n        params.push(endOfDay);\n      }\n      if (advancedFilters.imapStatus && advancedFilters.imapStatus !== \"all\") {\n        paramCount++;\n        conditions.push(`imap_status = $${paramCount}`);\n        params.push(advancedFilters.imapStatus);\n      }\n    }\n    if (searchClauses.length > 0) {\n      conditions.push(`(${searchClauses.join(\" OR \")})`);\n    }\n    if (conditions.length > 0) {\n      query2 += ` WHERE ${conditions.join(\" AND \")}`;\n    }\n    query2 += ` ORDER BY created_at DESC`;\n    if (limit > 0) {\n      paramCount++;\n      query2 += ` LIMIT $${paramCount}`;\n      params.push(limit);\n    }\n    if (offset > 0) {\n      paramCount++;\n      query2 += ` OFFSET $${paramCount}`;\n      params.push(offset);\n    }\n    const result = await client.query(query2, params);\n    return result.rows.map((row) => ({\n      id: row.id,\n      recordId: row.record_id,\n      instagramUsername: row.instagram_username,\n      instagramPassword: row.instagram_password,\n      emailAddress: row.email_address,\n      emailPassword: row.email_password,\n      status: row.status,\n      imapStatus: row.imap_status,\n      assignedDeviceId: row.assigned_device_id,\n      assignedCloneNumber: row.assigned_clone_number,\n      assignedPackageName: row.assigned_package_name,\n      assignmentTimestamp: row.assignment_timestamp,\n      loginTimestamp: row.login_timestamp,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    }));\n  } finally {\n    client.release();\n  }\n}\nasync function getAccountById(id) {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(\"SELECT * FROM ig_accounts WHERE id = $1\", [id]);\n    if (!result.rows[0]) return null;\n    const row = result.rows[0];\n    return {\n      id: row.id,\n      recordId: row.record_id,\n      instagramUsername: row.instagram_username,\n      instagramPassword: row.instagram_password,\n      emailAddress: row.email_address,\n      emailPassword: row.email_password,\n      status: row.status,\n      imapStatus: row.imap_status,\n      assignedDeviceId: row.assigned_device_id,\n      assignedCloneNumber: row.assigned_clone_number,\n      assignedPackageName: row.assigned_package_name,\n      assignmentTimestamp: row.assignment_timestamp,\n      loginTimestamp: row.login_timestamp,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    };\n  } finally {\n    client.release();\n  }\n}\nasync function createAccount(data) {\n  const client = await pool.connect();\n  try {\n    const query2 = `\n\t\t\tINSERT INTO ig_accounts (\n\t\t\t\trecord_id, instagram_username, instagram_password, \n\t\t\t\temail_address, email_password, status, imap_status,\n\t\t\t\tassigned_device_id, assigned_clone_number, assigned_package_name,\n\t\t\t\tassignment_timestamp, created_at, updated_at\n\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NOW(), NOW())\n\t\t\tRETURNING *\n\t\t`;\n    const values = [\n      data.recordId || null,\n      data.instagramUsername,\n      data.instagramPassword,\n      data.emailAddress,\n      data.emailPassword,\n      data.status || \"Unused\",\n      data.imapStatus || \"On\",\n      data.assignedDeviceId || null,\n      data.assignedCloneNumber || null,\n      data.assignedPackageName || null,\n      data.assignedDeviceId ? /* @__PURE__ */ new Date() : null\n    ];\n    const result = await client.query(query2, values);\n    const row = result.rows[0];\n    return {\n      id: row.id,\n      recordId: row.record_id,\n      instagramUsername: row.instagram_username,\n      instagramPassword: row.instagram_password,\n      emailAddress: row.email_address,\n      emailPassword: row.email_password,\n      status: row.status,\n      imapStatus: row.imap_status,\n      assignedDeviceId: row.assigned_device_id,\n      assignedCloneNumber: row.assigned_clone_number,\n      assignedPackageName: row.assigned_package_name,\n      assignmentTimestamp: row.assignment_timestamp,\n      loginTimestamp: row.login_timestamp,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    };\n  } finally {\n    client.release();\n  }\n}\nasync function updateAccount(id, data) {\n  const client = await pool.connect();\n  try {\n    const updates = [];\n    const values = [];\n    let paramCount = 0;\n    Object.entries(data).forEach(([key, value]) => {\n      if (value !== void 0) {\n        paramCount++;\n        const dbKey = key.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n        updates.push(`${dbKey} = $${paramCount}`);\n        values.push(value);\n      }\n    });\n    if (updates.length === 0) return null;\n    paramCount++;\n    updates.push(`updated_at = NOW()`);\n    values.push(id);\n    const query2 = `\n\t\t\tUPDATE ig_accounts \n\t\t\tSET ${updates.join(\", \")} \n\t\t\tWHERE id = $${paramCount}\n\t\t\tRETURNING *\n\t\t`;\n    const result = await client.query(query2, values);\n    if (!result.rows[0]) return null;\n    const row = result.rows[0];\n    return {\n      id: row.id,\n      recordId: row.record_id,\n      instagramUsername: row.instagram_username,\n      instagramPassword: row.instagram_password,\n      emailAddress: row.email_address,\n      emailPassword: row.email_password,\n      status: row.status,\n      imapStatus: row.imap_status,\n      assignedDeviceId: row.assigned_device_id,\n      assignedCloneNumber: row.assigned_clone_number,\n      assignedPackageName: row.assigned_package_name,\n      assignmentTimestamp: row.assignment_timestamp,\n      loginTimestamp: row.login_timestamp,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    };\n  } finally {\n    client.release();\n  }\n}\nasync function deleteAccount(id) {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(\"DELETE FROM ig_accounts WHERE id = $1 RETURNING *\", [id]);\n    if (!result.rows[0]) return null;\n    const row = result.rows[0];\n    return {\n      id: row.id,\n      recordId: row.record_id,\n      instagramUsername: row.instagram_username,\n      instagramPassword: row.instagram_password,\n      emailAddress: row.email_address,\n      emailPassword: row.email_password,\n      status: row.status,\n      imapStatus: row.imap_status,\n      assignedDeviceId: row.assigned_device_id,\n      assignedCloneNumber: row.assigned_clone_number,\n      assignedPackageName: row.assigned_package_name,\n      assignmentTimestamp: row.assignment_timestamp,\n      loginTimestamp: row.login_timestamp,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    };\n  } finally {\n    client.release();\n  }\n}\nasync function checkUsernameExists(username, excludeId) {\n  const client = await pool.connect();\n  try {\n    let query2 = \"SELECT id FROM ig_accounts WHERE instagram_username = $1\";\n    const params = [username];\n    if (excludeId) {\n      query2 += \" AND id != $2\";\n      params.push(excludeId.toString());\n    }\n    const result = await client.query(query2, params);\n    return result.rows.length > 0;\n  } finally {\n    client.release();\n  }\n}\nasync function getAccountsCount(statusFilter, searchQuery, advancedFilters) {\n  const client = await pool.connect();\n  try {\n    let query2 = \"SELECT COUNT(*) as count FROM ig_accounts\";\n    const params = [];\n    const conditions = [];\n    const searchClauses = [];\n    let paramCount = 0;\n    if (statusFilter && !advancedFilters?.statuses) {\n      paramCount++;\n      conditions.push(`status = $${paramCount}`);\n      params.push(statusFilter);\n    }\n    if (searchQuery && !advancedFilters?.search) {\n      paramCount++;\n      searchClauses.push(`instagram_username ILIKE $${paramCount}`);\n      params.push(`%${searchQuery}%`);\n      paramCount++;\n      searchClauses.push(`email_address ILIKE $${paramCount}`);\n      params.push(`%${searchQuery}%`);\n    }\n    if (advancedFilters) {\n      if (advancedFilters.search) {\n        paramCount++;\n        searchClauses.push(`instagram_username ILIKE $${paramCount}`);\n        params.push(`%${advancedFilters.search}%`);\n        paramCount++;\n        searchClauses.push(`email_address ILIKE $${paramCount}`);\n        params.push(`%${advancedFilters.search}%`);\n        paramCount++;\n        searchClauses.push(`assigned_device_id ILIKE $${paramCount}`);\n        params.push(`%${advancedFilters.search}%`);\n      }\n      if (advancedFilters.statuses && advancedFilters.statuses.length > 0) {\n        const statusPlaceholders = [];\n        for (const status of advancedFilters.statuses) {\n          paramCount++;\n          statusPlaceholders.push(`$${paramCount}`);\n          params.push(status);\n        }\n        conditions.push(`status IN (${statusPlaceholders.join(\", \")})`);\n      }\n      if (advancedFilters.deviceAssignment) {\n        switch (advancedFilters.deviceAssignment) {\n          case \"assigned\":\n            conditions.push(\"assigned_device_id IS NOT NULL\");\n            break;\n          case \"unassigned\":\n            conditions.push(\"assigned_device_id IS NULL\");\n            break;\n          case \"specific\":\n            if (advancedFilters.specificDevice) {\n              paramCount++;\n              conditions.push(`assigned_device_id = $${paramCount}`);\n              params.push(advancedFilters.specificDevice);\n            }\n            break;\n        }\n      }\n      if (advancedFilters.createdDateFrom) {\n        paramCount++;\n        conditions.push(`created_at >= $${paramCount}`);\n        params.push(advancedFilters.createdDateFrom);\n      }\n      if (advancedFilters.createdDateTo) {\n        const endOfDay = new Date(advancedFilters.createdDateTo);\n        endOfDay.setHours(23, 59, 59, 999);\n        paramCount++;\n        conditions.push(`created_at <= $${paramCount}`);\n        params.push(endOfDay);\n      }\n      if (advancedFilters.loginDateFrom) {\n        paramCount++;\n        conditions.push(`login_timestamp >= $${paramCount}`);\n        params.push(advancedFilters.loginDateFrom);\n      }\n      if (advancedFilters.loginDateTo) {\n        const endOfDay = new Date(advancedFilters.loginDateTo);\n        endOfDay.setHours(23, 59, 59, 999);\n        paramCount++;\n        conditions.push(`login_timestamp <= $${paramCount}`);\n        params.push(endOfDay);\n      }\n      if (advancedFilters.imapStatus && advancedFilters.imapStatus !== \"all\") {\n        paramCount++;\n        conditions.push(`imap_status = $${paramCount}`);\n        params.push(advancedFilters.imapStatus);\n      }\n    }\n    if (searchClauses.length > 0) {\n      conditions.push(`(${searchClauses.join(\" OR \")})`);\n    }\n    if (conditions.length > 0) {\n      query2 += ` WHERE ${conditions.join(\" AND \")}`;\n    }\n    const result = await client.query(query2, params);\n    return parseInt(result.rows[0].count);\n  } finally {\n    client.release();\n  }\n}\nasync function getAvailableAccounts(limit = 20) {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(`\n\t\t\tSELECT id, instagram_username, status \n\t\t\tFROM ig_accounts \n\t\t\tWHERE status = 'Unused' \n\t\t\tORDER BY instagram_username \n\t\t\tLIMIT $1\n\t\t`, [limit]);\n    return result.rows.map((row) => ({\n      id: row.id,\n      instagramUsername: row.instagram_username,\n      status: row.status\n    }));\n  } finally {\n    client.release();\n  }\n}\nasync function getDeviceSummaries() {\n  return withRetry(async () => {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\"SELECT * FROM clone_inventory ORDER BY device_id, clone_number\");\n      const deviceMap = /* @__PURE__ */ new Map();\n      result.rows.forEach((clone) => {\n        if (!deviceMap.has(clone.device_id)) {\n          deviceMap.set(clone.device_id, []);\n        }\n        deviceMap.get(clone.device_id).push(clone);\n      });\n      const summaries = [];\n      deviceMap.forEach((clones, deviceId) => {\n        const totalClones = clones.length;\n        const availableClones = clones.filter((c2) => c2.clone_status === \"Available\").length;\n        const assignedClones = clones.filter((c2) => c2.clone_status === \"Assigned\").length;\n        const loggedInClones = clones.filter((c2) => c2.clone_status === \"Logged In\").length;\n        const brokenClones = clones.filter((c2) => c2.clone_status === \"Broken\").length;\n        const deviceStatus = determineDeviceStatus(clones);\n        const deviceName = clones[0].device_name || null;\n        const deviceHealth = clones[0].clone_health || null;\n        const lastScanned = clones.reduce(\n          (latest, clone) => clone.last_scanned > latest ? clone.last_scanned : latest,\n          clones[0].last_scanned\n        );\n        summaries.push({\n          deviceId,\n          deviceName,\n          totalClones,\n          availableClones,\n          assignedClones,\n          loggedInClones,\n          brokenClones,\n          deviceStatus,\n          deviceHealth,\n          lastScanned\n        });\n      });\n      return summaries.sort((a2, b2) => a2.deviceId.localeCompare(b2.deviceId));\n    } finally {\n      client.release();\n    }\n  });\n}\nasync function getDeviceStats() {\n  return withRetry(async () => {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\"SELECT * FROM clone_inventory\");\n      const allClones = result.rows;\n      const deviceMap = /* @__PURE__ */ new Map();\n      allClones.forEach((clone) => {\n        if (!deviceMap.has(clone.device_id)) {\n          deviceMap.set(clone.device_id, []);\n        }\n        deviceMap.get(clone.device_id).push(clone);\n      });\n      const totalDevices = deviceMap.size;\n      const totalClones = allClones.length;\n      const availableClones = allClones.filter((c2) => c2.clone_status === \"Available\").length;\n      const assignedClones = allClones.filter((c2) => c2.clone_status === \"Assigned\").length;\n      const loggedInClones = allClones.filter((c2) => c2.clone_status === \"Logged In\").length;\n      const brokenClones = allClones.filter((c2) => c2.clone_status === \"Broken\").length;\n      const clonesByStatus = {\n        \"Available\": availableClones,\n        \"Assigned\": assignedClones,\n        \"Logged In\": loggedInClones,\n        \"Login Error\": allClones.filter((c2) => c2.clone_status === \"Login Error\").length,\n        \"Maintenance\": allClones.filter((c2) => c2.clone_status === \"Maintenance\").length,\n        \"Broken\": brokenClones\n      };\n      const devicesByStatus = {\n        \"Available\": 0,\n        \"Logged In\": 0,\n        \"Maintenance\": 0,\n        \"Broken\": 0\n      };\n      deviceMap.forEach((clones) => {\n        const deviceStatus = determineDeviceStatus(clones);\n        devicesByStatus[deviceStatus]++;\n      });\n      return {\n        totalDevices,\n        totalClones,\n        availableClones,\n        assignedClones,\n        loggedInClones,\n        brokenClones,\n        devicesByStatus,\n        clonesByStatus\n      };\n    } finally {\n      client.release();\n    }\n  });\n}\nasync function getDeviceDetails(deviceId) {\n  return withRetry(async () => {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\"SELECT * FROM clone_inventory WHERE device_id = $1 ORDER BY clone_number\", [deviceId]);\n      const rawClones = result.rows;\n      if (rawClones.length === 0) {\n        return { device: null, clones: [] };\n      }\n      const clones = rawClones.map((row) => ({\n        id: row.id,\n        deviceId: row.device_id,\n        cloneNumber: row.clone_number,\n        packageName: row.package_name,\n        cloneStatus: row.clone_status,\n        currentAccount: row.current_account,\n        deviceName: row.device_name,\n        cloneHealth: row.clone_health,\n        lastScanned: row.last_scanned,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at\n      }));\n      const totalClones = clones.length;\n      const availableClones = clones.filter((c2) => c2.cloneStatus === \"Available\").length;\n      const assignedClones = clones.filter((c2) => c2.cloneStatus === \"Assigned\").length;\n      const loggedInClones = clones.filter((c2) => c2.cloneStatus === \"Logged In\").length;\n      const brokenClones = clones.filter((c2) => c2.cloneStatus === \"Broken\").length;\n      const deviceStatus = determineDeviceStatus(rawClones);\n      const deviceName = clones[0].deviceName || null;\n      const deviceHealth = clones[0].cloneHealth || null;\n      const lastScanned = clones.reduce(\n        (latest, clone) => clone.lastScanned > latest ? clone.lastScanned : latest,\n        clones[0].lastScanned\n      );\n      const device = {\n        deviceId,\n        deviceName,\n        totalClones,\n        availableClones,\n        assignedClones,\n        loggedInClones,\n        brokenClones,\n        deviceStatus,\n        deviceHealth,\n        lastScanned\n      };\n      return { device, clones };\n    } finally {\n      client.release();\n    }\n  });\n}\nasync function getDeviceList() {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(`\n\t\t\tSELECT DISTINCT device_id, device_name \n\t\t\tFROM clone_inventory \n\t\t\tORDER BY device_id\n\t\t`);\n    return result.rows.map((row) => ({\n      deviceId: row.device_id,\n      deviceName: row.device_name\n    }));\n  } finally {\n    client.release();\n  }\n}\nfunction determineDeviceStatus(clones) {\n  if (clones.some((c2) => c2.clone_status === \"Broken\" || c2.clone_health === \"Broken\")) {\n    return \"Broken\";\n  }\n  if (clones.some((c2) => c2.clone_status === \"Maintenance\")) {\n    return \"Maintenance\";\n  }\n  if (clones.some((c2) => c2.clone_status === \"Logged In\")) {\n    return \"Logged In\";\n  }\n  return \"Available\";\n}\nasync function assignAccountToClone(deviceId, cloneNumber, instagramUsername) {\n  return withRetry(async () => {\n    const client = await pool.connect();\n    try {\n      await client.query(\"BEGIN\");\n      const cloneResult = await client.query(`\n\t\t\t\tUPDATE clone_inventory \n\t\t\t\tSET clone_status = 'Assigned',\n\t\t\t\t    current_account = $1,\n\t\t\t\t    updated_at = NOW()\n\t\t\t\tWHERE device_id = $2 AND clone_number = $3\n\t\t\t\tRETURNING *\n\t\t\t`, [instagramUsername, deviceId, cloneNumber]);\n      if (cloneResult.rows.length === 0) {\n        await client.query(\"ROLLBACK\");\n        return false;\n      }\n      const accountResult = await client.query(`\n\t\t\t\tUPDATE ig_accounts \n\t\t\t\tSET status = 'Assigned',\n\t\t\t\t    assigned_device_id = $1,\n\t\t\t\t    assigned_clone_number = $2,\n\t\t\t\t    assignment_timestamp = NOW(),\n\t\t\t\t    updated_at = NOW()\n\t\t\t\tWHERE instagram_username = $3\n\t\t\t`, [deviceId, cloneNumber, instagramUsername]);\n      if (accountResult.rowCount === null || accountResult.rowCount === 0) {\n        await client.query(\"ROLLBACK\");\n        return false;\n      }\n      await client.query(\"COMMIT\");\n      return true;\n    } catch (error) {\n      await client.query(\"ROLLBACK\");\n      console.error(\"Failed to assign account to clone:\", error);\n      return false;\n    } finally {\n      client.release();\n    }\n  });\n}\nasync function unassignAccountFromClone(deviceId, cloneNumber) {\n  return withRetry(async () => {\n    const client = await pool.connect();\n    try {\n      await client.query(\"BEGIN\");\n      const cloneResult = await client.query(`\n\t\t\t\tSELECT current_account \n\t\t\t\tFROM clone_inventory \n\t\t\t\tWHERE device_id = $1 AND clone_number = $2\n\t\t\t`, [deviceId, cloneNumber]);\n      if (cloneResult.rows.length === 0 || !cloneResult.rows[0].current_account) {\n        await client.query(\"ROLLBACK\");\n        return false;\n      }\n      const currentAccount = cloneResult.rows[0].current_account;\n      await client.query(`\n\t\t\t\tUPDATE clone_inventory \n\t\t\t\tSET clone_status = 'Available',\n\t\t\t\t    current_account = NULL,\n\t\t\t\t    updated_at = NOW()\n\t\t\t\tWHERE device_id = $1 AND clone_number = $2\n\t\t\t`, [deviceId, cloneNumber]);\n      await client.query(`\n\t\t\t\tUPDATE ig_accounts \n\t\t\t\tSET status = 'Unused',\n\t\t\t\t    assigned_device_id = NULL,\n\t\t\t\t    assigned_clone_number = NULL,\n\t\t\t\t    assignment_timestamp = NULL,\n\t\t\t\t    updated_at = NOW()\n\t\t\t\tWHERE instagram_username = $1\n\t\t\t`, [currentAccount]);\n      await client.query(\"COMMIT\");\n      return true;\n    } catch (error) {\n      await client.query(\"ROLLBACK\");\n      console.error(\"Failed to unassign account from clone:\", error);\n      return false;\n    } finally {\n      client.release();\n    }\n  });\n}\nasync function updateCloneStatus(deviceId, cloneNumber, status) {\n  return withRetry(async () => {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(`\n\t\t\t\tUPDATE clone_inventory \n\t\t\t\tSET clone_status = $1,\n\t\t\t\t    updated_at = NOW()\n\t\t\t\tWHERE device_id = $2 AND clone_number = $3\n\t\t\t\tRETURNING id\n\t\t\t`, [status, deviceId, cloneNumber]);\n      return result.rowCount !== null && result.rowCount > 0;\n    } catch (error) {\n      console.error(\"Failed to update clone status:\", error);\n      return false;\n    } finally {\n      client.release();\n    }\n  });\n}\nasync function getDeviceCapacityAnalysis() {\n  return withRetry(async () => {\n    const client = await pool.connect();\n    try {\n      const result = await client.query(\"SELECT * FROM clone_inventory ORDER BY device_id, clone_number\");\n      const allClones = result.rows;\n      const deviceMap = /* @__PURE__ */ new Map();\n      allClones.forEach((clone) => {\n        if (!deviceMap.has(clone.device_id)) {\n          deviceMap.set(clone.device_id, []);\n        }\n        deviceMap.get(clone.device_id).push(clone);\n      });\n      const capacityAnalysis = [];\n      deviceMap.forEach((clones, deviceId) => {\n        const totalClones = clones.length;\n        const availableClones = clones.filter((c2) => c2.clone_status === \"Available\").length;\n        const assignedClones = clones.filter((c2) => c2.clone_status === \"Assigned\").length;\n        const loggedInClones = clones.filter((c2) => c2.clone_status === \"Logged In\").length;\n        const brokenClones = clones.filter((c2) => c2.clone_status === \"Broken\").length;\n        const deviceStatus = determineDeviceStatus(clones);\n        const deviceName = clones[0].device_name || null;\n        const activeClones = assignedClones + loggedInClones;\n        const utilizationRate = totalClones > 0 ? activeClones / totalClones * 100 : 0;\n        let efficiency = 100;\n        if (deviceStatus === \"Broken\") efficiency -= 50;\n        if (deviceStatus === \"Maintenance\") efficiency -= 30;\n        if (availableClones > 0) efficiency += 10;\n        if (utilizationRate > 10 && utilizationRate < 90) efficiency += 5;\n        const brokenRate = totalClones > 0 ? brokenClones / totalClones * 100 : 0;\n        efficiency -= brokenRate * 0.5;\n        efficiency = Math.max(0, Math.min(100, efficiency));\n        capacityAnalysis.push({\n          deviceId,\n          deviceName,\n          totalClones,\n          availableClones,\n          assignedClones,\n          loggedInClones,\n          brokenClones,\n          deviceStatus,\n          utilizationRate: Math.round(utilizationRate * 100) / 100,\n          efficiency: Math.round(efficiency * 100) / 100\n        });\n      });\n      return capacityAnalysis.sort((a2, b2) => a2.deviceId.localeCompare(b2.deviceId));\n    } finally {\n      client.release();\n    }\n  });\n}\nasync function getOptimalDeviceAssignments(accountIds, strategy = \"capacity-based\") {\n  if (accountIds.length === 0) {\n    return [];\n  }\n  return withRetry(async () => {\n    const client = await pool.connect();\n    try {\n      const accountsResult = await client.query(`\n\t\t\t\tSELECT id, instagram_username \n\t\t\t\tFROM ig_accounts \n\t\t\t\tWHERE id = ANY($1) AND status = 'Unused' AND assigned_device_id IS NULL\n\t\t\t\tORDER BY instagram_username\n\t\t\t`, [accountIds]);\n      if (accountsResult.rows.length === 0) {\n        return [];\n      }\n      const clonesResult = await client.query(`\n\t\t\t\tSELECT device_id, clone_number, package_name, device_name, clone_health \n\t\t\t\tFROM clone_inventory \n\t\t\t\tWHERE clone_status = 'Available' \n\t\t\t\tORDER BY device_id, clone_number\n\t\t\t`);\n      if (clonesResult.rows.length === 0) {\n        return [];\n      }\n      const accounts = accountsResult.rows;\n      const availableClones = clonesResult.rows.map((row) => ({\n        deviceId: row.device_id,\n        cloneNumber: row.clone_number,\n        packageName: row.package_name,\n        deviceName: row.device_name,\n        cloneHealth: row.clone_health\n      }));\n      const assignments = [];\n      switch (strategy) {\n        case \"round-robin\": {\n          const deviceIds = [...new Set(availableClones.map((c2) => c2.deviceId))].sort();\n          let currentDeviceIndex = 0;\n          for (const account of accounts) {\n            if (assignments.length >= availableClones.length) break;\n            let attempts = 0;\n            while (attempts < deviceIds.length) {\n              const targetDeviceId = deviceIds[currentDeviceIndex];\n              const availableClone = availableClones.find(\n                (c2) => c2.deviceId === targetDeviceId && !assignments.some((a2) => a2.deviceId === c2.deviceId && a2.cloneNumber === c2.cloneNumber)\n              );\n              if (availableClone) {\n                assignments.push({\n                  accountId: account.id,\n                  instagramUsername: account.instagram_username,\n                  deviceId: availableClone.deviceId,\n                  cloneNumber: availableClone.cloneNumber,\n                  packageName: availableClone.packageName\n                });\n                break;\n              }\n              currentDeviceIndex = (currentDeviceIndex + 1) % deviceIds.length;\n              attempts++;\n            }\n            currentDeviceIndex = (currentDeviceIndex + 1) % deviceIds.length;\n          }\n          break;\n        }\n        case \"fill-first\": {\n          const sortedClones = [...availableClones].sort(\n            (a2, b2) => a2.deviceId.localeCompare(b2.deviceId) || a2.cloneNumber - b2.cloneNumber\n          );\n          for (let i = 0; i < accounts.length && i < sortedClones.length; i++) {\n            const account = accounts[i];\n            const clone = sortedClones[i];\n            assignments.push({\n              accountId: account.id,\n              instagramUsername: account.instagram_username,\n              deviceId: clone.deviceId,\n              cloneNumber: clone.cloneNumber,\n              packageName: clone.packageName\n            });\n          }\n          break;\n        }\n        case \"capacity-based\": {\n          const deviceCapacity = await getDeviceCapacityAnalysis();\n          const deviceEfficiencyOrder = deviceCapacity.filter((d) => d.availableClones > 0 && d.deviceStatus !== \"Broken\").sort((a2, b2) => {\n            if (b2.efficiency !== a2.efficiency) {\n              return b2.efficiency - a2.efficiency;\n            }\n            if (b2.availableClones !== a2.availableClones) {\n              return b2.availableClones - a2.availableClones;\n            }\n            return a2.deviceId.localeCompare(b2.deviceId);\n          });\n          const clonesByDevice = /* @__PURE__ */ new Map();\n          availableClones.forEach((clone) => {\n            if (!clonesByDevice.has(clone.deviceId)) {\n              clonesByDevice.set(clone.deviceId, []);\n            }\n            clonesByDevice.get(clone.deviceId).push(clone);\n          });\n          clonesByDevice.forEach((clones) => {\n            clones.sort((a2, b2) => a2.cloneNumber - b2.cloneNumber);\n          });\n          let accountIndex = 0;\n          for (const deviceInfo of deviceEfficiencyOrder) {\n            const deviceClones = clonesByDevice.get(deviceInfo.deviceId) || [];\n            for (const clone of deviceClones) {\n              if (accountIndex >= accounts.length) break;\n              const account = accounts[accountIndex];\n              assignments.push({\n                accountId: account.id,\n                instagramUsername: account.instagram_username,\n                deviceId: clone.deviceId,\n                cloneNumber: clone.cloneNumber,\n                packageName: clone.packageName\n              });\n              accountIndex++;\n            }\n            if (accountIndex >= accounts.length) break;\n          }\n          break;\n        }\n      }\n      return assignments;\n    } finally {\n      client.release();\n    }\n  });\n}\nasync function validateAssignmentFeasibility(accountIds) {\n  const result = {\n    isValid: true,\n    canAssign: 0,\n    totalRequested: accountIds.length,\n    errors: [],\n    warnings: []\n  };\n  if (accountIds.length === 0) {\n    result.errors.push(\"No accounts specified for assignment\");\n    result.isValid = false;\n    return result;\n  }\n  return withRetry(async () => {\n    const client = await pool.connect();\n    try {\n      const accountsResult = await client.query(`\n\t\t\t\tSELECT id, instagram_username, status, assigned_device_id \n\t\t\t\tFROM ig_accounts \n\t\t\t\tWHERE id = ANY($1)\n\t\t\t`, [accountIds]);\n      if (accountsResult.rows.length !== accountIds.length) {\n        const foundIds = accountsResult.rows.map((a2) => a2.id);\n        const missingIds = accountIds.filter((id) => !foundIds.includes(id));\n        result.errors.push(`Accounts not found: ${missingIds.join(\", \")}`);\n      }\n      const unavailableAccounts = accountsResult.rows.filter(\n        (a2) => a2.status !== \"Unused\" || a2.assigned_device_id !== null\n      );\n      if (unavailableAccounts.length > 0) {\n        result.errors.push(\n          `Accounts not available for assignment: ${unavailableAccounts.map((a2) => a2.instagram_username).join(\", \")}`\n        );\n      }\n      const availableAccountCount = accountsResult.rows.length - unavailableAccounts.length;\n      const cloneCountResult = await client.query(`\n\t\t\t\tSELECT COUNT(*) as count \n\t\t\t\tFROM clone_inventory \n\t\t\t\tWHERE clone_status = 'Available'\n\t\t\t`);\n      const availableClones = parseInt(cloneCountResult.rows[0].count);\n      if (availableClones === 0) {\n        result.errors.push(\"No available clones for assignment\");\n      }\n      result.canAssign = Math.min(availableAccountCount, availableClones);\n      if (result.canAssign < result.totalRequested) {\n        const shortage = result.totalRequested - result.canAssign;\n        result.warnings.push(`Can only assign ${result.canAssign} of ${result.totalRequested} accounts (shortage: ${shortage})`);\n      }\n      if (availableClones < result.totalRequested) {\n        result.warnings.push(`Only ${availableClones} clones available for ${result.totalRequested} accounts`);\n      }\n      const deviceHealthResult = await client.query(`\n\t\t\t\tSELECT \n\t\t\t\t\tCOUNT(DISTINCT CASE WHEN clone_status = 'Broken' THEN device_id END) as broken_devices,\n\t\t\t\t\tCOUNT(DISTINCT CASE WHEN clone_status = 'Maintenance' THEN device_id END) as maintenance_devices\n\t\t\t\tFROM clone_inventory\n\t\t\t`);\n      const brokenDevices = parseInt(deviceHealthResult.rows[0].broken_devices);\n      const maintenanceDevices = parseInt(deviceHealthResult.rows[0].maintenance_devices);\n      if (brokenDevices > 0) {\n        result.warnings.push(`${brokenDevices} devices are in broken status and unavailable`);\n      }\n      if (maintenanceDevices > 0) {\n        result.warnings.push(`${maintenanceDevices} devices are in maintenance and may have limited availability`);\n      }\n      if (result.errors.length > 0) {\n        result.isValid = false;\n      }\n      return result;\n    } catch (error) {\n      console.error(\"Error validating assignment feasibility:\", error);\n      result.isValid = false;\n      result.errors.push(\"Failed to validate assignment feasibility due to database error\");\n      return result;\n    } finally {\n      client.release();\n    }\n  });\n}\nasync function assignAccountsToDevicesAutomatically(accountIds, strategy = \"capacity-based\") {\n  const result = {\n    success: false,\n    assignedCount: 0,\n    totalRequested: accountIds.length,\n    assignments: [],\n    errors: [],\n    failedAccounts: []\n  };\n  return withRetry(async () => {\n    try {\n      const validation = await validateAssignmentFeasibility(accountIds);\n      if (!validation.isValid) {\n        result.errors = validation.errors;\n        return result;\n      }\n      const optimalAssignments = await getOptimalDeviceAssignments(accountIds, strategy);\n      if (optimalAssignments.length === 0) {\n        result.errors.push(\"No optimal assignments found\");\n        return result;\n      }\n      const client = await pool.connect();\n      try {\n        await client.query(\"BEGIN\");\n        for (const assignment of optimalAssignments) {\n          try {\n            const cloneUpdateResult = await client.query(`\n\t\t\t\t\t\t\tUPDATE clone_inventory \n\t\t\t\t\t\t\tSET clone_status = 'Assigned',\n\t\t\t\t\t\t\t    current_account = $1,\n\t\t\t\t\t\t\t    updated_at = NOW()\n\t\t\t\t\t\t\tWHERE device_id = $2 AND clone_number = $3 AND clone_status = 'Available'\n\t\t\t\t\t\t\tRETURNING id\n\t\t\t\t\t\t`, [assignment.instagramUsername, assignment.deviceId, assignment.cloneNumber]);\n            if (cloneUpdateResult.rowCount === null || cloneUpdateResult.rowCount === 0) {\n              throw new Error(\"Clone no longer available for assignment\");\n            }\n            const accountUpdateResult = await client.query(`\n\t\t\t\t\t\t\tUPDATE ig_accounts \n\t\t\t\t\t\t\tSET status = 'Assigned',\n\t\t\t\t\t\t\t    assigned_device_id = $1,\n\t\t\t\t\t\t\t    assigned_clone_number = $2,\n\t\t\t\t\t\t\t    assigned_package_name = $3,\n\t\t\t\t\t\t\t    assignment_timestamp = NOW(),\n\t\t\t\t\t\t\t    updated_at = NOW()\n\t\t\t\t\t\t\tWHERE id = $4 AND status = 'Unused' AND assigned_device_id IS NULL\n\t\t\t\t\t\t\tRETURNING id\n\t\t\t\t\t\t`, [assignment.deviceId, assignment.cloneNumber, assignment.packageName, assignment.accountId]);\n            if (accountUpdateResult.rowCount === null || accountUpdateResult.rowCount === 0) {\n              throw new Error(\"Account no longer available for assignment\");\n            }\n            result.assignments.push(assignment);\n            result.assignedCount++;\n          } catch (assignmentError) {\n            console.error(`Failed to assign account ${assignment.instagramUsername}:`, assignmentError);\n            result.failedAccounts.push({\n              accountId: assignment.accountId,\n              instagramUsername: assignment.instagramUsername,\n              error: assignmentError instanceof Error ? assignmentError.message : \"Unknown assignment error\"\n            });\n          }\n        }\n        await client.query(\"COMMIT\");\n        result.success = result.assignedCount > 0;\n        if (result.failedAccounts.length > 0) {\n          result.errors.push(`Failed to assign ${result.failedAccounts.length} accounts`);\n        }\n        return result;\n      } catch (transactionError) {\n        await client.query(\"ROLLBACK\");\n        throw transactionError;\n      } finally {\n        client.release();\n      }\n    } catch (error) {\n      console.error(\"Error in automatic assignment:\", error);\n      result.errors.push(\"Transaction failed during automatic assignment\");\n      const processedAccountIds = result.assignments.map((a2) => a2.accountId);\n      const unprocessedIds = accountIds.filter((id) => !processedAccountIds.includes(id));\n      for (const accountId of unprocessedIds) {\n        result.failedAccounts.push({\n          accountId,\n          instagramUsername: `Account-${accountId}`,\n          error: \"Assignment transaction was rolled back\"\n        });\n      }\n      return result;\n    }\n  });\n}\nclass BulkOperationError extends Error {\n  constructor(message, code, details) {\n    super(message);\n    this.code = code;\n    this.details = details;\n    this.name = \"BulkOperationError\";\n  }\n}\nfunction validateBulkOperationParams(accountIds, operation) {\n  const errors = [];\n  if (!Array.isArray(accountIds)) {\n    errors.push(\"accountIds must be an array\");\n    return { valid: false, errors };\n  }\n  if (accountIds.length === 0) {\n    errors.push(\"accountIds array cannot be empty\");\n  }\n  if (accountIds.length > 1e3) {\n    errors.push(\"Cannot process more than 1000 accounts at once\");\n  }\n  for (let i = 0; i < accountIds.length; i++) {\n    const id = accountIds[i];\n    if (!Number.isInteger(id) || id <= 0) {\n      errors.push(`Invalid account ID at index ${i}: ${id}`);\n    }\n  }\n  const validOperations = [\"updateStatus\", \"assignDevices\", \"export\", \"delete\"];\n  if (!validOperations.includes(operation)) {\n    errors.push(`Invalid operation: ${operation}`);\n  }\n  return { valid: errors.length === 0, errors };\n}\nfunction sanitizeInput(input) {\n  if (typeof input === \"string\") {\n    return input.replace(/[;\\\\-\\\\-\\\\/\\\\*\\\\*\\\\/\\\\x00\\\\x1a]/g, \"\");\n  }\n  return input;\n}\nasync function bulkUpdateAccountStatus(accountIds, newStatus, additionalData) {\n  const client = await pool.connect();\n  try {\n    await client.query(\"BEGIN\");\n    const placeholders = accountIds.map((_, index) => `$${index + 1}`).join(\", \");\n    const params = [...accountIds];\n    let paramCount = accountIds.length;\n    let setClause = \"status = $\" + ++paramCount;\n    params.push(newStatus);\n    if (additionalData) {\n      for (const [key, value] of Object.entries(additionalData)) {\n        if (value !== void 0) {\n          const dbKey = key.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n          setClause += `, ${dbKey} = $${++paramCount}`;\n          params.push(value);\n        }\n      }\n    }\n    setClause += \", updated_at = NOW()\";\n    const query2 = `UPDATE ig_accounts SET ${setClause} WHERE id IN (${placeholders})`;\n    const result = await client.query(query2, params);\n    await client.query(\"COMMIT\");\n    return { count: result.rowCount || 0 };\n  } catch (error) {\n    await client.query(\"ROLLBACK\");\n    throw error;\n  } finally {\n    client.release();\n  }\n}\nasync function bulkDeleteAccounts(accountIds) {\n  const client = await pool.connect();\n  try {\n    await client.query(\"BEGIN\");\n    const placeholders = accountIds.map((_, index) => `$${index + 1}`).join(\", \");\n    const assignedAccountsResult = await client.query(`\n\t\t\tSELECT id, assigned_device_id, assigned_clone_number \n\t\t\tFROM ig_accounts \n\t\t\tWHERE id IN (${placeholders}) \n\t\t\t  AND assigned_device_id IS NOT NULL \n\t\t\t  AND assigned_clone_number IS NOT NULL\n\t\t`, accountIds);\n    for (const account of assignedAccountsResult.rows) {\n      await client.query(`\n\t\t\t\tUPDATE clone_inventory \n\t\t\t\tSET clone_status = 'Available', current_account = NULL, updated_at = NOW() \n\t\t\t\tWHERE device_id = $1 AND clone_number = $2\n\t\t\t`, [account.assigned_device_id, account.assigned_clone_number]);\n    }\n    const deleteResult = await client.query(`\n\t\t\tDELETE FROM ig_accounts WHERE id IN (${placeholders})\n\t\t`, accountIds);\n    await client.query(\"COMMIT\");\n    return { count: deleteResult.rowCount || 0 };\n  } catch (error) {\n    await client.query(\"ROLLBACK\");\n    throw error;\n  } finally {\n    client.release();\n  }\n}\nasync function getAccountsForExport(filters = {}, fields = []) {\n  const client = await pool.connect();\n  try {\n    let selectClause = \"*\";\n    if (fields.length > 0) {\n      const dbFields = fields.map((field) => {\n        switch (field) {\n          case \"instagramUsername\":\n            return \"instagram_username\";\n          case \"instagramPassword\":\n            return \"instagram_password\";\n          case \"emailAddress\":\n            return \"email_address\";\n          case \"emailPassword\":\n            return \"email_password\";\n          case \"imapStatus\":\n            return \"imap_status\";\n          case \"assignedDeviceId\":\n            return \"assigned_device_id\";\n          case \"assignedCloneNumber\":\n            return \"assigned_clone_number\";\n          case \"assignedPackageName\":\n            return \"assigned_package_name\";\n          case \"assignmentTimestamp\":\n            return \"assignment_timestamp\";\n          case \"loginTimestamp\":\n            return \"login_timestamp\";\n          case \"createdAt\":\n            return \"created_at\";\n          case \"updatedAt\":\n            return \"updated_at\";\n          default:\n            return field;\n        }\n      });\n      selectClause = dbFields.join(\", \");\n    }\n    let query2 = `SELECT ${selectClause} FROM ig_accounts`;\n    const params = [];\n    let paramCount = 0;\n    const conditions = [];\n    if (filters.status) {\n      paramCount++;\n      conditions.push(`status = $${paramCount}`);\n      params.push(filters.status);\n    }\n    if (filters.search) {\n      paramCount++;\n      const searchParam = `%${filters.search}%`;\n      conditions.push(`(instagram_username ILIKE $${paramCount} OR email_address ILIKE $${paramCount})`);\n      params.push(searchParam);\n    }\n    if (filters.dateFrom) {\n      paramCount++;\n      conditions.push(`created_at >= $${paramCount}`);\n      params.push(filters.dateFrom);\n    }\n    if (filters.dateTo) {\n      paramCount++;\n      conditions.push(`created_at <= $${paramCount}`);\n      params.push(filters.dateTo);\n    }\n    if (conditions.length > 0) {\n      query2 += ` WHERE ${conditions.join(\" AND \")}`;\n    }\n    query2 += \" ORDER BY created_at DESC\";\n    const result = await client.query(query2, params);\n    return result.rows.map(mapDbRowToAccount);\n  } finally {\n    client.release();\n  }\n}\nasync function $queryRaw(query2, ...values) {\n  const client = await pool.connect();\n  try {\n    if (typeof query2 === \"string\") {\n      return await client.query(query2, values);\n    } else {\n      const queryStr = query2.join(\"?\");\n      return await client.query(queryStr, values);\n    }\n  } finally {\n    client.release();\n  }\n}\nasync function query(sql, params = [], context) {\n  return await monitoredQuery(\n    async () => {\n      return await withRetry(async () => {\n        const client = await pool.connect();\n        try {\n          const result = await client.query(sql, params);\n          return result;\n        } finally {\n          client.release();\n        }\n      });\n    },\n    sql,\n    params,\n    context\n  );\n}\nexport {\n  $queryRaw,\n  A as ACCOUNT_STATUSES,\n  BulkOperationError,\n  a as CLONE_HEALTH,\n  C as CLONE_STATUSES,\n  D as DEVICE_STATUSES,\n  assignAccountToClone,\n  assignAccountsToDevicesAutomatically,\n  bulkDeleteAccounts,\n  bulkUpdateAccountStatus,\n  checkUsernameExists,\n  createAccount,\n  deleteAccount,\n  getAccountById,\n  getAccountStats,\n  getAccounts,\n  getAccountsCount,\n  getAccountsForExport,\n  getAvailableAccounts,\n  b as getCloneStatusClass,\n  getDeviceCapacityAnalysis,\n  getDeviceDetails,\n  getDeviceList,\n  getDeviceStats,\n  c as getDeviceStatusClass,\n  getDeviceSummaries,\n  getOptimalDeviceAssignments,\n  g as getStatusClass,\n  pool,\n  prisma,\n  query,\n  sanitizeInput,\n  unassignAccountFromClone,\n  updateAccount,\n  updateCloneStatus,\n  validateAssignmentFeasibility,\n  validateBulkOperationParams\n};\n"],"names":[],"mappings":"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"}