{"version":3,"file":"database-CKYbeswu.js","sources":["../../../.svelte-kit/adapter-node/chunks/database.js"],"sourcesContent":["import { d as dev } from \"./index.js\";\nimport { A, a, C, D, b, c, g } from \"./status.js\";\nlet _prismaClient = null;\nlet _prismaAvailable = null;\nlet _initPromise = null;\nconst DB_CONFIG = {\n  maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS || \"20\"),\n  connectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT_MS || \"30000\"),\n  queryTimeout: parseInt(process.env.DB_QUERY_TIMEOUT || \"30000\"),\n  statementTimeout: parseInt(process.env.DB_STATEMENT_TIMEOUT || \"30000\"),\n  idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT_MS || \"30000\"),\n  poolTimeout: parseInt(process.env.DB_POOL_TIMEOUT_MS || \"0\")\n};\nfunction buildOptimizedConnectionUrl() {\n  const baseUrl = process.env.DATABASE_URL;\n  if (!baseUrl) {\n    throw new Error(\"DATABASE_URL environment variable is required\");\n  }\n  const url = new URL(baseUrl);\n  const poolParams = new URLSearchParams(url.search);\n  if (!poolParams.has(\"connection_limit\")) {\n    poolParams.set(\"connection_limit\", DB_CONFIG.maxConnections.toString());\n  }\n  if (!poolParams.has(\"pool_timeout\")) {\n    poolParams.set(\"pool_timeout\", DB_CONFIG.poolTimeout.toString());\n  }\n  if (!poolParams.has(\"connect_timeout\")) {\n    poolParams.set(\"connect_timeout\", (DB_CONFIG.connectionTimeout / 1e3).toString());\n  }\n  if (!poolParams.has(\"statement_timeout\")) {\n    poolParams.set(\"statement_timeout\", `${DB_CONFIG.statementTimeout}ms`);\n  }\n  if (!poolParams.has(\"pgbouncer\") && process.env.NODE_ENV === \"production\") {\n    poolParams.set(\"pgbouncer\", \"true\");\n  }\n  if (!poolParams.has(\"sslmode\")) {\n    poolParams.set(\"sslmode\", process.env.DB_SSL_MODE || \"prefer\");\n  }\n  if (!poolParams.has(\"application_name\")) {\n    poolParams.set(\"application_name\", process.env.PUBLIC_APP_NAME || \"boutique-client-portal\");\n  }\n  url.search = poolParams.toString();\n  return url.toString();\n}\nasync function initializePrisma() {\n  if (_initPromise) {\n    return _initPromise;\n  }\n  _initPromise = (async () => {\n    try {\n      console.log(\"🔄 Initializing Prisma client with connection pooling...\");\n      const { PrismaClient } = await import(\"@prisma/client\");\n      const connectionUrl = buildOptimizedConnectionUrl();\n      const client = new PrismaClient({\n        datasources: {\n          db: {\n            url: connectionUrl\n          }\n        },\n        log: dev ? [\"query\", \"info\", \"warn\", \"error\"] : [\"error\", \"warn\"],\n        errorFormat: \"pretty\"\n      });\n      client.$use(async (params, next) => {\n        const start = Date.now();\n        try {\n          const result = await next(params);\n          const duration = Date.now() - start;\n          if (dev && duration > 1e3) ;\n          return result;\n        } catch (error) {\n          console.error(`❌ DB query failed: ${params.model}.${params.action}`, error);\n          throw error;\n        }\n      });\n      const testPromise = client.$connect().then(() => client.igAccount.count());\n      const timeoutPromise = new Promise(\n        (_, reject) => setTimeout(() => reject(new Error(\"Connection timeout\")), DB_CONFIG.connectionTimeout)\n      );\n      await Promise.race([testPromise, timeoutPromise]);\n      console.log(\"✅ Prisma client with connection pooling initialized successfully\");\n      console.log(`📊 Pool config: Max ${DB_CONFIG.maxConnections} connections, ${DB_CONFIG.connectionTimeout}ms timeout`);\n      const gracefulShutdown = async () => {\n        if (_prismaClient) {\n          console.log(\"🔄 Closing database connections...\");\n          await _prismaClient.$disconnect();\n          _prismaClient = null;\n          console.log(\"✅ Database connections closed\");\n        }\n      };\n      process.on(\"SIGINT\", gracefulShutdown);\n      process.on(\"SIGTERM\", gracefulShutdown);\n      process.on(\"SIGQUIT\", gracefulShutdown);\n      process.on(\"beforeExit\", gracefulShutdown);\n      _prismaClient = client;\n      _prismaAvailable = true;\n      return { client, available: true };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      console.warn(\"⚠️  Prisma client initialization failed:\", errorMessage);\n      console.log(\"📋 This is expected on NixOS. Application will use direct SQL fallback.\");\n      _prismaClient = null;\n      _prismaAvailable = false;\n      return { client: null, available: false };\n    }\n  })();\n  return _initPromise;\n}\nconst prisma = new Proxy({}, {\n  get: function(target, prop) {\n    if (prop === \"then\" || prop === \"catch\" || prop === \"finally\" || typeof prop === \"symbol\") {\n      return void 0;\n    }\n    if (prop === \"$connect\" || prop === \"$disconnect\" || prop === \"$queryRaw\" || prop === \"$executeRaw\") {\n      return async (...args) => {\n        const { client, available } = await initializePrisma();\n        if (available && client) {\n          return client[prop](...args);\n        }\n        if (prop === \"$connect\" || prop === \"$disconnect\") {\n          return Promise.resolve();\n        }\n        throw new Error(`Prisma not available: Cannot execute ${String(prop)}`);\n      };\n    }\n    if (prop === \"igAccount\" || prop === \"cloneInventory\" || prop === \"warmupAccount\" || prop === \"automationSession\" || prop === \"automationLog\") {\n      return new Proxy({}, {\n        get: function(modelTarget, method) {\n          if (method === \"then\" || method === \"catch\" || method === \"finally\" || typeof method === \"symbol\") {\n            return void 0;\n          }\n          return async (...args) => {\n            const { client, available } = await initializePrisma();\n            if (available && client && client[prop]) {\n              const modelClient = client[prop];\n              if (typeof modelClient[method] === \"function\") {\n                return modelClient[method](...args);\n              }\n            }\n            throw new Error(`Prisma not available: Cannot execute ${String(prop)}.${String(method)}`);\n          };\n        }\n      });\n    }\n    if (prop === \"$transaction\") {\n      return async (...args) => {\n        const { client, available } = await initializePrisma();\n        if (available && client) {\n          return client.$transaction(...args);\n        }\n        throw new Error(\"Prisma not available: Cannot execute transaction\");\n      };\n    }\n    return async (...args) => {\n      const { client, available } = await initializePrisma();\n      if (available && client && typeof client[prop] === \"function\") {\n        return client[prop](...args);\n      }\n      throw new Error(`Prisma not available: Cannot execute ${String(prop)}`);\n    };\n  }\n});\nasync function isPrismaAvailable() {\n  if (_prismaAvailable !== null) {\n    return _prismaAvailable;\n  }\n  const { available } = await initializePrisma();\n  return available;\n}\nasync function getPrismaClient() {\n  const { client, available } = await initializePrisma();\n  if (!available || !client) {\n    throw new Error(\"Prisma client is not available\");\n  }\n  return client;\n}\ninitializePrisma().catch(() => {\n});\nasync function getAccountStats() {\n  const [total, statusCounts] = await Promise.all([\n    prisma.igAccount.count(),\n    prisma.igAccount.groupBy({\n      by: [\"status\"],\n      _count: {\n        status: true\n      }\n    })\n  ]);\n  return {\n    total,\n    byStatus: statusCounts.reduce((acc, item) => {\n      acc[item.status] = item._count.status;\n      return acc;\n    }, {})\n  };\n}\nasync function createAccount(data) {\n  return await prisma.igAccount.create({\n    data: {\n      recordId: data.recordId,\n      instagramUsername: data.instagramUsername,\n      instagramPassword: data.instagramPassword,\n      emailAddress: data.emailAddress,\n      emailPassword: data.emailPassword,\n      status: data.status || \"Unused\",\n      imapStatus: data.imapStatus || \"On\",\n      assignedDeviceId: data.assignedDeviceId,\n      assignedCloneNumber: data.assignedCloneNumber,\n      assignedPackageName: data.assignedPackageName,\n      assignmentTimestamp: data.assignedDeviceId ? /* @__PURE__ */ new Date() : null,\n      // Account ownership and classification fields\n      ownerId: data.ownerId || null,\n      accountType: data.accountType || \"CLIENT\",\n      visibility: data.visibility || \"PRIVATE\",\n      isShared: data.isShared || false\n    }\n  });\n}\nasync function getAccountById(id) {\n  return await prisma.igAccount.findUnique({\n    where: { id }\n  });\n}\nasync function getAccounts(limit = 20, offset = 0, statusFilter, searchQuery, advancedFilters) {\n  const where = {};\n  const searchClauses = [];\n  if (statusFilter && !advancedFilters?.statuses) {\n    where.status = statusFilter;\n  }\n  if (searchQuery && !advancedFilters?.search) {\n    searchClauses.push(\n      { instagramUsername: { contains: searchQuery, mode: \"insensitive\" } },\n      { emailAddress: { contains: searchQuery, mode: \"insensitive\" } }\n    );\n  }\n  if (advancedFilters) {\n    if (advancedFilters.search) {\n      searchClauses.push(\n        { instagramUsername: { contains: advancedFilters.search, mode: \"insensitive\" } },\n        { emailAddress: { contains: advancedFilters.search, mode: \"insensitive\" } },\n        { assignedDeviceId: { contains: advancedFilters.search, mode: \"insensitive\" } }\n      );\n    }\n    if (advancedFilters.statuses && advancedFilters.statuses.length > 0) {\n      where.status = { in: advancedFilters.statuses };\n    }\n    if (advancedFilters.deviceAssignment) {\n      switch (advancedFilters.deviceAssignment) {\n        case \"assigned\":\n          where.assignedDeviceId = { not: null };\n          break;\n        case \"unassigned\":\n          where.assignedDeviceId = null;\n          break;\n        case \"specific\":\n          if (advancedFilters.specificDevice) {\n            where.assignedDeviceId = advancedFilters.specificDevice;\n          }\n          break;\n      }\n    }\n    if (advancedFilters.createdDateFrom || advancedFilters.createdDateTo) {\n      where.createdAt = {};\n      if (advancedFilters.createdDateFrom) {\n        where.createdAt.gte = advancedFilters.createdDateFrom;\n      }\n      if (advancedFilters.createdDateTo) {\n        const endOfDay = new Date(advancedFilters.createdDateTo);\n        endOfDay.setHours(23, 59, 59, 999);\n        where.createdAt.lte = endOfDay;\n      }\n    }\n    if (advancedFilters.loginDateFrom || advancedFilters.loginDateTo) {\n      where.loginTimestamp = {};\n      if (advancedFilters.loginDateFrom) {\n        where.loginTimestamp.gte = advancedFilters.loginDateFrom;\n      }\n      if (advancedFilters.loginDateTo) {\n        const endOfDay = new Date(advancedFilters.loginDateTo);\n        endOfDay.setHours(23, 59, 59, 999);\n        where.loginTimestamp.lte = endOfDay;\n      }\n    }\n    if (advancedFilters.imapStatus && advancedFilters.imapStatus !== \"all\") {\n      where.imapStatus = advancedFilters.imapStatus;\n    }\n    if (advancedFilters.ownerId !== void 0) {\n      where.ownerId = advancedFilters.ownerId;\n    }\n    if (advancedFilters.accountTypes && advancedFilters.accountTypes.length > 0) {\n      where.accountType = { in: advancedFilters.accountTypes };\n    }\n    if (!advancedFilters.includeMLAccounts) {\n      if (where.accountType && where.accountType.in) {\n        where.accountType.in = where.accountType.in.filter((type) => type !== \"ML_TREND_FINDER\");\n      } else if (!where.accountType) {\n        where.accountType = { not: \"ML_TREND_FINDER\" };\n      }\n    }\n    if (advancedFilters.visibilityFilter && advancedFilters.visibilityFilter.length > 0) {\n      where.visibility = { in: advancedFilters.visibilityFilter };\n    }\n    if (advancedFilters.includeShared === false) {\n      where.isShared = false;\n    } else if (advancedFilters.includeShared === true) ;\n  }\n  if (searchClauses.length > 0) {\n    where.OR = searchClauses;\n  }\n  return await prisma.igAccount.findMany({\n    where,\n    orderBy: { createdAt: \"desc\" },\n    take: limit,\n    skip: offset\n  });\n}\nasync function getAccountsCount(statusFilter, searchQuery, advancedFilters) {\n  const where = {};\n  const searchClauses = [];\n  if (statusFilter && !advancedFilters?.statuses) {\n    where.status = statusFilter;\n  }\n  if (searchQuery && !advancedFilters?.search) {\n    searchClauses.push(\n      { instagramUsername: { contains: searchQuery, mode: \"insensitive\" } },\n      { emailAddress: { contains: searchQuery, mode: \"insensitive\" } }\n    );\n  }\n  if (advancedFilters) {\n    if (advancedFilters.search) {\n      searchClauses.push(\n        { instagramUsername: { contains: advancedFilters.search, mode: \"insensitive\" } },\n        { emailAddress: { contains: advancedFilters.search, mode: \"insensitive\" } },\n        { assignedDeviceId: { contains: advancedFilters.search, mode: \"insensitive\" } }\n      );\n    }\n    if (advancedFilters.statuses && advancedFilters.statuses.length > 0) {\n      where.status = { in: advancedFilters.statuses };\n    }\n    if (advancedFilters.deviceAssignment) {\n      switch (advancedFilters.deviceAssignment) {\n        case \"assigned\":\n          where.assignedDeviceId = { not: null };\n          break;\n        case \"unassigned\":\n          where.assignedDeviceId = null;\n          break;\n        case \"specific\":\n          if (advancedFilters.specificDevice) {\n            where.assignedDeviceId = advancedFilters.specificDevice;\n          }\n          break;\n      }\n    }\n    if (advancedFilters.createdDateFrom || advancedFilters.createdDateTo) {\n      where.createdAt = {};\n      if (advancedFilters.createdDateFrom) {\n        where.createdAt.gte = advancedFilters.createdDateFrom;\n      }\n      if (advancedFilters.createdDateTo) {\n        const endOfDay = new Date(advancedFilters.createdDateTo);\n        endOfDay.setHours(23, 59, 59, 999);\n        where.createdAt.lte = endOfDay;\n      }\n    }\n    if (advancedFilters.loginDateFrom || advancedFilters.loginDateTo) {\n      where.loginTimestamp = {};\n      if (advancedFilters.loginDateFrom) {\n        where.loginTimestamp.gte = advancedFilters.loginDateFrom;\n      }\n      if (advancedFilters.loginDateTo) {\n        const endOfDay = new Date(advancedFilters.loginDateTo);\n        endOfDay.setHours(23, 59, 59, 999);\n        where.loginTimestamp.lte = endOfDay;\n      }\n    }\n    if (advancedFilters.imapStatus && advancedFilters.imapStatus !== \"all\") {\n      where.imapStatus = advancedFilters.imapStatus;\n    }\n    if (advancedFilters.ownerId !== void 0) {\n      where.ownerId = advancedFilters.ownerId;\n    }\n    if (advancedFilters.accountTypes && advancedFilters.accountTypes.length > 0) {\n      where.accountType = { in: advancedFilters.accountTypes };\n    }\n    if (!advancedFilters.includeMLAccounts) {\n      if (where.accountType && where.accountType.in) {\n        where.accountType.in = where.accountType.in.filter((type) => type !== \"ML_TREND_FINDER\");\n      } else if (!where.accountType) {\n        where.accountType = { not: \"ML_TREND_FINDER\" };\n      }\n    }\n    if (advancedFilters.visibilityFilter && advancedFilters.visibilityFilter.length > 0) {\n      where.visibility = { in: advancedFilters.visibilityFilter };\n    }\n    if (advancedFilters.includeShared === false) {\n      where.isShared = false;\n    } else if (advancedFilters.includeShared === true) ;\n  }\n  if (searchClauses.length > 0) {\n    where.OR = searchClauses;\n  }\n  return await prisma.igAccount.count({ where });\n}\nasync function updateAccount(id, data) {\n  const updateData = { ...data };\n  if (data.assignedDeviceId && data.assignedDeviceId !== \"\") {\n    updateData.assignmentTimestamp = /* @__PURE__ */ new Date();\n  } else if (data.assignedDeviceId === \"\") {\n    updateData.assignedDeviceId = null;\n    updateData.assignedCloneNumber = null;\n    updateData.assignedPackageName = null;\n    updateData.assignmentTimestamp = null;\n  }\n  if (data.status === \"Logged In\") {\n    updateData.loginTimestamp = /* @__PURE__ */ new Date();\n  }\n  return await prisma.igAccount.update({\n    where: { id },\n    data: updateData\n  });\n}\nasync function deleteAccount(id) {\n  return await prisma.igAccount.delete({\n    where: { id }\n  });\n}\nasync function checkUsernameExists(username, excludeId) {\n  const where = { instagramUsername: username };\n  if (excludeId) {\n    where.id = { not: excludeId };\n  }\n  const account = await prisma.igAccount.findFirst({ where });\n  return !!account;\n}\nasync function getAccountsForUser(userId, userRole, limit = 20, offset = 0) {\n  if (userRole === \"UNAUTHORIZED\") {\n    return { accounts: [], totalCount: 0 };\n  }\n  try {\n    if (userRole === \"ADMIN\") {\n      const advancedFilters = {\n        includeMLAccounts: true\n      };\n      const [accounts2, totalCount2] = await Promise.all([\n        getAccounts(limit, offset, void 0, void 0, advancedFilters),\n        getAccountsCount(void 0, void 0, advancedFilters)\n      ]);\n      return { accounts: accounts2, totalCount: totalCount2 };\n    }\n    const where = {\n      OR: [\n        // User's own accounts\n        {\n          ownerId: userId.toString(),\n          // Convert to string for user ID comparison\n          accountType: { not: \"ML_TREND_FINDER\" }\n          // Exclude ML accounts\n        },\n        // Shared accounts that are not ML accounts\n        {\n          isShared: true,\n          visibility: { in: [\"SHARED\", \"PUBLIC\"] },\n          accountType: { not: \"ML_TREND_FINDER\" }\n        }\n      ]\n    };\n    const [accounts, totalCount] = await Promise.all([\n      prisma.igAccount.findMany({\n        where,\n        orderBy: { createdAt: \"desc\" },\n        take: limit,\n        skip: offset\n      }),\n      prisma.igAccount.count({ where })\n    ]);\n    return { accounts, totalCount };\n  } catch (error) {\n    console.log(\"Prisma not available, falling back to direct SQL queries\");\n    return await getAccountsForUserDirectSQL(userId, userRole, limit, offset);\n  }\n}\nasync function getAccountsForUserDirectSQL(userId, userRole, limit = 20, offset = 0, userEmail) {\n  const pg = await import(\"pg\");\n  const { Client } = pg.default;\n  const client = new Client({\n    connectionString: process.env.DATABASE_URL || \"postgresql://iglogin:boutiquepassword123@5.78.151.248:5432/igloginagent?sslmode=disable&connect_timeout=30\"\n  });\n  try {\n    await client.connect();\n    if (userRole === \"ADMIN\") {\n      const accountsQuery = `\n\t\t\t\tSELECT \n\t\t\t\t\tid, instagram_username, instagram_password, email_address, email_password,\n\t\t\t\t\tstatus, imap_status, assigned_device_id, assigned_clone_number, assigned_package_name,\n\t\t\t\t\tassignment_timestamp, login_timestamp, created_at, updated_at,\n\t\t\t\t\towner_id, account_type, visibility, is_shared, model\n\t\t\t\tFROM ig_accounts \n\t\t\t\tORDER BY created_at DESC \n\t\t\t\tLIMIT $1 OFFSET $2\n\t\t\t`;\n      const countQuery = `SELECT COUNT(*) as total FROM ig_accounts`;\n      const [accountsResult, countResult] = await Promise.all([\n        client.query(accountsQuery, [limit, offset]),\n        client.query(countQuery)\n      ]);\n      return {\n        accounts: accountsResult.rows.map((row) => mapDatabaseRowToAccount(row)),\n        totalCount: parseInt(countResult.rows[0].total)\n      };\n    } else {\n      let modelFilter = \"\";\n      let queryParams = [userId.toString(), limit, offset];\n      if (userEmail && userEmail.includes(\"@gmail.com\")) ;\n      const accountsQuery = `\n\t\t\t\tSELECT \n\t\t\t\t\tid, instagram_username, instagram_password, email_address, email_password,\n\t\t\t\t\tstatus, imap_status, assigned_device_id, assigned_clone_number, assigned_package_name,\n\t\t\t\t\tassignment_timestamp, login_timestamp, created_at, updated_at,\n\t\t\t\t\towner_id, account_type, visibility, is_shared, model\n\t\t\t\tFROM ig_accounts \n\t\t\t\tWHERE (\n\t\t\t\t\t(owner_id = $1 AND account_type != 'ML_TREND_FINDER')\n\t\t\t\t\tOR \n\t\t\t\t\t(is_shared = true AND visibility IN ('SHARED', 'PUBLIC') AND account_type != 'ML_TREND_FINDER')\n\t\t\t\t\t${modelFilter}\n\t\t\t\t)\n\t\t\t\tORDER BY created_at DESC \n\t\t\t\tLIMIT $2 OFFSET $3\n\t\t\t`;\n      const countQuery = `\n\t\t\t\tSELECT COUNT(*) as total \n\t\t\t\tFROM ig_accounts \n\t\t\t\tWHERE (\n\t\t\t\t\t(owner_id = $1 AND account_type != 'ML_TREND_FINDER')\n\t\t\t\t\tOR \n\t\t\t\t\t(is_shared = true AND visibility IN ('SHARED', 'PUBLIC') AND account_type != 'ML_TREND_FINDER')\n\t\t\t\t\t${modelFilter}\n\t\t\t\t)\n\t\t\t`;\n      const [accountsResult, countResult] = await Promise.all([\n        client.query(accountsQuery, queryParams),\n        client.query(countQuery, [userId.toString()])\n      ]);\n      return {\n        accounts: accountsResult.rows.map((row) => mapDatabaseRowToAccount(row)),\n        totalCount: parseInt(countResult.rows[0].total)\n      };\n    }\n  } finally {\n    await client.end();\n  }\n}\nfunction mapDatabaseRowToAccount(row) {\n  return {\n    id: row.id,\n    recordId: row.record_id,\n    instagramUsername: row.instagram_username,\n    instagramPassword: row.instagram_password,\n    emailAddress: row.email_address,\n    emailPassword: row.email_password,\n    status: row.status,\n    imapStatus: row.imap_status,\n    assignedDeviceId: row.assigned_device_id,\n    assignedCloneNumber: row.assigned_clone_number,\n    assignedPackageName: row.assigned_package_name,\n    assignmentTimestamp: row.assignment_timestamp,\n    loginTimestamp: row.login_timestamp,\n    createdAt: row.created_at,\n    updatedAt: row.updated_at,\n    ownerId: row.owner_id,\n    accountType: row.account_type,\n    visibility: row.visibility,\n    isShared: row.is_shared,\n    model: row.model\n  };\n}\nasync function assignAccountToUser(accountId, userId, visibility = \"PRIVATE\") {\n  return await updateAccount(accountId, {\n    ownerId: userId,\n    accountType: \"CLIENT\",\n    visibility,\n    isShared: visibility === \"SHARED\"\n  });\n}\nasync function unassignAccountFromUser(accountId) {\n  return await updateAccount(accountId, {\n    ownerId: null,\n    visibility: \"PRIVATE\",\n    isShared: false\n  });\n}\nasync function convertAccountToML(accountId) {\n  return await updateAccount(accountId, {\n    ownerId: null,\n    accountType: \"ML_TREND_FINDER\",\n    visibility: \"PRIVATE\",\n    isShared: false\n  });\n}\nasync function getAccountOwnershipSummary() {\n  const [\n    totalAccounts,\n    clientAccounts,\n    mlAccounts,\n    systemAccounts,\n    unassignedAccounts,\n    sharedAccounts\n  ] = await Promise.all([\n    prisma.igAccount.count(),\n    prisma.igAccount.count({ where: { accountType: \"CLIENT\" } }),\n    prisma.igAccount.count({ where: { accountType: \"ML_TREND_FINDER\" } }),\n    prisma.igAccount.count({ where: { accountType: \"SYSTEM\" } }),\n    prisma.igAccount.count({ where: { ownerId: null, accountType: \"CLIENT\" } }),\n    prisma.igAccount.count({ where: { isShared: true } })\n  ]);\n  return {\n    total: totalAccounts,\n    byType: {\n      CLIENT: clientAccounts,\n      ML_TREND_FINDER: mlAccounts,\n      SYSTEM: systemAccounts\n    },\n    unassigned: unassignedAccounts,\n    shared: sharedAccounts\n  };\n}\nasync function getDeviceStats() {\n  const allClones = await prisma.cloneInventory.findMany();\n  const deviceMap = /* @__PURE__ */ new Map();\n  allClones.forEach((clone) => {\n    if (!deviceMap.has(clone.deviceId)) {\n      deviceMap.set(clone.deviceId, []);\n    }\n    deviceMap.get(clone.deviceId).push(clone);\n  });\n  const totalDevices = deviceMap.size;\n  const totalClones = allClones.length;\n  const availableClones = allClones.filter((c2) => c2.cloneStatus === \"Available\").length;\n  const assignedClones = allClones.filter((c2) => c2.cloneStatus === \"Assigned\").length;\n  const loggedInClones = allClones.filter((c2) => c2.cloneStatus === \"Logged In\").length;\n  const brokenClones = allClones.filter((c2) => c2.cloneStatus === \"Broken\").length;\n  const clonesByStatus = allClones.reduce((acc, clone) => {\n    acc[clone.cloneStatus] = (acc[clone.cloneStatus] || 0) + 1;\n    return acc;\n  }, {});\n  const devicesByStatus = {\n    \"Available\": 0,\n    \"Logged In\": 0,\n    \"Maintenance\": 0,\n    \"Broken\": 0\n  };\n  deviceMap.forEach((clones) => {\n    const deviceStatus = determineDeviceStatus(clones);\n    devicesByStatus[deviceStatus]++;\n  });\n  return {\n    totalDevices,\n    totalClones,\n    availableClones,\n    assignedClones,\n    loggedInClones,\n    brokenClones,\n    devicesByStatus,\n    clonesByStatus\n  };\n}\nfunction determineDeviceStatus(clones) {\n  if (clones.some((c2) => c2.cloneStatus === \"Broken\" || c2.cloneHealth === \"Broken\")) {\n    return \"Broken\";\n  }\n  if (clones.some((c2) => c2.cloneStatus === \"Maintenance\")) {\n    return \"Maintenance\";\n  }\n  if (clones.some((c2) => c2.cloneStatus === \"Logged In\")) {\n    return \"Logged In\";\n  }\n  return \"Available\";\n}\nasync function getDeviceSummaries() {\n  const allClones = await prisma.cloneInventory.findMany({\n    orderBy: [\n      { deviceId: \"asc\" },\n      { cloneNumber: \"asc\" }\n    ]\n  });\n  const deviceMap = /* @__PURE__ */ new Map();\n  allClones.forEach((clone) => {\n    if (!deviceMap.has(clone.deviceId)) {\n      deviceMap.set(clone.deviceId, []);\n    }\n    deviceMap.get(clone.deviceId).push(clone);\n  });\n  const summaries = [];\n  deviceMap.forEach((clones, deviceId) => {\n    const totalClones = clones.length;\n    const availableClones = clones.filter((c2) => c2.cloneStatus === \"Available\").length;\n    const assignedClones = clones.filter((c2) => c2.cloneStatus === \"Assigned\").length;\n    const loggedInClones = clones.filter((c2) => c2.cloneStatus === \"Logged In\").length;\n    const brokenClones = clones.filter((c2) => c2.cloneStatus === \"Broken\").length;\n    const deviceStatus = determineDeviceStatus(clones);\n    const deviceName = clones[0].deviceName || null;\n    const deviceHealth = clones[0].cloneHealth || null;\n    const lastScanned = clones.reduce(\n      (latest, clone) => clone.lastScanned > latest ? clone.lastScanned : latest,\n      clones[0].lastScanned\n    );\n    summaries.push({\n      deviceId,\n      deviceName,\n      totalClones,\n      availableClones,\n      assignedClones,\n      loggedInClones,\n      brokenClones,\n      deviceStatus,\n      deviceHealth,\n      lastScanned\n    });\n  });\n  return summaries.sort((a2, b2) => a2.deviceId.localeCompare(b2.deviceId));\n}\nasync function getDeviceDetails(deviceId) {\n  const clones = await prisma.cloneInventory.findMany({\n    where: { deviceId },\n    orderBy: { cloneNumber: \"asc\" }\n  });\n  if (clones.length === 0) {\n    return { device: null, clones: [] };\n  }\n  const totalClones = clones.length;\n  const availableClones = clones.filter((c2) => c2.cloneStatus === \"Available\").length;\n  const assignedClones = clones.filter((c2) => c2.cloneStatus === \"Assigned\").length;\n  const loggedInClones = clones.filter((c2) => c2.cloneStatus === \"Logged In\").length;\n  const brokenClones = clones.filter((c2) => c2.cloneStatus === \"Broken\").length;\n  const deviceStatus = determineDeviceStatus(clones);\n  const deviceName = clones[0].deviceName || null;\n  const deviceHealth = clones[0].cloneHealth || null;\n  const lastScanned = clones.reduce(\n    (latest, clone) => clone.lastScanned > latest ? clone.lastScanned : latest,\n    clones[0].lastScanned\n  );\n  const device = {\n    deviceId,\n    deviceName,\n    totalClones,\n    availableClones,\n    assignedClones,\n    loggedInClones,\n    brokenClones,\n    deviceStatus,\n    deviceHealth,\n    lastScanned\n  };\n  return { device, clones };\n}\nasync function assignAccountToClone(deviceId, cloneNumber, instagramUsername) {\n  try {\n    const [updateClone, updateAccount2] = await prisma.$transaction([\n      // Update clone status\n      prisma.cloneInventory.update({\n        where: {\n          deviceId_cloneNumber: {\n            deviceId,\n            cloneNumber\n          }\n        },\n        data: {\n          cloneStatus: \"Assigned\",\n          currentAccount: instagramUsername,\n          updatedAt: /* @__PURE__ */ new Date()\n        }\n      }),\n      // Update account assignment\n      prisma.igAccount.updateMany({\n        where: { instagramUsername },\n        data: {\n          status: \"Assigned\",\n          assignedDeviceId: deviceId,\n          assignedCloneNumber: cloneNumber,\n          assignmentTimestamp: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date()\n        }\n      })\n    ]);\n    return true;\n  } catch (error) {\n    console.error(\"Failed to assign account to clone:\", error);\n    return false;\n  }\n}\nasync function unassignAccountFromClone(deviceId, cloneNumber) {\n  try {\n    const clone = await prisma.cloneInventory.findUnique({\n      where: {\n        deviceId_cloneNumber: {\n          deviceId,\n          cloneNumber\n        }\n      }\n    });\n    if (!clone || !clone.currentAccount) {\n      return false;\n    }\n    await prisma.$transaction([\n      // Update clone status\n      prisma.cloneInventory.update({\n        where: {\n          deviceId_cloneNumber: {\n            deviceId,\n            cloneNumber\n          }\n        },\n        data: {\n          cloneStatus: \"Available\",\n          currentAccount: null,\n          updatedAt: /* @__PURE__ */ new Date()\n        }\n      }),\n      // Update account assignment\n      prisma.igAccount.updateMany({\n        where: { instagramUsername: clone.currentAccount },\n        data: {\n          status: \"Unused\",\n          assignedDeviceId: null,\n          assignedCloneNumber: null,\n          assignmentTimestamp: null,\n          updatedAt: /* @__PURE__ */ new Date()\n        }\n      })\n    ]);\n    return true;\n  } catch (error) {\n    console.error(\"Failed to unassign account from clone:\", error);\n    return false;\n  }\n}\nasync function updateCloneStatus(deviceId, cloneNumber, status) {\n  try {\n    await prisma.cloneInventory.update({\n      where: {\n        deviceId_cloneNumber: {\n          deviceId,\n          cloneNumber\n        }\n      },\n      data: {\n        cloneStatus: status,\n        updatedAt: /* @__PURE__ */ new Date()\n      }\n    });\n    return true;\n  } catch (error) {\n    console.error(\"Failed to update clone status:\", error);\n    return false;\n  }\n}\nasync function getAvailableAccounts(limit = 20) {\n  const accounts = await prisma.igAccount.findMany({\n    where: { status: \"Unused\" },\n    select: {\n      id: true,\n      instagramUsername: true,\n      status: true\n    },\n    orderBy: { instagramUsername: \"asc\" },\n    take: limit\n  });\n  return accounts;\n}\nasync function getDeviceList() {\n  const devices = await prisma.cloneInventory.groupBy({\n    by: [\"deviceId\", \"deviceName\"],\n    orderBy: {\n      deviceId: \"asc\"\n    }\n  });\n  return devices.map((device) => ({\n    deviceId: device.deviceId,\n    deviceName: device.deviceName\n  }));\n}\nasync function getDeviceCapacityAnalysis() {\n  const allClones = await prisma.cloneInventory.findMany({\n    orderBy: [\n      { deviceId: \"asc\" },\n      { cloneNumber: \"asc\" }\n    ]\n  });\n  const deviceMap = /* @__PURE__ */ new Map();\n  allClones.forEach((clone) => {\n    if (!deviceMap.has(clone.deviceId)) {\n      deviceMap.set(clone.deviceId, []);\n    }\n    deviceMap.get(clone.deviceId).push(clone);\n  });\n  const capacityAnalysis = [];\n  deviceMap.forEach((clones, deviceId) => {\n    const totalClones = clones.length;\n    const availableClones = clones.filter((c2) => c2.cloneStatus === \"Available\").length;\n    const assignedClones = clones.filter((c2) => c2.cloneStatus === \"Assigned\").length;\n    const loggedInClones = clones.filter((c2) => c2.cloneStatus === \"Logged In\").length;\n    const brokenClones = clones.filter((c2) => c2.cloneStatus === \"Broken\").length;\n    const deviceStatus = determineDeviceStatus(clones);\n    const deviceName = clones[0].deviceName || null;\n    const activeClones = assignedClones + loggedInClones;\n    const utilizationRate = totalClones > 0 ? activeClones / totalClones * 100 : 0;\n    let efficiency = 100;\n    if (deviceStatus === \"Broken\") efficiency -= 50;\n    if (deviceStatus === \"Maintenance\") efficiency -= 30;\n    if (availableClones > 0) efficiency += 10;\n    if (utilizationRate > 10 && utilizationRate < 90) efficiency += 5;\n    const brokenRate = totalClones > 0 ? brokenClones / totalClones * 100 : 0;\n    efficiency -= brokenRate * 0.5;\n    efficiency = Math.max(0, Math.min(100, efficiency));\n    capacityAnalysis.push({\n      deviceId,\n      deviceName,\n      totalClones,\n      availableClones,\n      assignedClones,\n      loggedInClones,\n      brokenClones,\n      deviceStatus,\n      utilizationRate: Math.round(utilizationRate * 100) / 100,\n      efficiency: Math.round(efficiency * 100) / 100\n    });\n  });\n  return capacityAnalysis.sort((a2, b2) => a2.deviceId.localeCompare(b2.deviceId));\n}\nasync function getOptimalDeviceAssignments(accountIds, strategy = \"capacity-based\") {\n  if (accountIds.length === 0) {\n    return [];\n  }\n  const accounts = await prisma.igAccount.findMany({\n    where: {\n      id: { in: accountIds },\n      status: \"Unused\",\n      assignedDeviceId: null\n    },\n    select: {\n      id: true,\n      instagramUsername: true\n    }\n  });\n  if (accounts.length === 0) {\n    return [];\n  }\n  const availableClones = await prisma.cloneInventory.findMany({\n    where: { cloneStatus: \"Available\" },\n    orderBy: [\n      { deviceId: \"asc\" },\n      { cloneNumber: \"asc\" }\n    ]\n  });\n  if (availableClones.length === 0) {\n    return [];\n  }\n  const deviceCapacity = await getDeviceCapacityAnalysis();\n  new Map(deviceCapacity.map((d) => [d.deviceId, d]));\n  const assignments = [];\n  let cloneIndex = 0;\n  const sortedAccounts = [...accounts].sort((a2, b2) => a2.instagramUsername.localeCompare(b2.instagramUsername));\n  switch (strategy) {\n    case \"round-robin\": {\n      const deviceIds = [...new Set(availableClones.map((c2) => c2.deviceId))].sort();\n      let currentDeviceIndex = 0;\n      for (const account of sortedAccounts) {\n        if (cloneIndex >= availableClones.length) break;\n        let attempts = 0;\n        while (attempts < deviceIds.length) {\n          const targetDeviceId = deviceIds[currentDeviceIndex];\n          const availableClone = availableClones.slice(cloneIndex).find((c2) => c2.deviceId === targetDeviceId);\n          if (availableClone) {\n            assignments.push({\n              accountId: account.id,\n              instagramUsername: account.instagramUsername,\n              deviceId: availableClone.deviceId,\n              cloneNumber: availableClone.cloneNumber,\n              packageName: availableClone.packageName\n            });\n            const removeIndex = availableClones.findIndex(\n              (c2) => c2.deviceId === availableClone.deviceId && c2.cloneNumber === availableClone.cloneNumber\n            );\n            if (removeIndex >= 0) {\n              availableClones.splice(removeIndex, 1);\n            }\n            break;\n          }\n          currentDeviceIndex = (currentDeviceIndex + 1) % deviceIds.length;\n          attempts++;\n        }\n        currentDeviceIndex = (currentDeviceIndex + 1) % deviceIds.length;\n      }\n      break;\n    }\n    case \"fill-first\": {\n      const sortedClones = [...availableClones].sort(\n        (a2, b2) => a2.deviceId.localeCompare(b2.deviceId) || a2.cloneNumber - b2.cloneNumber\n      );\n      for (let i = 0; i < sortedAccounts.length && i < sortedClones.length; i++) {\n        const account = sortedAccounts[i];\n        const clone = sortedClones[i];\n        assignments.push({\n          accountId: account.id,\n          instagramUsername: account.instagramUsername,\n          deviceId: clone.deviceId,\n          cloneNumber: clone.cloneNumber,\n          packageName: clone.packageName\n        });\n      }\n      break;\n    }\n    case \"capacity-based\": {\n      const deviceEfficiencyOrder = deviceCapacity.filter((d) => d.availableClones > 0 && d.deviceStatus !== \"Broken\").sort((a2, b2) => {\n        if (b2.efficiency !== a2.efficiency) {\n          return b2.efficiency - a2.efficiency;\n        }\n        if (b2.availableClones !== a2.availableClones) {\n          return b2.availableClones - a2.availableClones;\n        }\n        return a2.deviceId.localeCompare(b2.deviceId);\n      });\n      const clonesByDevice = /* @__PURE__ */ new Map();\n      availableClones.forEach((clone) => {\n        if (!clonesByDevice.has(clone.deviceId)) {\n          clonesByDevice.set(clone.deviceId, []);\n        }\n        clonesByDevice.get(clone.deviceId).push(clone);\n      });\n      clonesByDevice.forEach((clones) => {\n        clones.sort((a2, b2) => a2.cloneNumber - b2.cloneNumber);\n      });\n      let accountIndex = 0;\n      for (const deviceCapacity2 of deviceEfficiencyOrder) {\n        const deviceClones = clonesByDevice.get(deviceCapacity2.deviceId) || [];\n        for (const clone of deviceClones) {\n          if (accountIndex >= sortedAccounts.length) break;\n          const account = sortedAccounts[accountIndex];\n          assignments.push({\n            accountId: account.id,\n            instagramUsername: account.instagramUsername,\n            deviceId: clone.deviceId,\n            cloneNumber: clone.cloneNumber,\n            packageName: clone.packageName\n          });\n          accountIndex++;\n        }\n        if (accountIndex >= sortedAccounts.length) break;\n      }\n      break;\n    }\n  }\n  return assignments;\n}\nasync function validateAssignmentFeasibility(accountIds) {\n  const result = {\n    isValid: true,\n    canAssign: 0,\n    totalRequested: accountIds.length,\n    errors: [],\n    warnings: []\n  };\n  if (accountIds.length === 0) {\n    result.errors.push(\"No accounts specified for assignment\");\n    result.isValid = false;\n    return result;\n  }\n  try {\n    const accounts = await prisma.igAccount.findMany({\n      where: { id: { in: accountIds } },\n      select: {\n        id: true,\n        instagramUsername: true,\n        status: true,\n        assignedDeviceId: true\n      }\n    });\n    if (accounts.length !== accountIds.length) {\n      const foundIds = accounts.map((a2) => a2.id);\n      const missingIds = accountIds.filter((id) => !foundIds.includes(id));\n      result.errors.push(`Accounts not found: ${missingIds.join(\", \")}`);\n    }\n    const unavailableAccounts = accounts.filter(\n      (a2) => a2.status !== \"Unused\" || a2.assignedDeviceId !== null\n    );\n    if (unavailableAccounts.length > 0) {\n      result.errors.push(\n        `Accounts not available for assignment: ${unavailableAccounts.map((a2) => a2.instagramUsername).join(\", \")}`\n      );\n    }\n    const availableAccountCount = accounts.length - unavailableAccounts.length;\n    const availableClones = await prisma.cloneInventory.count({\n      where: { cloneStatus: \"Available\" }\n    });\n    if (availableClones === 0) {\n      result.errors.push(\"No available clones for assignment\");\n    }\n    result.canAssign = Math.min(availableAccountCount, availableClones);\n    if (result.canAssign < result.totalRequested) {\n      const shortage = result.totalRequested - result.canAssign;\n      result.warnings.push(`Can only assign ${result.canAssign} of ${result.totalRequested} accounts (shortage: ${shortage})`);\n    }\n    if (availableClones < result.totalRequested) {\n      result.warnings.push(`Only ${availableClones} clones available for ${result.totalRequested} accounts`);\n    }\n    const deviceCapacity = await getDeviceCapacityAnalysis();\n    const brokenDevices = deviceCapacity.filter((d) => d.deviceStatus === \"Broken\");\n    if (brokenDevices.length > 0) {\n      result.warnings.push(`${brokenDevices.length} devices are in broken status and unavailable`);\n    }\n    const maintenanceDevices = deviceCapacity.filter((d) => d.deviceStatus === \"Maintenance\");\n    if (maintenanceDevices.length > 0) {\n      result.warnings.push(`${maintenanceDevices.length} devices are in maintenance and may have limited availability`);\n    }\n    if (result.errors.length > 0) {\n      result.isValid = false;\n    }\n    return result;\n  } catch (error) {\n    console.error(\"Error validating assignment feasibility:\", error);\n    result.isValid = false;\n    result.errors.push(\"Failed to validate assignment feasibility due to database error\");\n    return result;\n  }\n}\nasync function assignAccountsToDevicesAutomatically(accountIds, strategy = \"capacity-based\") {\n  const result = {\n    success: false,\n    assignedCount: 0,\n    totalRequested: accountIds.length,\n    assignments: [],\n    errors: [],\n    failedAccounts: []\n  };\n  try {\n    const validation = await validateAssignmentFeasibility(accountIds);\n    if (!validation.isValid) {\n      result.errors = validation.errors;\n      return result;\n    }\n    const optimalAssignments = await getOptimalDeviceAssignments(accountIds, strategy);\n    if (optimalAssignments.length === 0) {\n      result.errors.push(\"No optimal assignments found\");\n      return result;\n    }\n    await prisma.$transaction(async (tx) => {\n      for (const assignment of optimalAssignments) {\n        try {\n          await tx.cloneInventory.update({\n            where: {\n              deviceId_cloneNumber: {\n                deviceId: assignment.deviceId,\n                cloneNumber: assignment.cloneNumber\n              }\n            },\n            data: {\n              cloneStatus: \"Assigned\",\n              currentAccount: assignment.instagramUsername,\n              updatedAt: /* @__PURE__ */ new Date()\n            }\n          });\n          await tx.igAccount.update({\n            where: { id: assignment.accountId },\n            data: {\n              status: \"Assigned\",\n              assignedDeviceId: assignment.deviceId,\n              assignedCloneNumber: assignment.cloneNumber,\n              assignedPackageName: assignment.packageName,\n              assignmentTimestamp: /* @__PURE__ */ new Date(),\n              updatedAt: /* @__PURE__ */ new Date()\n            }\n          });\n          result.assignments.push(assignment);\n          result.assignedCount++;\n        } catch (assignmentError) {\n          console.error(`Failed to assign account ${assignment.instagramUsername}:`, assignmentError);\n          result.failedAccounts.push({\n            accountId: assignment.accountId,\n            instagramUsername: assignment.instagramUsername,\n            error: assignmentError instanceof Error ? assignmentError.message : \"Unknown assignment error\"\n          });\n        }\n      }\n    });\n    result.success = result.assignedCount > 0;\n    if (result.failedAccounts.length > 0) {\n      result.errors.push(`Failed to assign ${result.failedAccounts.length} accounts`);\n    }\n    return result;\n  } catch (error) {\n    console.error(\"Error in automatic assignment:\", error);\n    result.errors.push(\"Transaction failed during automatic assignment\");\n    const processedAccountIds = result.assignments.map((a2) => a2.accountId);\n    const unprocessedIds = accountIds.filter((id) => !processedAccountIds.includes(id));\n    for (const accountId of unprocessedIds) {\n      result.failedAccounts.push({\n        accountId,\n        instagramUsername: `Account-${accountId}`,\n        error: \"Assignment transaction was rolled back\"\n      });\n    }\n    return result;\n  }\n}\nexport {\n  A as ACCOUNT_STATUSES,\n  a as CLONE_HEALTH,\n  C as CLONE_STATUSES,\n  D as DEVICE_STATUSES,\n  assignAccountToClone,\n  assignAccountToUser,\n  assignAccountsToDevicesAutomatically,\n  checkUsernameExists,\n  convertAccountToML,\n  createAccount,\n  deleteAccount,\n  getAccountById,\n  getAccountOwnershipSummary,\n  getAccountStats,\n  getAccounts,\n  getAccountsCount,\n  getAccountsForUser,\n  getAvailableAccounts,\n  b as getCloneStatusClass,\n  getDeviceCapacityAnalysis,\n  getDeviceDetails,\n  getDeviceList,\n  getDeviceStats,\n  c as getDeviceStatusClass,\n  getDeviceSummaries,\n  getOptimalDeviceAssignments,\n  getPrismaClient,\n  g as getStatusClass,\n  isPrismaAvailable,\n  prisma,\n  unassignAccountFromClone,\n  unassignAccountFromUser,\n  updateAccount,\n  updateCloneStatus,\n  validateAssignmentFeasibility\n};\n"],"names":[],"mappings":"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"}