{"version":3,"file":"_server.ts-CmLviui6.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/devices/auto-assign/_server.ts.js"],"sourcesContent":["import { error, json } from \"@sveltejs/kit\";\nimport { prisma } from \"../../../../../chunks/db-loader.js\";\nconst POST = async ({ request }) => {\n  try {\n    const body = await request.json();\n    const { accountId, instagramUsername, strategy = \"round-robin\", deviceId, preferDeviceIds } = body;\n    if (!accountId && !instagramUsername) {\n      throw error(400, \"Either accountId or instagramUsername is required\");\n    }\n    let account;\n    if (accountId) {\n      account = await prisma.igAccount.findUnique({\n        where: { id: accountId },\n        select: {\n          id: true,\n          instagramUsername: true,\n          status: true,\n          assignedDeviceId: true,\n          assignedCloneNumber: true\n        }\n      });\n    } else {\n      account = await prisma.igAccount.findFirst({\n        where: { instagramUsername },\n        select: {\n          id: true,\n          instagramUsername: true,\n          status: true,\n          assignedDeviceId: true,\n          assignedCloneNumber: true\n        }\n      });\n    }\n    if (!account) {\n      throw error(404, \"Account not found\");\n    }\n    if (account.assignedDeviceId && account.assignedCloneNumber) {\n      return json({\n        success: false,\n        error: `Account ${account.instagramUsername} is already assigned to device ${account.assignedDeviceId} clone ${account.assignedCloneNumber}`,\n        availableCapacity: await getCapacityInfo()\n      });\n    }\n    const assignment = await findOptimalAssignment(account, strategy, deviceId, preferDeviceIds);\n    if (!assignment) {\n      return json({\n        success: false,\n        error: \"No available clones found for assignment\",\n        availableCapacity: await getCapacityInfo()\n      });\n    }\n    const success = await performAssignment(account, assignment.clone);\n    if (success) {\n      return json({\n        success: true,\n        assignment: {\n          accountId: account.id,\n          instagramUsername: account.instagramUsername,\n          deviceId: assignment.clone.deviceId,\n          cloneNumber: assignment.clone.cloneNumber,\n          packageName: assignment.clone.packageName,\n          strategy\n        }\n      });\n    } else {\n      return json({\n        success: false,\n        error: \"Failed to perform assignment due to database error\",\n        availableCapacity: await getCapacityInfo()\n      });\n    }\n  } catch (err) {\n    console.error(\"Auto-assign error:\", err);\n    if (err instanceof Error) {\n      throw error(500, err.message);\n    }\n    throw error(500, \"Internal server error during auto-assignment\");\n  }\n};\nconst GET = async ({ url }) => {\n  try {\n    const accountIdParam = url.searchParams.get(\"accountId\");\n    const instagramUsername = url.searchParams.get(\"instagramUsername\");\n    const strategy = url.searchParams.get(\"strategy\") || \"round-robin\";\n    const deviceId = url.searchParams.get(\"deviceId\") || void 0;\n    let account = null;\n    if (accountIdParam || instagramUsername) {\n      if (accountIdParam) {\n        account = await prisma.igAccount.findUnique({\n          where: { id: parseInt(accountIdParam) },\n          select: {\n            id: true,\n            instagramUsername: true,\n            status: true,\n            assignedDeviceId: true,\n            assignedCloneNumber: true\n          }\n        });\n      } else if (instagramUsername) {\n        account = await prisma.igAccount.findFirst({\n          where: { instagramUsername },\n          select: {\n            id: true,\n            instagramUsername: true,\n            status: true,\n            assignedDeviceId: true,\n            assignedCloneNumber: true\n          }\n        });\n      }\n      if (!account) {\n        throw error(404, \"Account not found\");\n      }\n    }\n    const capacityInfo = await getCapacityInfo(deviceId);\n    let suggestedAssignment = null;\n    if (account && !account.assignedDeviceId) {\n      const assignment = await findOptimalAssignment(account, strategy, deviceId);\n      if (assignment) {\n        suggestedAssignment = {\n          deviceId: assignment.clone.deviceId,\n          cloneNumber: assignment.clone.cloneNumber,\n          packageName: assignment.clone.packageName,\n          strategy\n        };\n      }\n    }\n    return json({\n      success: true,\n      availableCapacity: capacityInfo,\n      suggestedAssignment,\n      accountStatus: account ? {\n        id: account.id,\n        instagramUsername: account.instagramUsername,\n        status: account.status,\n        alreadyAssigned: !!(account.assignedDeviceId && account.assignedCloneNumber)\n      } : null\n    });\n  } catch (err) {\n    console.error(\"Auto-assign preview error:\", err);\n    if (err instanceof Error) {\n      throw error(500, err.message);\n    }\n    throw error(500, \"Internal server error during assignment preview\");\n  }\n};\nasync function findOptimalAssignment(account, strategy, specificDeviceId, preferDeviceIds) {\n  const whereClause = {\n    cloneStatus: \"Available\"\n  };\n  if (specificDeviceId) {\n    whereClause.deviceId = specificDeviceId;\n  } else if (preferDeviceIds && preferDeviceIds.length > 0) {\n    whereClause.deviceId = { in: preferDeviceIds };\n  }\n  let availableClones = await prisma.cloneInventory.findMany({\n    where: whereClause,\n    orderBy: [\n      { deviceId: \"asc\" },\n      { cloneNumber: \"asc\" }\n    ]\n  });\n  if (availableClones.length === 0 && !specificDeviceId && preferDeviceIds) {\n    availableClones = await prisma.cloneInventory.findMany({\n      where: { cloneStatus: \"Available\" },\n      orderBy: [\n        { deviceId: \"asc\" },\n        { cloneNumber: \"asc\" }\n      ]\n    });\n  }\n  if (availableClones.length === 0) {\n    return null;\n  }\n  let selectedClone;\n  switch (strategy) {\n    case \"round-robin\":\n      selectedClone = selectRoundRobinClone(availableClones);\n      break;\n    case \"fill-first\":\n      selectedClone = availableClones[0];\n      break;\n    case \"capacity-based\":\n      selectedClone = await selectCapacityBasedClone(availableClones);\n      break;\n    default:\n      selectedClone = availableClones[0];\n  }\n  return { clone: selectedClone };\n}\nfunction selectRoundRobinClone(availableClones) {\n  const deviceGroups = /* @__PURE__ */ new Map();\n  for (const clone of availableClones) {\n    if (!deviceGroups.has(clone.deviceId)) {\n      deviceGroups.set(clone.deviceId, []);\n    }\n    deviceGroups.get(clone.deviceId).push(clone);\n  }\n  let bestDevice = \"\";\n  let maxAvailable = 0;\n  for (const [deviceId, clones] of deviceGroups) {\n    if (clones.length > maxAvailable) {\n      maxAvailable = clones.length;\n      bestDevice = deviceId;\n    }\n  }\n  return deviceGroups.get(bestDevice)[0];\n}\nasync function selectCapacityBasedClone(availableClones) {\n  const deviceClones = /* @__PURE__ */ new Map();\n  for (const clone of availableClones) {\n    if (!deviceClones.has(clone.deviceId)) {\n      deviceClones.set(clone.deviceId, []);\n    }\n    deviceClones.get(clone.deviceId).push(clone);\n  }\n  const deviceCapacities = /* @__PURE__ */ new Map();\n  for (const deviceId of deviceClones.keys()) {\n    const totalClones = await prisma.cloneInventory.count({\n      where: { deviceId }\n    });\n    deviceCapacities.set(deviceId, totalClones);\n  }\n  let bestDevice = \"\";\n  let maxCapacity = 0;\n  for (const [deviceId, capacity] of deviceCapacities) {\n    if (capacity > maxCapacity) {\n      maxCapacity = capacity;\n      bestDevice = deviceId;\n    }\n  }\n  return deviceClones.get(bestDevice)[0];\n}\nasync function performAssignment(account, clone) {\n  try {\n    await prisma.$transaction(async (tx) => {\n      await tx.igAccount.update({\n        where: { id: account.id },\n        data: {\n          status: \"Assigned\",\n          assignedDeviceId: clone.deviceId,\n          assignedCloneNumber: clone.cloneNumber,\n          assignedPackageName: clone.packageName,\n          assignmentTimestamp: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date()\n        }\n      });\n      await tx.cloneInventory.update({\n        where: {\n          deviceId_cloneNumber: {\n            deviceId: clone.deviceId,\n            cloneNumber: clone.cloneNumber\n          }\n        },\n        data: {\n          cloneStatus: \"Assigned\",\n          currentAccount: account.instagramUsername,\n          updatedAt: /* @__PURE__ */ new Date()\n        }\n      });\n    });\n    return true;\n  } catch (assignmentError) {\n    console.error(\"Assignment transaction error:\", assignmentError);\n    return false;\n  }\n}\nasync function getCapacityInfo(specificDeviceId) {\n  const whereClause = {\n    cloneStatus: \"Available\"\n  };\n  if (specificDeviceId) {\n    whereClause.deviceId = specificDeviceId;\n  }\n  const availableClones = await prisma.cloneInventory.findMany({\n    where: whereClause,\n    select: {\n      deviceId: true,\n      deviceName: true,\n      cloneNumber: true\n    }\n  });\n  const deviceMap = /* @__PURE__ */ new Map();\n  for (const clone of availableClones) {\n    if (!deviceMap.has(clone.deviceId)) {\n      deviceMap.set(clone.deviceId, {\n        deviceName: clone.deviceName,\n        count: 0\n      });\n    }\n    deviceMap.get(clone.deviceId).count++;\n  }\n  const deviceBreakdown = Array.from(deviceMap.entries()).map(([deviceId, info]) => ({\n    deviceId,\n    deviceName: info.deviceName,\n    availableClones: info.count\n  }));\n  return {\n    totalAvailable: availableClones.length,\n    deviceBreakdown: deviceBreakdown.sort((a, b) => a.deviceId.localeCompare(b.deviceId))\n  };\n}\nexport {\n  GET,\n  POST\n};\n"],"names":[],"mappings":"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"}