{"version":3,"file":"_server.ts-CpOn4OId.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/devices/capacity-check/_server.ts.js"],"sourcesContent":["import { error, json } from \"@sveltejs/kit\";\nimport { getPrisma } from \"../../../../../chunks/db-loader.js\";\nlet capacityCache = null;\nconst CACHE_TTL_MS = 3e4;\nconst PERFORMANCE_WARNING_THRESHOLD_MS = 5e3;\nlet cacheWarmingInterval = null;\nfunction startCacheWarming() {\n  if (cacheWarmingInterval) return;\n  cacheWarmingInterval = setInterval(async () => {\n    try {\n      console.log(\"[CacheWarming] Starting background cache refresh...\");\n      const startTime = Date.now();\n      const data = await getCapacityData({\n        includeUnhealthy: false,\n        status: \"all\"\n      }, \"cache-warm\");\n      const responseTime = Date.now() - startTime;\n      capacityCache = {\n        data: {\n          ...data,\n          realTimeMetrics: {\n            timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n            responseTimeMs: responseTime,\n            cacheHit: false\n          }\n        },\n        timestamp: Date.now(),\n        ttlMs: CACHE_TTL_MS\n      };\n      console.log(`[CacheWarming] Cache refreshed in ${responseTime}ms`);\n      if (responseTime > PERFORMANCE_WARNING_THRESHOLD_MS) {\n        console.warn(`[CacheWarming] Performance warning: Cache refresh took ${responseTime}ms (threshold: ${PERFORMANCE_WARNING_THRESHOLD_MS}ms)`);\n      }\n    } catch (error2) {\n      console.error(\"[CacheWarming] Failed to refresh cache:\", error2);\n    }\n  }, 25e3);\n}\nstartCacheWarming();\nconst GET = async ({ url }) => {\n  const startTime = Date.now();\n  const requestId = `cap-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  console.log(`[${requestId}] Starting capacity check request`);\n  try {\n    const deviceId = url.searchParams.get(\"deviceId\") || void 0;\n    const deviceIdsParam = url.searchParams.get(\"deviceIds\");\n    const deviceIds = deviceIdsParam ? deviceIdsParam.split(\",\") : void 0;\n    const minAvailableClones = url.searchParams.get(\"minAvailableClones\");\n    const includeUnhealthy = url.searchParams.get(\"includeUnhealthy\") === \"true\";\n    const status = url.searchParams.get(\"status\") || \"all\";\n    const useCache = url.searchParams.get(\"cache\") !== \"false\";\n    if (minAvailableClones && (isNaN(parseInt(minAvailableClones)) || parseInt(minAvailableClones) < 0)) {\n      console.log(`[${requestId}] Invalid minAvailableClones parameter: ${minAvailableClones}`);\n      throw error(400, \"minAvailableClones must be a non-negative integer\");\n    }\n    if (deviceIds && deviceIds.some((id) => !id.trim())) {\n      console.log(`[${requestId}] Invalid deviceIds parameter: contains empty IDs`);\n      throw error(400, \"deviceIds parameter contains invalid device IDs\");\n    }\n    const filters = {\n      deviceId,\n      deviceIds,\n      minAvailableClones: minAvailableClones ? parseInt(minAvailableClones) : void 0,\n      includeUnhealthy,\n      status\n    };\n    console.log(`[${requestId}] Request filters:`, JSON.stringify(filters, null, 2));\n    const isCacheableRequest = !deviceId && !deviceIds && !minAvailableClones && status === \"all\";\n    let usingCache = false;\n    if (useCache && isCacheableRequest && capacityCache) {\n      const age = Date.now() - capacityCache.timestamp;\n      if (age < capacityCache.ttlMs) {\n        const responseTime2 = Date.now() - startTime;\n        usingCache = true;\n        console.log(`[${requestId}] Cache hit - age: ${age}ms, response time: ${responseTime2}ms`);\n        const cachedResponse = {\n          ...capacityCache.data,\n          realTimeMetrics: {\n            timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n            responseTimeMs: responseTime2,\n            cacheHit: true\n          }\n        };\n        return json(cachedResponse);\n      } else {\n        console.log(`[${requestId}] Cache expired - age: ${age}ms, TTL: ${capacityCache.ttlMs}ms`);\n      }\n    } else {\n      console.log(`[${requestId}] Cache not applicable - useCache: ${useCache}, isCacheable: ${isCacheableRequest}, hasCache: ${!!capacityCache}`);\n    }\n    console.log(`[${requestId}] Fetching fresh capacity data...`);\n    const capacityData = await getCapacityData(filters, requestId);\n    const responseTime = Date.now() - startTime;\n    console.log(`[${requestId}] Data fetch completed - response time: ${responseTime}ms, devices: ${capacityData.deviceCapacities.length}, total available: ${capacityData.totalCapacity.availableClones}`);\n    const response = {\n      ...capacityData,\n      realTimeMetrics: {\n        timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n        responseTimeMs: responseTime,\n        cacheHit: usingCache\n      }\n    };\n    if (isCacheableRequest) {\n      capacityCache = {\n        data: response,\n        timestamp: Date.now(),\n        ttlMs: CACHE_TTL_MS\n      };\n      console.log(`[${requestId}] Updated cache with fresh data`);\n    }\n    console.log(`[${requestId}] Request completed successfully - total time: ${responseTime}ms`);\n    return json(response);\n  } catch (err) {\n    const responseTime = Date.now() - startTime;\n    const errorMessage = err instanceof Error ? err.message : \"Failed to check capacity\";\n    console.error(`[${requestId}] Capacity check error (${responseTime}ms):`, {\n      error: errorMessage,\n      stack: err instanceof Error ? err.stack : void 0,\n      context: \"capacity-check-endpoint\"\n    });\n    return json({\n      error: errorMessage,\n      realTimeMetrics: {\n        timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n        responseTimeMs: responseTime,\n        cacheHit: false\n      },\n      requestId\n    }, { status: 500 });\n  }\n};\nconst POST = async ({ request }) => {\n  const startTime = Date.now();\n  const requestId = `sim-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  console.log(`[${requestId}] Starting capacity simulation request`);\n  try {\n    const body = await request.json();\n    const {\n      requiredSlots = 1,\n      accountIds = [],\n      strategy = \"round-robin\",\n      preferredDevices = [],\n      excludeDevices = []\n    } = body;\n    console.log(`[${requestId}] Simulation parameters:`, {\n      requiredSlots,\n      accountIds: accountIds.length,\n      strategy,\n      preferredDevices: preferredDevices.length,\n      excludeDevices: excludeDevices.length\n    });\n    if (requiredSlots < 1 || requiredSlots > 100) {\n      console.log(`[${requestId}] Invalid requiredSlots: ${requiredSlots}`);\n      throw error(400, \"requiredSlots must be between 1 and 100\");\n    }\n    if (accountIds.length > 0 && accountIds.some((id) => typeof id !== \"number\" || id <= 0)) {\n      console.log(`[${requestId}] Invalid accountIds provided`);\n      throw error(400, \"accountIds must be an array of positive integers\");\n    }\n    const filters = {\n      deviceIds: preferredDevices.length > 0 ? preferredDevices : void 0,\n      includeUnhealthy: false,\n      status: \"available\"\n    };\n    console.log(`[${requestId}] Fetching capacity data for simulation...`);\n    const capacityData = await getCapacityData(filters, requestId);\n    const filteredDevices = capacityData.deviceCapacities.filter(\n      (device) => !excludeDevices.includes(device.deviceId)\n    );\n    const totalAvailableSlots = filteredDevices.reduce(\n      (sum, device) => sum + device.availableClones,\n      0\n    );\n    const canAssign = totalAvailableSlots >= requiredSlots;\n    console.log(`[${requestId}] Assignment feasibility: canAssign=${canAssign}, required=${requiredSlots}, available=${totalAvailableSlots}`);\n    let assignmentPlan = [];\n    if (canAssign) {\n      console.log(`[${requestId}] Running assignment simulation with strategy: ${strategy}`);\n      assignmentPlan = simulateAssignment(filteredDevices, requiredSlots, strategy);\n      console.log(`[${requestId}] Simulation complete - ${assignmentPlan.length} devices would be used`);\n    }\n    const responseTime = Date.now() - startTime;\n    console.log(`[${requestId}] Simulation request completed in ${responseTime}ms`);\n    return json({\n      canAssign,\n      requiredSlots,\n      availableSlots: totalAvailableSlots,\n      shortfall: canAssign ? 0 : requiredSlots - totalAvailableSlots,\n      strategy,\n      assignmentPlan,\n      alternativeStrategies: canAssign ? [] : await getSuggestedAlternatives(capacityData, requiredSlots),\n      deviceCapacities: filteredDevices,\n      realTimeMetrics: {\n        timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n        responseTimeMs: responseTime,\n        cacheHit: false\n      }\n    });\n  } catch (err) {\n    console.error(\"Capacity check simulation error:\", err);\n    if (err instanceof Error) {\n      throw error(500, err.message);\n    }\n    throw error(500, \"Internal server error during capacity simulation\");\n  }\n};\nasync function getCapacityData(filters, requestId) {\n  const logPrefix = requestId ? `[${requestId}]` : \"[CapacityData]\";\n  const prisma = await getPrisma();\n  let cloneWhereClause = {};\n  if (filters.deviceId) {\n    cloneWhereClause.deviceId = filters.deviceId;\n  } else if (filters.deviceIds && filters.deviceIds.length > 0) {\n    cloneWhereClause.deviceId = { in: filters.deviceIds };\n  }\n  if (filters.status && filters.status !== \"all\") {\n    const statusMap = {\n      \"available\": \"Available\",\n      \"assigned\": \"Assigned\",\n      \"logged-in\": \"Logged In\",\n      \"broken\": \"Broken\"\n    };\n    cloneWhereClause.cloneStatus = statusMap[filters.status];\n  }\n  if (!filters.includeUnhealthy) {\n    cloneWhereClause.cloneHealth = { not: \"Broken\" };\n  }\n  console.log(`${logPrefix} Query conditions:`, JSON.stringify(cloneWhereClause, null, 2));\n  const cloneQueryStart = Date.now();\n  const allClones = await prisma.cloneInventory.findMany({\n    where: cloneWhereClause,\n    select: {\n      deviceId: true,\n      deviceName: true,\n      cloneNumber: true,\n      cloneStatus: true,\n      cloneHealth: true,\n      lastScanned: true,\n      currentAccount: true\n    }\n  });\n  const cloneQueryTime = Date.now() - cloneQueryStart;\n  console.log(`${logPrefix} Clone query completed in ${cloneQueryTime}ms, found ${allClones.length} clones`);\n  const processingStart = Date.now();\n  const deviceMap = /* @__PURE__ */ new Map();\n  for (const clone of allClones) {\n    if (!deviceMap.has(clone.deviceId)) {\n      deviceMap.set(clone.deviceId, {\n        deviceName: clone.deviceName,\n        clones: [],\n        lastScanned: clone.lastScanned,\n        deviceHealth: clone.cloneHealth,\n        statusCounts: { available: 0, assigned: 0, loggedIn: 0, broken: 0 }\n      });\n    }\n    const deviceData = deviceMap.get(clone.deviceId);\n    deviceData.clones.push(clone);\n    switch (clone.cloneStatus) {\n      case \"Available\":\n        deviceData.statusCounts.available++;\n        break;\n      case \"Assigned\":\n        deviceData.statusCounts.assigned++;\n        break;\n      case \"Logged In\":\n        deviceData.statusCounts.loggedIn++;\n        break;\n      case \"Broken\":\n        deviceData.statusCounts.broken++;\n        break;\n    }\n    if (clone.lastScanned > deviceData.lastScanned) {\n      deviceData.lastScanned = clone.lastScanned;\n    }\n  }\n  const processingTime = Date.now() - processingStart;\n  console.log(`${logPrefix} Data processing completed in ${processingTime}ms, processed ${deviceMap.size} devices`);\n  const deviceCapacities = Array.from(deviceMap.entries()).map(([deviceId, data]) => {\n    const totalClones = data.clones.length;\n    const { available: availableClones, assigned: assignedClones, loggedIn: loggedInClones, broken: brokenClones } = data.statusCounts;\n    const utilizationRate = totalClones > 0 ? (assignedClones + loggedInClones) / totalClones * 100 : 0;\n    return {\n      deviceId,\n      deviceName: data.deviceName,\n      totalClones,\n      availableClones,\n      assignedClones,\n      loggedInClones,\n      brokenClones,\n      utilizationRate: Math.round(utilizationRate * 100) / 100,\n      lastScanned: data.lastScanned.toISOString(),\n      deviceHealth: data.deviceHealth\n    };\n  }).filter((device) => {\n    if (filters.minAvailableClones && device.availableClones < filters.minAvailableClones) {\n      return false;\n    }\n    return true;\n  });\n  const totalCapacity = {\n    totalClones: deviceCapacities.reduce((sum, device) => sum + device.totalClones, 0),\n    availableClones: deviceCapacities.reduce((sum, device) => sum + device.availableClones, 0),\n    assignedClones: deviceCapacities.reduce((sum, device) => sum + device.assignedClones, 0),\n    loggedInClones: deviceCapacities.reduce((sum, device) => sum + device.loggedInClones, 0),\n    brokenClones: deviceCapacities.reduce((sum, device) => sum + device.brokenClones, 0),\n    utilizationRate: 0\n  };\n  totalCapacity.utilizationRate = totalCapacity.totalClones > 0 ? Math.round((totalCapacity.assignedClones + totalCapacity.loggedInClones) / totalCapacity.totalClones * 1e4) / 100 : 0;\n  const assignmentRecommendations = generateAssignmentRecommendations(deviceCapacities, totalCapacity);\n  return {\n    totalCapacity,\n    deviceCapacities: deviceCapacities.sort((a, b) => a.deviceId.localeCompare(b.deviceId)),\n    assignmentRecommendations\n  };\n}\nfunction generateAssignmentRecommendations(deviceCapacities, totalCapacity) {\n  const availableDevices = deviceCapacities.filter((d) => d.availableClones > 0);\n  let recommendedStrategy = \"round-robin\";\n  let reasoning = \"\";\n  let bottleneckDevice;\n  const brokenDevices = deviceCapacities.filter((d) => d.brokenClones > d.totalClones * 0.3);\n  if (brokenDevices.length > 0) {\n    bottleneckDevice = {\n      deviceId: brokenDevices[0].deviceId,\n      issue: `High broken clone ratio (${brokenDevices[0].brokenClones}/${brokenDevices[0].totalClones})`\n    };\n  }\n  if (availableDevices.length === 0) {\n    recommendedStrategy = \"round-robin\";\n    reasoning = \"No available devices - strategy irrelevant\";\n  } else if (availableDevices.length === 1) {\n    recommendedStrategy = \"fill-first\";\n    reasoning = \"Only one device available - use fill-first strategy\";\n  } else {\n    const capacityVariance = calculateCapacityVariance(availableDevices);\n    const avgUtilization = totalCapacity.utilizationRate;\n    if (capacityVariance > 50) {\n      recommendedStrategy = \"capacity-based\";\n      reasoning = \"High capacity variance between devices - prefer devices with more total capacity\";\n    } else if (avgUtilization > 70) {\n      recommendedStrategy = \"round-robin\";\n      reasoning = \"High system utilization - distribute load evenly across devices\";\n    } else {\n      recommendedStrategy = \"fill-first\";\n      reasoning = \"Low utilization with similar device capacities - fill devices sequentially for better resource management\";\n    }\n  }\n  return {\n    recommendedStrategy,\n    reasoning,\n    canAssignAccounts: totalCapacity.availableClones,\n    bottleneckDevice\n  };\n}\nfunction calculateCapacityVariance(devices) {\n  if (devices.length < 2) return 0;\n  const capacities = devices.map((d) => d.totalClones);\n  const mean = capacities.reduce((sum, cap) => sum + cap, 0) / capacities.length;\n  const variance = capacities.reduce((sum, cap) => sum + Math.pow(cap - mean, 2), 0) / capacities.length;\n  return Math.sqrt(variance);\n}\nfunction simulateAssignment(devices, requiredSlots, strategy) {\n  const plan = [];\n  let remainingSlots = requiredSlots;\n  const sortedDevices = [...devices];\n  switch (strategy) {\n    case \"fill-first\":\n      sortedDevices.sort((a, b) => a.deviceId.localeCompare(b.deviceId));\n      break;\n    case \"capacity-based\":\n      sortedDevices.sort((a, b) => b.totalClones - a.totalClones);\n      break;\n    case \"round-robin\":\n    default:\n      sortedDevices.sort((a, b) => b.availableClones - a.availableClones);\n      break;\n  }\n  if (strategy === \"round-robin\") {\n    while (remainingSlots > 0 && sortedDevices.some((d) => d.availableClones > 0)) {\n      for (const device of sortedDevices) {\n        if (remainingSlots <= 0) break;\n        if (device.availableClones > 0) {\n          const existingPlan = plan.find((p) => p.deviceId === device.deviceId);\n          if (existingPlan) {\n            existingPlan.clonesToAssign++;\n            existingPlan.remainingCapacity--;\n          } else {\n            plan.push({\n              deviceId: device.deviceId,\n              clonesToAssign: 1,\n              remainingCapacity: device.availableClones - 1\n            });\n          }\n          device.availableClones--;\n          remainingSlots--;\n        }\n      }\n    }\n  } else {\n    for (const device of sortedDevices) {\n      if (remainingSlots <= 0) break;\n      const slotsToAssign = Math.min(remainingSlots, device.availableClones);\n      if (slotsToAssign > 0) {\n        plan.push({\n          deviceId: device.deviceId,\n          clonesToAssign: slotsToAssign,\n          remainingCapacity: device.availableClones - slotsToAssign\n        });\n        remainingSlots -= slotsToAssign;\n      }\n    }\n  }\n  return plan;\n}\nasync function getSuggestedAlternatives(capacityData, requiredSlots) {\n  const alternatives = [\n    {\n      strategy: \"Wait for devices\",\n      description: `Wait for ${requiredSlots - capacityData.totalCapacity.availableClones} more clones to become available`,\n      feasible: capacityData.totalCapacity.assignedClones > 0\n      // Some might become available\n    },\n    {\n      strategy: \"Partial assignment\",\n      description: `Assign ${capacityData.totalCapacity.availableClones} accounts now, ${requiredSlots - capacityData.totalCapacity.availableClones} later`,\n      feasible: capacityData.totalCapacity.availableClones > 0\n    },\n    {\n      strategy: \"Include unhealthy devices\",\n      description: \"Consider devices with health issues for assignment\",\n      feasible: capacityData.totalCapacity.brokenClones > 0\n    }\n  ];\n  return alternatives;\n}\nexport {\n  GET,\n  POST\n};\n"],"names":[],"mappings":"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"}