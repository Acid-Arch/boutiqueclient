{"version":3,"file":"_server.ts-Dnc-Ld_O.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/admin/ip-whitelist/_server.ts.js"],"sourcesContent":["import { json } from \"@sveltejs/kit\";\nimport { a as addIPToWhitelist, r as removeIPFromWhitelist } from \"../../../../../chunks/ip-whitelist.js\";\nimport { i as isValidCIDR, n as normalizeCIDR, a as ipToCIDR } from \"../../../../../chunks/ip-utils.js\";\nimport pg from \"pg\";\nconst { Pool } = pg;\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === \"production\" ? { rejectUnauthorized: false } : false\n});\nconst GET = async ({ url }) => {\n  try {\n    const client = await pool.connect();\n    const page = parseInt(url.searchParams.get(\"page\") || \"1\");\n    const limit = parseInt(url.searchParams.get(\"limit\") || \"50\");\n    const offset = (page - 1) * limit;\n    const activeOnly = url.searchParams.get(\"active\") !== \"false\";\n    const userIdFilter = url.searchParams.get(\"userId\");\n    let whereConditions = [];\n    let queryParams = [];\n    let paramIndex = 1;\n    if (activeOnly) {\n      whereConditions.push(\"iw.is_active = true\");\n    }\n    if (userIdFilter) {\n      if (userIdFilter === \"global\") {\n        whereConditions.push(\"iw.user_id IS NULL\");\n      } else {\n        whereConditions.push(`iw.user_id = $${paramIndex}`);\n        queryParams.push(parseInt(userIdFilter));\n        paramIndex++;\n      }\n    }\n    const whereClause = whereConditions.length > 0 ? \"WHERE \" + whereConditions.join(\" AND \") : \"\";\n    try {\n      const countQuery = `\n        SELECT COUNT(*) as total\n        FROM ip_whitelist iw\n        ${whereClause}\n      `;\n      const countResult = await client.query(countQuery, queryParams);\n      const totalCount = parseInt(countResult.rows[0].total);\n      const dataQuery = `\n        SELECT \n          iw.id,\n          iw.address,\n          iw.description,\n          iw.user_id,\n          iw.is_active,\n          iw.created_by,\n          iw.created_at,\n          iw.expires_at,\n          u.email as user_email,\n          cu.email as created_by_email\n        FROM ip_whitelist iw\n        LEFT JOIN users u ON iw.user_id = u.id\n        LEFT JOIN users cu ON iw.created_by = cu.id\n        ${whereClause}\n        ORDER BY \n          iw.user_id NULLS FIRST,\n          iw.created_at DESC\n        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n      `;\n      queryParams.push(limit, offset);\n      const dataResult = await client.query(dataQuery, queryParams);\n      return json({\n        success: true,\n        data: dataResult.rows,\n        pagination: {\n          page,\n          limit,\n          total: totalCount,\n          totalPages: Math.ceil(totalCount / limit)\n        }\n      });\n    } finally {\n      client.release();\n    }\n  } catch (error) {\n    console.error(\"Get IP whitelist error:\", error);\n    return json(\n      {\n        success: false,\n        error: \"Failed to retrieve IP whitelist entries\"\n      },\n      { status: 500 }\n    );\n  }\n};\nconst POST = async ({ request }) => {\n  try {\n    const {\n      address,\n      description,\n      userId,\n      expiresAt\n    } = await request.json();\n    if (!address) {\n      return json(\n        {\n          success: false,\n          error: \"IP address or CIDR is required\"\n        },\n        { status: 400 }\n      );\n    }\n    let normalizedAddress;\n    if (address.includes(\"/\")) {\n      if (!isValidCIDR(address)) {\n        return json(\n          {\n            success: false,\n            error: \"Invalid CIDR format\"\n          },\n          { status: 400 }\n        );\n      }\n      const normalized = normalizeCIDR(address);\n      if (!normalized) {\n        return json(\n          {\n            success: false,\n            error: \"Failed to normalize CIDR address\"\n          },\n          { status: 400 }\n        );\n      }\n      normalizedAddress = normalized;\n    } else {\n      const cidr = ipToCIDR(address);\n      if (!cidr) {\n        return json(\n          {\n            success: false,\n            error: \"Invalid IP address format\"\n          },\n          { status: 400 }\n        );\n      }\n      normalizedAddress = cidr;\n    }\n    let expirationDate = null;\n    if (expiresAt) {\n      expirationDate = new Date(expiresAt);\n      if (isNaN(expirationDate.getTime())) {\n        return json(\n          {\n            success: false,\n            error: \"Invalid expiration date format\"\n          },\n          { status: 400 }\n        );\n      }\n    }\n    const result = await addIPToWhitelist(\n      normalizedAddress,\n      description || null,\n      userId || null,\n      1,\n      // TODO: Get from authenticated user session\n      expirationDate\n    );\n    if (!result.success) {\n      return json(\n        {\n          success: false,\n          error: result.error || \"Failed to add IP to whitelist\"\n        },\n        { status: 500 }\n      );\n    }\n    return json({\n      success: true,\n      id: result.id,\n      address: normalizedAddress\n    });\n  } catch (error) {\n    console.error(\"Add IP whitelist error:\", error);\n    return json(\n      {\n        success: false,\n        error: \"Internal server error\"\n      },\n      { status: 500 }\n    );\n  }\n};\nconst PUT = async ({ request }) => {\n  try {\n    const {\n      id,\n      description,\n      isActive,\n      expiresAt\n    } = await request.json();\n    if (!id) {\n      return json(\n        {\n          success: false,\n          error: \"Entry ID is required\"\n        },\n        { status: 400 }\n      );\n    }\n    const client = await pool.connect();\n    try {\n      const updates = [];\n      const values = [];\n      let paramIndex = 1;\n      if (description !== void 0) {\n        updates.push(`description = $${paramIndex}`);\n        values.push(description);\n        paramIndex++;\n      }\n      if (isActive !== void 0) {\n        updates.push(`is_active = $${paramIndex}`);\n        values.push(isActive);\n        paramIndex++;\n      }\n      if (expiresAt !== void 0) {\n        if (expiresAt) {\n          const expirationDate = new Date(expiresAt);\n          if (isNaN(expirationDate.getTime())) {\n            return json(\n              {\n                success: false,\n                error: \"Invalid expiration date format\"\n              },\n              { status: 400 }\n            );\n          }\n          updates.push(`expires_at = $${paramIndex}`);\n          values.push(expirationDate);\n        } else {\n          updates.push(`expires_at = NULL`);\n        }\n        paramIndex++;\n      }\n      if (updates.length === 0) {\n        return json(\n          {\n            success: false,\n            error: \"No updates provided\"\n          },\n          { status: 400 }\n        );\n      }\n      values.push(id);\n      const query = `\n        UPDATE ip_whitelist \n        SET ${updates.join(\", \")}, updated_at = NOW()\n        WHERE id = $${paramIndex}\n        RETURNING *\n      `;\n      const result = await client.query(query, values);\n      if (result.rows.length === 0) {\n        return json(\n          {\n            success: false,\n            error: \"Entry not found\"\n          },\n          { status: 404 }\n        );\n      }\n      return json({\n        success: true,\n        data: result.rows[0]\n      });\n    } finally {\n      client.release();\n    }\n  } catch (error) {\n    console.error(\"Update IP whitelist error:\", error);\n    return json(\n      {\n        success: false,\n        error: \"Internal server error\"\n      },\n      { status: 500 }\n    );\n  }\n};\nconst DELETE = async ({ url }) => {\n  try {\n    const id = url.searchParams.get(\"id\");\n    if (!id) {\n      return json(\n        {\n          success: false,\n          error: \"Entry ID is required\"\n        },\n        { status: 400 }\n      );\n    }\n    const result = await removeIPFromWhitelist(parseInt(id));\n    if (!result.success) {\n      return json(\n        {\n          success: false,\n          error: result.error || \"Failed to remove IP from whitelist\"\n        },\n        { status: 500 }\n      );\n    }\n    return json({\n      success: true\n    });\n  } catch (error) {\n    console.error(\"Delete IP whitelist error:\", error);\n    return json(\n      {\n        success: false,\n        error: \"Internal server error\"\n      },\n      { status: 500 }\n    );\n  }\n};\nexport {\n  DELETE,\n  GET,\n  POST,\n  PUT\n};\n"],"names":[],"mappings":"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"}