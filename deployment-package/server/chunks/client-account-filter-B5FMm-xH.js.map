{"version":3,"file":"client-account-filter-B5FMm-xH.js","sources":["../../../.svelte-kit/adapter-node/chunks/client-account-filter.js"],"sourcesContent":["import { prisma } from \"./database.js\";\nasync function getClientAccountsForScraping() {\n  try {\n    const accounts = await prisma.igAccount.findMany({\n      where: {\n        accountType: \"CLIENT\"\n        // Only CLIENT accounts (not ML_TREND_FINDER)\n        // Include both owned and unowned accounts\n        // Unowned accounts are company accounts with op.pl emails ready for client assignment\n      },\n      select: {\n        id: true,\n        instagramUsername: true,\n        // Note: using actual column name\n        emailAddress: true,\n        // Note: using actual column name\n        ownerId: true,\n        accountType: true,\n        visibility: true,\n        isShared: true,\n        status: true,\n        // Note: using actual column name\n        loginTimestamp: true,\n        // Note: using actual column name\n        createdAt: true\n      },\n      orderBy: [\n        { ownerId: \"asc\" },\n        // Owned accounts first\n        { instagramUsername: \"asc\" }\n      ]\n    });\n    return accounts.map((account) => ({\n      id: account.id,\n      username: account.instagramUsername,\n      email: account.emailAddress,\n      ownerId: account.ownerId ? parseInt(account.ownerId) : null,\n      accountType: account.accountType || \"CLIENT\",\n      visibility: account.visibility || \"PRIVATE\",\n      isShared: account.isShared || false,\n      currentStatus: account.status || \"Unknown\",\n      lastLogin: account.loginTimestamp,\n      creationDate: account.createdAt\n    }));\n  } catch (error) {\n    console.error(\"Error fetching client accounts for scraping:\", error);\n    throw new Error(`Failed to fetch client accounts: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\nasync function getClientAccountStats() {\n  try {\n    const [totalStats, ownedStats, activeStats] = await Promise.all([\n      // Total CLIENT accounts\n      prisma.igAccount.count({\n        where: { accountType: \"CLIENT\" }\n      }),\n      // Owned CLIENT accounts\n      prisma.igAccount.count({\n        where: {\n          accountType: \"CLIENT\",\n          ownerId: { not: null }\n        }\n      }),\n      // Active accounts (recently logged in or in ready states)\n      prisma.igAccount.count({\n        where: {\n          accountType: \"CLIENT\",\n          status: { in: [\"Active\", \"Online\", \"Ready\", \"Unused\"] }\n        }\n      })\n    ]);\n    const unownedClientAccounts = totalStats - ownedStats;\n    const eligibleForScraping = totalStats;\n    return {\n      totalClientAccounts: totalStats,\n      ownedClientAccounts: ownedStats,\n      unownedClientAccounts,\n      activeAccounts: activeStats,\n      eligibleForScraping\n    };\n  } catch (error) {\n    console.error(\"Error fetching client account stats:\", error);\n    throw new Error(`Failed to fetch client account stats: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\nfunction filterAccountsForScraping(accounts) {\n  return accounts.filter((account) => {\n    if (!account.username || account.username.trim() === \"\") {\n      return false;\n    }\n    const problematicStates = [\"Suspended\", \"Banned\", \"Deleted\", \"Error\", \"Failed\"];\n    if (account.currentStatus && problematicStates.includes(account.currentStatus)) {\n      return false;\n    }\n    if (account.accountType !== \"CLIENT\") {\n      return false;\n    }\n    return true;\n  });\n}\nasync function getClientAccountSample(limit = 5) {\n  try {\n    const [ownedAccounts, unownedAccounts] = await Promise.all([\n      prisma.igAccount.findMany({\n        where: {\n          accountType: \"CLIENT\",\n          ownerId: { not: null },\n          status: { notIn: [\"Suspended\", \"Banned\", \"Deleted\", \"Error\", \"Failed\"] }\n        },\n        select: {\n          id: true,\n          instagramUsername: true,\n          emailAddress: true,\n          ownerId: true,\n          accountType: true,\n          visibility: true,\n          isShared: true,\n          status: true,\n          loginTimestamp: true,\n          createdAt: true\n        },\n        orderBy: { loginTimestamp: \"desc\" },\n        take: Math.ceil(limit / 2)\n        // Half the sample from owned accounts\n      }),\n      prisma.igAccount.findMany({\n        where: {\n          accountType: \"CLIENT\",\n          ownerId: null,\n          emailAddress: { contains: \"@op.pl\" },\n          status: { notIn: [\"Suspended\", \"Banned\", \"Deleted\", \"Error\", \"Failed\"] }\n        },\n        select: {\n          id: true,\n          instagramUsername: true,\n          emailAddress: true,\n          ownerId: true,\n          accountType: true,\n          visibility: true,\n          isShared: true,\n          status: true,\n          loginTimestamp: true,\n          createdAt: true\n        },\n        orderBy: { instagramUsername: \"asc\" },\n        take: Math.floor(limit / 2)\n        // Half from unassigned company accounts\n      })\n    ]);\n    const allAccounts = [...ownedAccounts, ...unownedAccounts].slice(0, limit);\n    return allAccounts.map((account) => ({\n      id: account.id,\n      username: account.instagramUsername,\n      email: account.emailAddress,\n      ownerId: account.ownerId ? parseInt(account.ownerId) : null,\n      accountType: account.accountType || \"CLIENT\",\n      visibility: account.visibility || \"PRIVATE\",\n      isShared: account.isShared || false,\n      currentStatus: account.status || \"Unknown\",\n      lastLogin: account.loginTimestamp,\n      creationDate: account.createdAt\n    }));\n  } catch (error) {\n    console.error(\"Error fetching client account sample:\", error);\n    throw new Error(`Failed to fetch account sample: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\nexport {\n  getClientAccountSample as a,\n  getClientAccountsForScraping as b,\n  filterAccountsForScraping as f,\n  getClientAccountStats as g\n};\n"],"names":[],"mappings":";;AACA,eAAe,4BAA4B,GAAG;AAC9C,EAAE,IAAI;AACN,IAAI,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;AACrD,MAAM,KAAK,EAAE;AACb,QAAQ,WAAW,EAAE;AACrB;AACA;AACA;AACA,OAAO;AACP,MAAM,MAAM,EAAE;AACd,QAAQ,EAAE,EAAE,IAAI;AAChB,QAAQ,iBAAiB,EAAE,IAAI;AAC/B;AACA,QAAQ,YAAY,EAAE,IAAI;AAC1B;AACA,QAAQ,OAAO,EAAE,IAAI;AACrB,QAAQ,WAAW,EAAE,IAAI;AACzB,QAAQ,UAAU,EAAE,IAAI;AACxB,QAAQ,QAAQ,EAAE,IAAI;AACtB,QAAQ,MAAM,EAAE,IAAI;AACpB;AACA,QAAQ,cAAc,EAAE,IAAI;AAC5B;AACA,QAAQ,SAAS,EAAE;AACnB,OAAO;AACP,MAAM,OAAO,EAAE;AACf,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;AAC1B;AACA,QAAQ,EAAE,iBAAiB,EAAE,KAAK;AAClC;AACA,KAAK,CAAC;AACN,IAAI,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,MAAM;AACtC,MAAM,EAAE,EAAE,OAAO,CAAC,EAAE;AACpB,MAAM,QAAQ,EAAE,OAAO,CAAC,iBAAiB;AACzC,MAAM,KAAK,EAAE,OAAO,CAAC,YAAY;AACjC,MAAM,OAAO,EAAE,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI;AACjE,MAAM,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,QAAQ;AAClD,MAAM,UAAU,EAAE,OAAO,CAAC,UAAU,IAAI,SAAS;AACjD,MAAM,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,KAAK;AACzC,MAAM,aAAa,EAAE,OAAO,CAAC,MAAM,IAAI,SAAS;AAChD,MAAM,SAAS,EAAE,OAAO,CAAC,cAAc;AACvC,MAAM,YAAY,EAAE,OAAO,CAAC;AAC5B,KAAK,CAAC,CAAC;AACP,EAAE,CAAC,CAAC,OAAO,KAAK,EAAE;AAClB,IAAI,OAAO,CAAC,KAAK,CAAC,8CAA8C,EAAE,KAAK,CAAC;AACxE,IAAI,MAAM,IAAI,KAAK,CAAC,CAAC,iCAAiC,EAAE,KAAK,YAAY,KAAK,GAAG,KAAK,CAAC,OAAO,GAAG,eAAe,CAAC,CAAC,CAAC;AACnH,EAAE;AACF;AACA,eAAe,qBAAqB,GAAG;AACvC,EAAE,IAAI;AACN,IAAI,MAAM,CAAC,UAAU,EAAE,UAAU,EAAE,WAAW,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;AACpE;AACA,MAAM,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;AAC7B,QAAQ,KAAK,EAAE,EAAE,WAAW,EAAE,QAAQ;AACtC,OAAO,CAAC;AACR;AACA,MAAM,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;AAC7B,QAAQ,KAAK,EAAE;AACf,UAAU,WAAW,EAAE,QAAQ;AAC/B,UAAU,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI;AAC9B;AACA,OAAO,CAAC;AACR;AACA,MAAM,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;AAC7B,QAAQ,KAAK,EAAE;AACf,UAAU,WAAW,EAAE,QAAQ;AAC/B,UAAU,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC;AAC/D;AACA,OAAO;AACP,KAAK,CAAC;AACN,IAAI,MAAM,qBAAqB,GAAG,UAAU,GAAG,UAAU;AACzD,IAAI,MAAM,mBAAmB,GAAG,UAAU;AAC1C,IAAI,OAAO;AACX,MAAM,mBAAmB,EAAE,UAAU;AACrC,MAAM,mBAAmB,EAAE,UAAU;AACrC,MAAM,qBAAqB;AAC3B,MAAM,cAAc,EAAE,WAAW;AACjC,MAAM;AACN,KAAK;AACL,EAAE,CAAC,CAAC,OAAO,KAAK,EAAE;AAClB,IAAI,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC;AAChE,IAAI,MAAM,IAAI,KAAK,CAAC,CAAC,sCAAsC,EAAE,KAAK,YAAY,KAAK,GAAG,KAAK,CAAC,OAAO,GAAG,eAAe,CAAC,CAAC,CAAC;AACxH,EAAE;AACF;AACA,SAAS,yBAAyB,CAAC,QAAQ,EAAE;AAC7C,EAAE,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,KAAK;AACtC,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;AAC7D,MAAM,OAAO,KAAK;AAClB,IAAI;AACJ,IAAI,MAAM,iBAAiB,GAAG,CAAC,WAAW,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC;AACnF,IAAI,IAAI,OAAO,CAAC,aAAa,IAAI,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;AACpF,MAAM,OAAO,KAAK;AAClB,IAAI;AACJ,IAAI,IAAI,OAAO,CAAC,WAAW,KAAK,QAAQ,EAAE;AAC1C,MAAM,OAAO,KAAK;AAClB,IAAI;AACJ,IAAI,OAAO,IAAI;AACf,EAAE,CAAC,CAAC;AACJ;AACA,eAAe,sBAAsB,CAAC,KAAK,GAAG,CAAC,EAAE;AACjD,EAAE,IAAI;AACN,IAAI,MAAM,CAAC,aAAa,EAAE,eAAe,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;AAC/D,MAAM,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;AAChC,QAAQ,KAAK,EAAE;AACf,UAAU,WAAW,EAAE,QAAQ;AAC/B,UAAU,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;AAChC,UAAU,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,WAAW,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC;AAChF,SAAS;AACT,QAAQ,MAAM,EAAE;AAChB,UAAU,EAAE,EAAE,IAAI;AAClB,UAAU,iBAAiB,EAAE,IAAI;AACjC,UAAU,YAAY,EAAE,IAAI;AAC5B,UAAU,OAAO,EAAE,IAAI;AACvB,UAAU,WAAW,EAAE,IAAI;AAC3B,UAAU,UAAU,EAAE,IAAI;AAC1B,UAAU,QAAQ,EAAE,IAAI;AACxB,UAAU,MAAM,EAAE,IAAI;AACtB,UAAU,cAAc,EAAE,IAAI;AAC9B,UAAU,SAAS,EAAE;AACrB,SAAS;AACT,QAAQ,OAAO,EAAE,EAAE,cAAc,EAAE,MAAM,EAAE;AAC3C,QAAQ,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC;AACjC;AACA,OAAO,CAAC;AACR,MAAM,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;AAChC,QAAQ,KAAK,EAAE;AACf,UAAU,WAAW,EAAE,QAAQ;AAC/B,UAAU,OAAO,EAAE,IAAI;AACvB,UAAU,YAAY,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE;AAC9C,UAAU,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,WAAW,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC;AAChF,SAAS;AACT,QAAQ,MAAM,EAAE;AAChB,UAAU,EAAE,EAAE,IAAI;AAClB,UAAU,iBAAiB,EAAE,IAAI;AACjC,UAAU,YAAY,EAAE,IAAI;AAC5B,UAAU,OAAO,EAAE,IAAI;AACvB,UAAU,WAAW,EAAE,IAAI;AAC3B,UAAU,UAAU,EAAE,IAAI;AAC1B,UAAU,QAAQ,EAAE,IAAI;AACxB,UAAU,MAAM,EAAE,IAAI;AACtB,UAAU,cAAc,EAAE,IAAI;AAC9B,UAAU,SAAS,EAAE;AACrB,SAAS;AACT,QAAQ,OAAO,EAAE,EAAE,iBAAiB,EAAE,KAAK,EAAE;AAC7C,QAAQ,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC;AAClC;AACA,OAAO;AACP,KAAK,CAAC;AACN,IAAI,MAAM,WAAW,GAAG,CAAC,GAAG,aAAa,EAAE,GAAG,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC;AAC9E,IAAI,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,MAAM;AACzC,MAAM,EAAE,EAAE,OAAO,CAAC,EAAE;AACpB,MAAM,QAAQ,EAAE,OAAO,CAAC,iBAAiB;AACzC,MAAM,KAAK,EAAE,OAAO,CAAC,YAAY;AACjC,MAAM,OAAO,EAAE,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI;AACjE,MAAM,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,QAAQ;AAClD,MAAM,UAAU,EAAE,OAAO,CAAC,UAAU,IAAI,SAAS;AACjD,MAAM,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,KAAK;AACzC,MAAM,aAAa,EAAE,OAAO,CAAC,MAAM,IAAI,SAAS;AAChD,MAAM,SAAS,EAAE,OAAO,CAAC,cAAc;AACvC,MAAM,YAAY,EAAE,OAAO,CAAC;AAC5B,KAAK,CAAC,CAAC;AACP,EAAE,CAAC,CAAC,OAAO,KAAK,EAAE;AAClB,IAAI,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC;AACjE,IAAI,MAAM,IAAI,KAAK,CAAC,CAAC,gCAAgC,EAAE,KAAK,YAAY,KAAK,GAAG,KAAK,CAAC,OAAO,GAAG,eAAe,CAAC,CAAC,CAAC;AAClH,EAAE;AACF;;;;"}