# Nginx Configuration for Boutique Client Portal
# Hetzner Server IP: 5.78.147.68 (HTTP-only deployment)
# This configuration is for initial testing without domain/SSL
# Location: /etc/nginx/sites-available/boutique-client

server {
    listen 80;
    listen [::]:80;
    server_name 5.78.147.68;
    
    # Server identification
    server_tokens off;
    
    # Logging
    access_log /var/log/nginx/boutique-client-access.log;
    error_log /var/log/nginx/boutique-client-error.log warn;
    
    # Security headers (adjusted for HTTP)
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Content Security Policy (adjusted for IP-based deployment)
    add_header Content-Security-Policy "default-src 'self' http://5.78.147.68:3000; script-src 'self' 'unsafe-inline' 'unsafe-eval' http://5.78.147.68:3000; style-src 'self' 'unsafe-inline' http://5.78.147.68:3000; img-src 'self' data: https: http:; font-src 'self' data:; connect-src 'self' ws://5.78.147.68:8081 http://5.78.147.68:3000; frame-ancestors 'none';" always;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/atom+xml
        image/svg+xml;
    
    # Client settings
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Main application (SvelteKit)
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Security
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
    
    # WebSocket endpoint (for real-time features)
    location /ws {
        proxy_pass http://localhost:8081;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        proxy_connect_timeout 60s;
    }
    
    # Health check endpoint (no logging)
    location /api/admin/health {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        access_log off;
        
        # Quick timeout for health checks
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }
    
    # API endpoints
    location /api/ {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API-specific timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Enable caching for GET requests
        proxy_cache_methods GET HEAD;
    }
    
    # Static assets with aggressive caching
    location /_app/ {
        proxy_pass http://localhost:3000;
        
        # Long-term caching for static assets
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Compression
        gzip_static on;
    }
    
    # Favicon
    location = /favicon.ico {
        proxy_pass http://localhost:3000;
        expires 1M;
        access_log off;
    }
    
    # Robots.txt (block all for testing environment)
    location = /robots.txt {
        return 200 "User-agent: *\nDisallow: /";
        add_header Content-Type text/plain;
        access_log off;
    }
    
    # Security: Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }
    
    # Security: Block access to common sensitive paths
    location ~ ^/(config|logs|\.env|package\.json|ecosystem\.config\.js) {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }
    
    # Rate limiting (basic protection)
    # Note: This requires nginx limit_req_zone to be configured in nginx.conf
    # location /api/auth/ {
    #     limit_req zone=auth burst=5 nodelay;
    #     proxy_pass http://localhost:3000;
    # }
    
    # Error pages
    error_page 404 /404;
    error_page 500 502 503 504 /error;
    
    # Handle errors gracefully
    location /error {
        proxy_pass http://localhost:3000;
        internal;
    }
    
    location /404 {
        proxy_pass http://localhost:3000;
        internal;
    }
}

# Optional: Redirect www subdomain if someone tries to access it
# server {
#     listen 80;
#     server_name www.5.78.147.68;
#     return 301 http://5.78.147.68$request_uri;
# }

# Rate limiting zones (add to /etc/nginx/nginx.conf in http block)
# limit_req_zone $binary_remote_addr zone=global:10m rate=10r/s;
# limit_req_zone $binary_remote_addr zone=auth:10m rate=1r/s;
# limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;