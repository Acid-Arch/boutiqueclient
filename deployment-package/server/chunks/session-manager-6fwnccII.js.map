{"version":3,"file":"session-manager-6fwnccII.js","sources":["../../../.svelte-kit/adapter-node/chunks/session-manager.js"],"sourcesContent":["import { query } from \"./db-loader.js\";\nasync function getSessions(filter = {}) {\n  try {\n    const {\n      status = \"all\",\n      limit = 20,\n      page = 1\n    } = filter;\n    let sessionQuery = `\n\t\t\tSELECT \n\t\t\t\tid,\n\t\t\t\tsession_type,\n\t\t\t\tstatus,\n\t\t\t\ttotal_accounts,\n\t\t\t\tcompleted_accounts,\n\t\t\t\tfailed_accounts,\n\t\t\t\tskipped_accounts,\n\t\t\t\tprogress,\n\t\t\t\tstart_time,\n\t\t\t\tend_time,\n\t\t\t\testimated_completion,\n\t\t\t\ttotal_request_units,\n\t\t\t\testimated_cost,\n\t\t\t\terror_count,\n\t\t\t\tlast_error,\n\t\t\t\ttriggered_by,\n\t\t\t\ttrigger_source,\n\t\t\t\tcreated_at,\n\t\t\t\tupdated_at\n\t\t\tFROM scraping_sessions\n\t\t`;\n    const queryParams = [];\n    let paramCount = 0;\n    if (status === \"active\") {\n      sessionQuery += ` WHERE status IN ('INITIALIZING', 'RUNNING', 'PAUSED')`;\n    } else if (status !== \"all\") {\n      const statusList = status.split(\",\").map((s) => s.trim().toUpperCase());\n      const placeholders = statusList.map((_, index) => `$${index + 1}`).join(\", \");\n      sessionQuery += ` WHERE status IN (${placeholders})`;\n      queryParams.push(...statusList);\n      paramCount = statusList.length;\n    }\n    sessionQuery += ` ORDER BY created_at DESC`;\n    const offset = (page - 1) * limit;\n    sessionQuery += ` LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}`;\n    queryParams.push(limit, offset);\n    const result = await query(sessionQuery, queryParams);\n    const sessions = (result?.rows || []).map(transformSessionData);\n    let countQuery = `SELECT COUNT(*) as count FROM scraping_sessions`;\n    let countParams = [];\n    if (status === \"active\") {\n      countQuery += ` WHERE status IN ('INITIALIZING', 'RUNNING', 'PAUSED')`;\n    } else if (status !== \"all\") {\n      const statusList = status.split(\",\").map((s) => s.trim().toUpperCase());\n      const placeholders = statusList.map((_, index) => `$${index + 1}`).join(\", \");\n      countQuery += ` WHERE status IN (${placeholders})`;\n      countParams = statusList;\n    }\n    const countResult = await query(countQuery, countParams);\n    const total = parseInt(countResult?.rows?.[0]?.count || \"0\");\n    return {\n      sessions,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  } catch (error) {\n    console.error(\"Error fetching sessions:\", error);\n    throw new Error(`Failed to fetch sessions: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\nasync function getSessionById(sessionId) {\n  try {\n    const sessionQuery = `\n\t\t\tSELECT \n\t\t\t\tid,\n\t\t\t\tsession_type,\n\t\t\t\tstatus,\n\t\t\t\ttotal_accounts,\n\t\t\t\tcompleted_accounts,\n\t\t\t\tfailed_accounts,\n\t\t\t\tskipped_accounts,\n\t\t\t\tprogress,\n\t\t\t\tstart_time,\n\t\t\t\tend_time,\n\t\t\t\testimated_completion,\n\t\t\t\ttotal_request_units,\n\t\t\t\testimated_cost,\n\t\t\t\terror_count,\n\t\t\t\tlast_error,\n\t\t\t\ttriggered_by,\n\t\t\t\ttrigger_source,\n\t\t\t\tcreated_at,\n\t\t\t\tupdated_at\n\t\t\tFROM scraping_sessions\n\t\t\tWHERE id = $1\n\t\t`;\n    const result = await query(sessionQuery, [sessionId]);\n    if (result?.rows && result.rows.length > 0) {\n      return transformSessionData(result.rows[0]);\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error fetching session by ID:\", error);\n    throw new Error(`Failed to fetch session: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\nfunction transformSessionData(row) {\n  return {\n    id: row.id,\n    sessionType: row.session_type || \"UNKNOWN\",\n    status: row.status || \"PENDING\",\n    totalAccounts: row.total_accounts || 0,\n    completedAccounts: row.completed_accounts || 0,\n    failedAccounts: row.failed_accounts || 0,\n    skippedAccounts: row.skipped_accounts || 0,\n    progress: row.progress || 0,\n    startTime: row.start_time ? new Date(row.start_time) : null,\n    endTime: row.end_time ? new Date(row.end_time) : null,\n    estimatedCompletion: row.estimated_completion ? new Date(row.estimated_completion) : null,\n    totalRequestUnits: row.total_request_units || 0,\n    estimatedCost: parseFloat(row.estimated_cost || \"0\"),\n    errorCount: row.error_count || 0,\n    lastError: row.last_error,\n    triggeredBy: row.triggered_by,\n    triggerSource: row.trigger_source || \"MANUAL\",\n    createdAt: new Date(row.created_at),\n    updatedAt: new Date(row.updated_at)\n  };\n}\nasync function updateSessionStatus(sessionId, status, additionalData = {}) {\n  try {\n    const updates = [\"status = $2\"];\n    const params = [sessionId, status];\n    let paramCount = 2;\n    for (const [key, value] of Object.entries(additionalData)) {\n      updates.push(`${key} = $${++paramCount}`);\n      params.push(value);\n    }\n    updates.push(`updated_at = CURRENT_TIMESTAMP`);\n    const updateQuery = `\n\t\t\tUPDATE scraping_sessions \n\t\t\tSET ${updates.join(\", \")}\n\t\t\tWHERE id = $1\n\t\t`;\n    await query(updateQuery, params);\n  } catch (error) {\n    console.error(\"Error updating session status:\", error);\n    throw new Error(`Failed to update session: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\nasync function getSessionStats() {\n  try {\n    const statsQuery = `\n\t\t\tSELECT \n\t\t\t\tCOUNT(*) as total_sessions,\n\t\t\t\tCOUNT(CASE WHEN status IN ('INITIALIZING', 'RUNNING', 'PAUSED') THEN 1 END) as active_sessions,\n\t\t\t\tCOUNT(CASE WHEN status = 'COMPLETED' THEN 1 END) as completed_sessions,\n\t\t\t\tCOUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_sessions\n\t\t\tFROM scraping_sessions\n\t\t`;\n    const result = await query(statsQuery);\n    const stats = result?.rows?.[0];\n    return {\n      totalSessions: parseInt(stats?.total_sessions || \"0\"),\n      activeSessions: parseInt(stats?.active_sessions || \"0\"),\n      completedSessions: parseInt(stats?.completed_sessions || \"0\"),\n      failedSessions: parseInt(stats?.failed_sessions || \"0\")\n    };\n  } catch (error) {\n    console.error(\"Error fetching session stats:\", error);\n    return {\n      totalSessions: 0,\n      activeSessions: 0,\n      completedSessions: 0,\n      failedSessions: 0\n    };\n  }\n}\nasync function createBulkSession(sessionType, targetAccounts, options = {}) {\n  try {\n    const sessionId = `bulk-${Date.now()}-${Math.random().toString(36).substr(2, 8)}`;\n    const {\n      priority = \"NORMAL\",\n      batchSize = 5,\n      costLimit = 1,\n      scheduledFor = null,\n      triggeredBy = \"SYSTEM\",\n      triggerSource = \"MANUAL\"\n    } = options;\n    const unitsPerAccount = sessionType === \"DETAILED_ANALYSIS\" ? 5 : 2;\n    const estimatedUnits = targetAccounts.length * unitsPerAccount;\n    const estimatedCost = estimatedUnits * 1e-3;\n    if (estimatedCost > costLimit) {\n      throw new Error(`Estimated cost ($${estimatedCost}) exceeds limit ($${costLimit})`);\n    }\n    const createQuery = `\n\t\t\tINSERT INTO scraping_sessions (\n\t\t\t\tid, session_type, status, total_accounts, completed_accounts,\n\t\t\t\tfailed_accounts, skipped_accounts, progress, start_time,\n\t\t\t\testimated_completion, total_request_units, estimated_cost,\n\t\t\t\terror_count, triggered_by, trigger_source, target_usernames, scraping_config\n\t\t\t) VALUES (\n\t\t\t\t$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17\n\t\t\t)\n\t\t`;\n    const params = [\n      sessionId,\n      sessionType,\n      scheduledFor ? \"SCHEDULED\" : \"INITIALIZING\",\n      targetAccounts.length,\n      0,\n      // completed_accounts\n      0,\n      // failed_accounts\n      0,\n      // skipped_accounts\n      0,\n      // progress\n      scheduledFor || /* @__PURE__ */ new Date(),\n      null,\n      // estimated_completion (calculated when started)\n      estimatedUnits,\n      estimatedCost,\n      0,\n      // error_count\n      triggeredBy,\n      triggerSource,\n      JSON.stringify(targetAccounts),\n      // target_usernames\n      JSON.stringify({\n        // scraping_config\n        batchSize,\n        priority,\n        costLimit,\n        unitsPerAccount\n      })\n    ];\n    await query(createQuery, params);\n    return sessionId;\n  } catch (error) {\n    console.error(\"Error creating bulk session:\", error);\n    throw new Error(`Failed to create bulk session: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\nasync function startSession(sessionId) {\n  try {\n    const session = await getSessionById(sessionId);\n    if (!session) {\n      throw new Error(`Session ${sessionId} not found`);\n    }\n    if (![\"INITIALIZING\", \"SCHEDULED\", \"PAUSED\"].includes(session.status)) {\n      throw new Error(`Cannot start session in status: ${session.status}`);\n    }\n    const rateLimit = parseInt(process.env.HIKER_RATE_LIMIT_PER_SECOND || \"11\");\n    const estimatedDuration = Math.ceil(session.totalAccounts / rateLimit) * 1e3;\n    const estimatedCompletion = new Date(Date.now() + estimatedDuration);\n    await updateSessionStatus(sessionId, \"RUNNING\", {\n      start_time: /* @__PURE__ */ new Date(),\n      estimated_completion: estimatedCompletion\n    });\n  } catch (error) {\n    console.error(\"Error starting session:\", error);\n    throw new Error(`Failed to start session: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\nasync function pauseSession(sessionId) {\n  try {\n    const session = await getSessionById(sessionId);\n    if (!session) {\n      throw new Error(`Session ${sessionId} not found`);\n    }\n    if (session.status !== \"RUNNING\") {\n      throw new Error(`Cannot pause session in status: ${session.status}`);\n    }\n    await updateSessionStatus(sessionId, \"PAUSED\");\n  } catch (error) {\n    console.error(\"Error pausing session:\", error);\n    throw new Error(`Failed to pause session: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\nasync function cancelSession(sessionId, reason) {\n  try {\n    const session = await getSessionById(sessionId);\n    if (!session) {\n      throw new Error(`Session ${sessionId} not found`);\n    }\n    if (session.status === \"COMPLETED\") {\n      throw new Error(\"Cannot cancel a completed session\");\n    }\n    const updateData = {\n      end_time: /* @__PURE__ */ new Date()\n    };\n    if (reason) {\n      updateData.last_error = reason;\n    }\n    await updateSessionStatus(sessionId, \"CANCELLED\", updateData);\n  } catch (error) {\n    console.error(\"Error cancelling session:\", error);\n    throw new Error(`Failed to cancel session: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\nasync function updateSessionProgress(sessionId, progress) {\n  try {\n    const session = await getSessionById(sessionId);\n    if (!session) {\n      throw new Error(`Session ${sessionId} not found`);\n    }\n    const updatedData = {};\n    if (progress.completedAccounts !== void 0) {\n      updatedData.completed_accounts = progress.completedAccounts;\n    }\n    if (progress.failedAccounts !== void 0) {\n      updatedData.failed_accounts = progress.failedAccounts;\n    }\n    if (progress.skippedAccounts !== void 0) {\n      updatedData.skipped_accounts = progress.skippedAccounts;\n    }\n    if (progress.requestUnits !== void 0) {\n      updatedData.total_request_units = progress.requestUnits;\n    }\n    if (progress.actualCost !== void 0) {\n      updatedData.estimated_cost = progress.actualCost;\n    }\n    const totalProcessed = (progress.completedAccounts || session.completedAccounts) + (progress.failedAccounts || session.failedAccounts) + (progress.skippedAccounts || session.skippedAccounts);\n    const progressPercentage = Math.round(totalProcessed / session.totalAccounts * 100);\n    updatedData.progress = Math.min(progressPercentage, 100);\n    if (totalProcessed >= session.totalAccounts) {\n      updatedData.status = \"COMPLETED\";\n      updatedData.end_time = /* @__PURE__ */ new Date();\n    }\n    await query(\n      `UPDATE scraping_sessions \n\t\t\t SET ${Object.keys(updatedData).map((key, index) => `${key} = $${index + 2}`).join(\", \")}, \n\t\t\t     updated_at = CURRENT_TIMESTAMP \n\t\t\t WHERE id = $1`,\n      [sessionId, ...Object.values(updatedData)]\n    );\n  } catch (error) {\n    console.error(\"Error updating session progress:\", error);\n    throw new Error(`Failed to update session progress: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\nasync function getActiveProcessingSessions(limit = 10) {\n  try {\n    const sessionsQuery = `\n\t\t\tSELECT \n\t\t\t\tid, session_type, status, total_accounts, completed_accounts,\n\t\t\t\tfailed_accounts, skipped_accounts, progress, start_time,\n\t\t\t\tend_time, estimated_completion, total_request_units,\n\t\t\t\testimated_cost, error_count, last_error, triggered_by,\n\t\t\t\ttrigger_source, created_at, updated_at\n\t\t\tFROM scraping_sessions\n\t\t\tWHERE status IN ('RUNNING', 'INITIALIZING')\n\t\t\tORDER BY \n\t\t\t\tCASE WHEN status = 'RUNNING' THEN 1 ELSE 2 END,\n\t\t\t\tcreated_at ASC\n\t\t\tLIMIT $1\n\t\t`;\n    const result = await query(sessionsQuery, [limit]);\n    return (result?.rows || []).map(transformSessionData);\n  } catch (error) {\n    console.error(\"Error fetching active sessions:\", error);\n    throw new Error(`Failed to fetch active sessions: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\nexport {\n  getSessions as a,\n  createBulkSession as b,\n  cancelSession as c,\n  getSessionById as d,\n  getActiveProcessingSessions as e,\n  getSessionStats as g,\n  pauseSession as p,\n  startSession as s,\n  updateSessionProgress as u\n};\n"],"names":[],"mappings":"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"}